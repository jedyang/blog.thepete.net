<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:georss='http://www.georss.org/georss' xmlns:gd='http://schemas.google.com/g/2005' xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-3432715695954425874.archive</id><updated>2012-02-08T08:59:23.001-08:00</updated><category term='ruby'/><category term='agile'/><category term='git'/><category term='patterns'/><category term='flex'/><title type='text'>being agile</title><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://blog.thepete.net/feeds/archive'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/archive'/><link rel='http://schemas.google.com/g/2005#post' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/archive'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><entry><id>tag:blogger.com,1999:blog-3432715695954425874.layout</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#template'/><title type='text'>Template: being agile</title><content type='text'>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html expr:dir='data:blog.languageDirection' xmlns='http://www.w3.org/1999/xhtml' xmlns:b='http://www.google.com/2005/gml/b' xmlns:data='http://www.google.com/2005/gml/data' xmlns:expr='http://www.google.com/2005/gml/expr'&gt;
  &lt;head&gt;
    &lt;b:include data='blog' name='all-head-content'/&gt;
    &lt;title&gt;&lt;data:blog.pageTitle/&gt;&lt;/title&gt;
    &lt;b:skin&gt;&lt;![CDATA[/*
-----------------------------------------------
Blogger Template Style
Name:     Minima Stretch
Date:     26 Feb 2004
----------------------------------------------- */

/* Variable definitions
   ====================
   &lt;Variable name="bgcolor" description="Page Background Color"
             type="color" default="#fff" value="#ffffff"&gt;
   &lt;Variable name="textcolor" description="Text Color"
             type="color" default="#333" value="#333333"&gt;
   &lt;Variable name="linkcolor" description="Link Color"
             type="color" default="#58a" value="#5588aa"&gt;
   &lt;Variable name="pagetitlecolor" description="Blog Title Color"
             type="color" default="#666" value="#666666"&gt;
   &lt;Variable name="descriptioncolor" description="Blog Description Color"
             type="color" default="#999" value="#999999"&gt;
   &lt;Variable name="titlecolor" description="Post Title Color"
             type="color" default="#c60" value="#cc6600"&gt;
   &lt;Variable name="bordercolor" description="Border Color"
             type="color" default="#ccc" value="#cccccc"&gt;
   &lt;Variable name="sidebarcolor" description="Sidebar Title Color"
             type="color" default="#999" value="#999999"&gt;
   &lt;Variable name="sidebartextcolor" description="Sidebar Text Color"
             type="color" default="#666" value="#666666"&gt;
   &lt;Variable name="visitedlinkcolor" description="Visited Link Color"
             type="color" default="#999" value="#999999"&gt;
   &lt;Variable name="bodyfont" description="Text Font"
             type="font" default="normal normal 100% Georgia, Serif" value="normal normal 100% Georgia, Serif"&gt;
   &lt;Variable name="headerfont" description="Sidebar Title Font"
             type="font"
             default="normal normal 78% 'Trebuchet MS',Trebuchet,Arial,Verdana,Sans-serif" value="normal normal 78% 'Trebuchet MS',Trebuchet,Arial,Verdana,Sans-serif"&gt;
   &lt;Variable name="pagetitlefont" description="Blog Title Font"
             type="font"
             default="normal normal 200% Georgia, Serif" value="normal normal 200% Georgia, Serif"&gt;
   &lt;Variable name="descriptionfont" description="Blog Description Font"
             type="font"
             default="normal normal 78% 'Trebuchet MS', Trebuchet, Arial, Verdana, Sans-serif" value="normal normal 78% 'Trebuchet MS', Trebuchet, Arial, Verdana, Sans-serif"&gt;
   &lt;Variable name="postfooterfont" description="Post Footer Font"
             type="font"
             default="normal normal 78% 'Trebuchet MS', Trebuchet, Arial, Verdana, Sans-serif" value="normal normal 78% 'Trebuchet MS', Trebuchet, Arial, Verdana, Sans-serif"&gt;
   &lt;Variable name="startSide" description="Start side in blog language"
             type="automatic" default="left" value="left"&gt;
   &lt;Variable name="endSide" description="End side in blog language"
             type="automatic" default="right" value="right"&gt;
*/

/* Use this with templates/template-twocol.html */

body {
  background:$bgcolor;
  margin:0;
  color:$textcolor;
  font:x-small Georgia Serif;
  font-size/* */:/**/small;
  font-size: /**/small;
  text-align: center;
  }
a:link {
  color:$linkcolor;
  text-decoration:none;
  }
a:visited {
  color:$visitedlinkcolor;
  text-decoration:none;
  }
a:hover {
  color:$titlecolor;
  text-decoration:underline;
}
a img {
  border-width:0;
  }

/* Header
-----------------------------------------------
 */

#header-wrapper {
  margin:0 2% 10px;
  border:1px solid $bordercolor;
  }

#header { 
  margin: 5px;
  border: 1px solid $bordercolor;
  text-align: center;
  color:$pagetitlecolor;
}

#header-inner {
  background-position: center;
  margin-$startSide: auto;
  margin-$endSide: auto;
}

#header h1 {
  margin:5px 5px 0;
  padding:15px 20px .25em;
  line-height:1.2em;
  text-transform:uppercase;
  letter-spacing:.2em;
  font: $pagetitlefont;
}

#header a {
  color:$pagetitlecolor;
  text-decoration:none;
  }

#header a:hover {
  color:$pagetitlecolor;
  }

#header .description {
  margin:0 5px 5px;
  padding:0 20px 15px;
  text-transform:uppercase;
  letter-spacing:.2em;
  line-height: 1.4em;
  font: $descriptionfont;
  color: $descriptioncolor;
}

#header img {
  margin-$startSide: auto;
  margin-$endSide: auto;
}


/* Outer-Wrapper
----------------------------------------------- */
#outer-wrapper {
  margin:0;
  padding:10px;
  text-align:$startSide;
  font: $bodyfont;
  }

#main-wrapper {
  margin-$startSide: 2%;
  width: 67%;
  float: $startSide;
  display: inline;       /* fix for doubling margin in IE */
  word-wrap: break-word; /* fix for long text breaking sidebar float in IE */
  overflow: hidden;      /* fix for long non-text content breaking IE sidebar float */
  }

#sidebar-wrapper {
  margin-$endSide: 2%;
  width: 25%;
  float: $endSide;
  display: inline;       /* fix for doubling margin in IE */
  word-wrap: break-word; /* fix for long text breaking sidebar float in IE */
  overflow: hidden;      /* fix for long non-text content breaking IE sidebar float */
}


/* Headings
----------------------------------------------- */

/*
h2 {
  margin:1.5em 0 .75em;
  font:$headerfont;
  line-height: 1.4em;
  text-transform:uppercase;
  letter-spacing:.2em;
  color:$sidebarcolor;
}
*/


/* Posts
-----------------------------------------------
 */
h2.date-header {
  margin:1.5em 0 .5em;
  }

.post {
  margin:.5em 0 1.5em;
  border-bottom:1px dotted $bordercolor;
  padding-bottom:1.5em;
  }
.post h3 {
  margin:.25em 0 0;
  padding:0 0 4px;
  font-size:140%;
  font-weight:normal;
  line-height:1.4em;
  color:$titlecolor;
}

.post h3 a, .post h3 a:visited, .post h3 strong {
  display:block;
  text-decoration:none;
  color:$titlecolor;
  font-weight:normal;
}

.post h3 strong, .post h3 a:hover {
  color:$textcolor;
}

.post-body {
  margin:0 0 .75em;
  line-height:1.6em;
}

.post-body blockquote {
  line-height:1.3em;  
}

.post-footer {
  margin: .75em 0;
  color:$sidebarcolor;
  text-transform:uppercase;
  letter-spacing:.1em;
  font: $postfooterfont;
  line-height: 1.4em;
}

.comment-link {
  margin-$startSide:.6em;
  }
.post img {
  padding:4px;
  border:1px solid $bordercolor;
  }
.post blockquote {
  margin:1em 20px;
  }
.post blockquote p {
  margin:.75em 0;
  }

/* Comments
----------------------------------------------- */
#comments h4 {
  margin:1em 0;
  font-weight: bold;
  line-height: 1.4em;
  text-transform:uppercase;
  letter-spacing:.2em;
  color: $sidebarcolor;
  }

#comments-block {
  margin:1em 0 1.5em;
  line-height:1.6em;
  }
#comments-block .comment-author {
  margin:.5em 0;
  }
#comments-block .comment-body {
  margin:.25em 0 0;
  }
#comments-block .comment-footer {
  margin:-.25em 0 2em;
  line-height: 1.4em;
  text-transform:uppercase;
  letter-spacing:.1em;
  }
#comments-block .comment-body p {
  margin:0 0 .75em;
  }
.deleted-comment {
  font-style:italic;
  color:gray;
  }

.feed-links {
  clear: both;
  line-height: 2.5em;
}

#blog-pager-newer-link {
  float: $startSide;
 }
 
#blog-pager-older-link {
  float: $endSide;
 }
 
#blog-pager {   
  text-align: center; 
 }

/* Sidebar Content
----------------------------------------------- */
.sidebar { 
  color: $sidebartextcolor;
  line-height: 1.5em;
 }

.sidebar ul {
  list-style:none;
  margin:0 0 0;
  padding:0 0 0;
}
.sidebar li {
  margin:0;
  padding-top:0;
  padding-$endSide:0;
  padding-bottom:.25em;
  padding-$startSide:15px;
  text-indent:-15px;
  line-height:1.5em;
  }

.sidebar .widget, .main .widget { 
  border-bottom:1px dotted $bordercolor;
  margin:0 0 1.5em;
  padding:0 0 1.5em;
 }

.main .Blog { 
  border-bottom-width: 0;
 }

/* Profile 
----------------------------------------------- */
.profile-img { 
  float: $startSide;
  margin-top: 0;
  margin-$endSide: 5px;
  margin-bottom: 5px;
  margin-$startSide: 0;
  padding: 4px;
  border: 1px solid $bordercolor;
}

.profile-data {
  margin:0;
  text-transform:uppercase;
  letter-spacing:.1em;
  font: $postfooterfont;
  color: $sidebarcolor;
  font-weight: bold;
  line-height: 1.6em;
}

.profile-datablock { 
  margin:.5em 0 .5em;
}

.profile-textblock { 
  margin: 0.5em 0;
  line-height: 1.6em;
}

.profile-link { 
  font: $postfooterfont;
  text-transform: uppercase;
  letter-spacing: .1em;
}

/* Footer
----------------------------------------------- */
#footer {
  width:660px;
  clear:both;
  margin:0 auto;
  padding-top:15px;
  line-height: 1.6em;
  text-transform:uppercase;
  letter-spacing:.1em;
  text-align: center;
}

/* Pete's customizations
----------------------------------------------- */

table{margin:1em 0!important;}
table th{border-bottom:1px solid #bbb!important;padding:.2em 1em!important;}
table td{border-bottom:1px solid #ddd!important;padding:.2em 1em!important;}

]]&gt;&lt;/b:skin&gt;
  &lt;/head&gt;

  &lt;body&gt;

  &lt;div id='outer-wrapper'&gt;&lt;div id='wrap2'&gt;

    &lt;!-- skip links for text browsers --&gt;
    &lt;span id='skiplinks' style='display:none;'&gt;
      &lt;a href='#main'&gt;skip to main &lt;/a&gt; |
      &lt;a href='#sidebar'&gt;skip to sidebar&lt;/a&gt;
    &lt;/span&gt;

    &lt;div id='header-wrapper'&gt;
      &lt;b:section class='header' id='header' maxwidgets='1' showaddelement='no'&gt;
&lt;b:widget id='Header1' locked='true' title='being agile (Header)' type='Header'&gt;
&lt;b:includable id='main'&gt;

  &lt;b:if cond='data:useImage'&gt;
    &lt;b:if cond='data:imagePlacement == &amp;quot;BEHIND&amp;quot;'&gt;
      &lt;!--
      Show image as background to text. You can't really calculate the width
      reliably in JS because margins are not taken into account by any of
      clientWidth, offsetWidth or scrollWidth, so we don't force a minimum
      width if the user is using shrink to fit.
      This results in a margin-width's worth of pixels being cropped. If the
      user is not using shrink to fit then we expand the header.
      --&gt;
      &lt;b:if cond='data:mobile'&gt;
          &lt;div id='header-inner'&gt;
            &lt;div class='titlewrapper' style='background: transparent'&gt;
              &lt;h1 class='title' style='background: transparent; border-width: 0px'&gt;
                &lt;b:include name='title'/&gt;
              &lt;/h1&gt;
            &lt;/div&gt;
            &lt;b:include name='description'/&gt;
          &lt;/div&gt;
        &lt;b:else/&gt;
          &lt;div expr:style='&amp;quot;background-image: url(\&amp;quot;&amp;quot; + data:sourceUrl + &amp;quot;\&amp;quot;); &amp;quot;                        + &amp;quot;background-position: &amp;quot;                        + data:backgroundPositionStyleStr + &amp;quot;; &amp;quot;                        + data:widthStyleStr                        + &amp;quot;min-height: &amp;quot; + data:height                        + &amp;quot;_height: &amp;quot; + data:height                        + &amp;quot;background-repeat: no-repeat; &amp;quot;' id='header-inner'&gt;
            &lt;div class='titlewrapper' style='background: transparent'&gt;
              &lt;h1 class='title' style='background: transparent; border-width: 0px'&gt;
                &lt;b:include name='title'/&gt;
              &lt;/h1&gt;
            &lt;/div&gt;
            &lt;b:include name='description'/&gt;
          &lt;/div&gt;
        &lt;/b:if&gt;
    &lt;b:else/&gt;
      &lt;!--Show the image only--&gt;
      &lt;div id='header-inner'&gt;
        &lt;a expr:href='data:blog.homepageUrl' style='display: block'&gt;
          &lt;img expr:alt='data:title' expr:height='data:height' expr:id='data:widget.instanceId + &amp;quot;_headerimg&amp;quot;' expr:src='data:sourceUrl' expr:width='data:width' style='display: block'/&gt;
        &lt;/a&gt;
        &lt;!--Show the description--&gt;
        &lt;b:if cond='data:imagePlacement == &amp;quot;BEFORE_DESCRIPTION&amp;quot;'&gt;
          &lt;b:include name='description'/&gt;
        &lt;/b:if&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;
  &lt;b:else/&gt;
    &lt;!--No header image --&gt;
    &lt;div id='header-inner'&gt;
      &lt;div class='titlewrapper'&gt;
        &lt;h1 class='title'&gt;
          &lt;b:include name='title'/&gt;
        &lt;/h1&gt;
      &lt;/div&gt;
      &lt;b:include name='description'/&gt;
    &lt;/div&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
&lt;b:includable id='title'&gt;
  &lt;b:if cond='data:blog.url == data:blog.homepageUrl'&gt;
    &lt;data:title/&gt;
  &lt;b:else/&gt;
    &lt;a expr:href='data:blog.homepageUrl'&gt;&lt;data:title/&gt;&lt;/a&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
&lt;b:includable id='description'&gt;
  &lt;div class='descriptionwrapper'&gt;
    &lt;p class='description'&gt;&lt;span&gt;&lt;data:description/&gt;&lt;/span&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
&lt;/b:widget&gt;
&lt;/b:section&gt;
    &lt;/div&gt;
 
    &lt;div id='content-wrapper'&gt;

      &lt;div id='crosscol-wrapper' style='text-align:center'&gt;
        &lt;b:section class='crosscol' id='crosscol' showaddelement='no'/&gt;
      &lt;/div&gt;

      &lt;div id='main-wrapper'&gt;
        &lt;b:section class='main' id='main' showaddelement='no'&gt;
&lt;b:widget id='Blog1' locked='true' title='Blog Posts' type='Blog'&gt;
&lt;b:includable id='nextprev'&gt;
  &lt;div class='blog-pager' id='blog-pager'&gt;
    &lt;b:if cond='data:newerPageUrl'&gt;
      &lt;span id='blog-pager-newer-link'&gt;
      &lt;a class='blog-pager-newer-link' expr:href='data:newerPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-newer-link&amp;quot;' expr:title='data:newerPageTitle'&gt;&lt;data:newerPageTitle/&gt;&lt;/a&gt;
      &lt;/span&gt;
    &lt;/b:if&gt;

    &lt;b:if cond='data:olderPageUrl'&gt;
      &lt;span id='blog-pager-older-link'&gt;
      &lt;a class='blog-pager-older-link' expr:href='data:olderPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-older-link&amp;quot;' expr:title='data:olderPageTitle'&gt;&lt;data:olderPageTitle/&gt;&lt;/a&gt;
      &lt;/span&gt;
    &lt;/b:if&gt;

    &lt;a class='home-link' expr:href='data:blog.homepageUrl'&gt;&lt;data:homeMsg/&gt;&lt;/a&gt;

    &lt;b:if cond='data:mobileLinkUrl'&gt;
      &lt;div class='blog-mobile-link'&gt;
        &lt;a expr:href='data:mobileLinkUrl'&gt;&lt;data:mobileLinkMsg/&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

  &lt;/div&gt;
  &lt;div class='clear'/&gt;
&lt;/b:includable&gt;
&lt;b:includable id='shareButtons' var='post'&gt;
  &lt;b:if cond='data:top.showEmailButton'&gt;&lt;a class='goog-inline-block share-button sb-email' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=email&amp;quot;' expr:title='data:top.emailThisMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.emailThisMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showBlogThisButton'&gt;&lt;a class='goog-inline-block share-button sb-blog' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=blog&amp;quot;' expr:onclick='&amp;quot;window.open(this.href, \&amp;quot;_blank\&amp;quot;, \&amp;quot;height=270,width=475\&amp;quot;); return false;&amp;quot;' expr:title='data:top.blogThisMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.blogThisMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showTwitterButton'&gt;&lt;a class='goog-inline-block share-button sb-twitter' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=twitter&amp;quot;' expr:title='data:top.shareToTwitterMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.shareToTwitterMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showFacebookButton'&gt;&lt;a class='goog-inline-block share-button sb-facebook' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=facebook&amp;quot;' expr:onclick='&amp;quot;window.open(this.href, \&amp;quot;_blank\&amp;quot;, \&amp;quot;height=430,width=640\&amp;quot;); return false;&amp;quot;' expr:title='data:top.shareToFacebookMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.shareToFacebookMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showOrkutButton'&gt;&lt;a class='goog-inline-block share-button sb-orkut' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=orkut&amp;quot;' expr:title='data:top.shareToOrkutMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.shareToOrkutMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showDummy'&gt;&lt;div class='goog-inline-block dummy-container'&gt;&lt;data:post.dummyTag/&gt;&lt;/div&gt;&lt;/b:if&gt;
&lt;/b:includable&gt;
&lt;b:includable id='threaded_comment_js' var='post'&gt;
  &lt;script async='async' expr:src='data:post.commentSrc' type='text/javascript'/&gt;

  &lt;script type='text/javascript'&gt;
    (function() {
      var items = &lt;data:post.commentJso/&gt;;
      var msgs = &lt;data:post.commentMsgs/&gt;;
      var postId = &amp;#39;&lt;data:post.id/&gt;&amp;#39;;
      var feed = &amp;#39;&lt;data:post.commentFeed/&gt;&amp;#39;;
      var authorName = &amp;#39;&lt;data:post.author/&gt;&amp;#39;;
      var authorUrl = &amp;#39;&lt;data:post.authorUrl/&gt;&amp;#39;;
      var blogId = &amp;#39;&lt;data:top.id/&gt;&amp;#39;;
      var baseUri = &amp;#39;&lt;data:post.commentBase/&gt;&amp;#39;;
      var maxThreadDepth = &amp;#39;&lt;data:post.commentMaxThreadDepth/&gt;&amp;#39;;

// &lt;![CDATA[
      feed += '?alt=json&amp;v=2&amp;orderby=published&amp;reverse=false&amp;max-results=50';
      var cursor = null;
      if (items &amp;&amp; items.length &gt; 0) {
        cursor = parseInt(items[items.length - 1].timestamp) + 1;
      }

      var bodyFromEntry = function(entry) {
        if (entry.gd$extendedProperty) {
          for (var k in entry.gd$extendedProperty) {
            if (entry.gd$extendedProperty[k].name == 'blogger.contentRemoved') {
              return '&lt;span class="deleted-comment"&gt;' + entry.content.$t + '&lt;/span&gt;';
            }
          }
        }
        return entry.content.$t;
      }

      var parse = function(data) {
        cursor = null;
        var comments = [];
        if (data &amp;&amp; data.feed &amp;&amp; data.feed.entry) {
          for (var i = 0, entry; entry = data.feed.entry[i]; i++) {
            var comment = {};
            // comment ID, parsed out of the original id format
            var id = /blog-(\d+).post-(\d+)/.exec(entry.id.$t);
            comment.id = id ? id[2] : null;
            comment.body = bodyFromEntry(entry);
            comment.timestamp = Date.parse(entry.published.$t) + '';
            if (entry.author &amp;&amp; entry.author.constructor === Array) {
              var auth = entry.author[0];
              if (auth) {
                comment.author = {
                  name: (auth.name ? auth.name.$t : undefined),
                  profileUrl: (auth.uri ? auth.uri.$t : undefined),
                  avatarUrl: (auth.gd$image ? auth.gd$image.src : undefined)
                };
              }
            }
            if (entry.link) {
              if (entry.link[2]) {
                comment.link = comment.permalink = entry.link[2].href;
              }
              if (entry.link[3]) {
                var pid = /.*comments\/default\/(\d+)\?.*/.exec(entry.link[3].href);
                if (pid &amp;&amp; pid[1]) {
                  comment.parentId = pid[1];
                }
              }
            }
            comment.deleteclass = 'item-control blog-admin';
            if (entry.gd$extendedProperty) {
              for (var k in entry.gd$extendedProperty) {
                if (entry.gd$extendedProperty[k].name == 'blogger.itemClass') {
                  comment.deleteclass += ' ' + entry.gd$extendedProperty[k].value;
                }
              }
            }
            comments.push(comment);
          }
        }
        return comments;
      };

      var paginator = function(callback) {
        if (hasMore()) {
          var url = feed;
          if (cursor) {
            url += '&amp;published-min=' + new Date(cursor).toISOString();
          }
          window.bloggercomments = function(data) {
            var parsed = parse(data);
            cursor = parsed.length &lt; 50 ? null
                : parseInt(parsed[parsed.length - 1].timestamp) + 1
            callback(parsed);
            window.bloggercomments = null;
          }
          url += '&amp;callback=bloggercomments';
          var script = document.createElement('script');
          script.type = 'text/javascript';
          script.src = url;
          document.getElementsByTagName('head')[0].appendChild(script);
        }
      };
      var hasMore = function() {
        return !!cursor;
      };
      var getMeta = function(key, comment) {
        if ('iswriter' == key) {
          var matches = !!comment.author
              &amp;&amp; comment.author.name == authorName
              &amp;&amp; comment.author.profileUrl == authorUrl;
          return matches ? 'true' : '';
        } else if ('deletelink' == key) {
          return baseUri + '/delete-comment.g?blogID=' + blogId + '&amp;postID=' + comment.id;
        } else if ('deleteclass' == key) {
          return comment.deleteclass;
        }
        return '';
      };

      var replybox = null;
      var replyUrlParts = null;
      var replyParent = undefined;

      var onReply = function(commentId, domId) {
        if (replybox == null) {
          // lazily cache replybox, and adjust to suit this style:
          replybox = document.getElementById('comment-editor');
          if (replybox != null) {
            replybox.height = '250px';
            replybox.style.display = 'block';
            replyUrlParts = replybox.src.split('#');
          }
        }
        if (replybox &amp;&amp; (commentId !== replyParent)) {
          document.getElementById(domId).insertBefore(replybox, null);
          replybox.src = replyUrlParts[0]
              + (commentId ? '&amp;parentID=' + commentId : '')
              + '#' + replyUrlParts[1];
          replyParent = commentId;
        }
      };

      var hash = (window.location.hash || '#').substring(1);
      var startThread, targetComment;
      if (/^comment-form_/.test(hash)) {
        startThread = hash.substring('comment-form_'.length);
      } else if (/^c[0-9]+$/.test(hash)) {
        targetComment = hash.substring(1);
      }

      // Configure commenting API:
      var configJso = {
        'maxDepth': maxThreadDepth
      };
      var provider = {
        'id': postId,
        'data': items,
        'loadNext': paginator,
        'hasMore': hasMore,
        'getMeta': getMeta,
        'onReply': onReply,
        'rendered': true,
        'initComment': targetComment,
        'initReplyThread': startThread,
        'config': configJso,
        'messages': msgs
      };

      var render = function() {
        if (window.goog &amp;&amp; window.goog.comments) {
          var holder = document.getElementById('comment-holder');
          window.goog.comments.render(holder, provider);
        }
      };

      // render now, or queue to render when library loads:
      if (window.goog &amp;&amp; window.goog.comments) {
        render();
      } else {
        window.goog = window.goog || {};
        window.goog.comments = window.goog.comments || {};
        window.goog.comments.loadQueue = window.goog.comments.loadQueue || [];
        window.goog.comments.loadQueue.push(render);
      }
    })();
// ]]&gt;
  &lt;/script&gt;
&lt;/b:includable&gt;
&lt;b:includable id='backlinks' var='post'&gt;
  &lt;a name='links'/&gt;&lt;h4&gt;&lt;data:post.backlinksLabel/&gt;&lt;/h4&gt;
  &lt;b:if cond='data:post.numBacklinks != 0'&gt;
    &lt;dl class='comments-block' id='comments-block'&gt;
      &lt;b:loop values='data:post.backlinks' var='backlink'&gt;
        &lt;div class='collapsed-backlink backlink-control'&gt;
          &lt;dt class='comment-title'&gt;
            &lt;span class='backlink-toggle-zippy'&gt;&amp;#160;&lt;/span&gt;
            &lt;a expr:href='data:backlink.url' rel='nofollow'&gt;&lt;data:backlink.title/&gt;&lt;/a&gt;
            &lt;b:include data='backlink' name='backlinkDeleteIcon'/&gt;
          &lt;/dt&gt;
          &lt;dd class='comment-body collapseable'&gt;
            &lt;data:backlink.snippet/&gt;
          &lt;/dd&gt;
          &lt;dd class='comment-footer collapseable'&gt;
            &lt;span class='comment-author'&gt;&lt;data:post.authorLabel/&gt; &lt;data:backlink.author/&gt;&lt;/span&gt;
            &lt;span class='comment-timestamp'&gt;&lt;data:post.timestampLabel/&gt; &lt;data:backlink.timestamp/&gt;&lt;/span&gt;
          &lt;/dd&gt;
        &lt;/div&gt;
      &lt;/b:loop&gt;
    &lt;/dl&gt;
  &lt;/b:if&gt;
  &lt;p class='comment-footer'&gt;
    &lt;a class='comment-link' expr:href='data:post.createLinkUrl' expr:id='data:widget.instanceId + &amp;quot;_backlinks-create-link&amp;quot;' target='_blank'&gt;&lt;data:post.createLinkLabel/&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;/b:includable&gt;
&lt;b:includable id='mobile-main' var='top'&gt;
    &lt;!-- posts --&gt;
    &lt;div class='blog-posts hfeed'&gt;

      &lt;b:include data='top' name='status-message'/&gt;

      &lt;b:if cond='data:blog.pageType == &amp;quot;index&amp;quot;'&gt;
        &lt;b:loop values='data:posts' var='post'&gt;
          &lt;b:include data='post' name='mobile-index-post'/&gt;
        &lt;/b:loop&gt;
      &lt;b:else/&gt;
        &lt;b:loop values='data:posts' var='post'&gt;
          &lt;b:include data='post' name='mobile-post'/&gt;
        &lt;/b:loop&gt;
      &lt;/b:if&gt;
    &lt;/div&gt;

   &lt;b:include name='mobile-nextprev'/&gt;
&lt;/b:includable&gt;
&lt;b:includable id='post' var='post'&gt;
  &lt;div class='post hentry'&gt;
    &lt;a expr:name='data:post.id'/&gt;
    &lt;b:if cond='data:post.title'&gt;
      &lt;h3 class='post-title entry-title'&gt;
     &lt;b:if cond='data:post.link'&gt;
       &lt;a expr:href='data:post.link'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
     &lt;b:else/&gt;
        &lt;b:if cond='data:post.url'&gt;
          &lt;a expr:href='data:post.url'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
        &lt;b:else/&gt;
          &lt;data:post.title/&gt;
        &lt;/b:if&gt;
     &lt;/b:if&gt;
      &lt;/h3&gt;
    &lt;/b:if&gt;

    &lt;div class='post-header'&gt;
    &lt;div class='post-header-line-1'/&gt;
    &lt;/div&gt;

    &lt;div class='post-body entry-content'&gt;
      &lt;data:post.body/&gt;
      &lt;div style='clear: both;'/&gt; &lt;!-- clear for photos floats --&gt;
    &lt;/div&gt;
  
    &lt;b:if cond='data:post.hasJumpLink'&gt;
      &lt;div class='jump-link'&gt;
        &lt;a expr:href='data:post.url + &amp;quot;#more&amp;quot;' expr:title='data:post.title'&gt;&lt;data:post.jumpText/&gt;&lt;/a&gt;  
      &lt;/div&gt;
    &lt;/b:if&gt;
    
    &lt;div class='post-footer'&gt;
    &lt;div class='post-footer-line post-footer-line-1'&gt;&lt;span class='post-author vcard'&gt;
        &lt;b:if cond='data:top.showAuthor'&gt;
          &lt;data:top.authorLabel/&gt;
          &lt;span class='fn'&gt;&lt;data:post.author/&gt;&lt;/span&gt;
        &lt;/b:if&gt;
      &lt;/span&gt; &lt;span class='post-timestamp'&gt;
        &lt;b:if cond='data:top.showTimestamp'&gt;
          &lt;data:top.timestampLabel/&gt;
        &lt;b:if cond='data:post.url'&gt;
          &lt;a class='timestamp-link' expr:href='data:post.url' rel='bookmark' title='permanent link'&gt;&lt;abbr class='published' expr:title='data:post.timestampISO8601'&gt;&lt;data:post.timestamp/&gt;&lt;/abbr&gt;&lt;/a&gt;
        &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/span&gt; &lt;span class='post-comment-link'&gt;
        &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;
          &lt;b:if cond='data:post.allowComments'&gt;
            &lt;a class='comment-link' expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;&lt;b:if cond='data:post.numComments == 1'&gt;1 &lt;data:top.commentLabel/&gt;&lt;b:else/&gt;&lt;data:post.numComments/&gt; &lt;data:top.commentLabelPlural/&gt;&lt;/b:if&gt;&lt;/a&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/span&gt; &lt;span class='post-icons'&gt;
        &lt;!-- email post links --&gt;
        &lt;b:if cond='data:post.emailPostUrl'&gt;
          &lt;span class='item-action'&gt;
          &lt;a expr:href='data:post.emailPostUrl' expr:title='data:top.emailPostMsg'&gt;
              &lt;img alt='' class='icon-action' height='13' src='http://www.blogger.com/img/icon18_email.gif' width='18'/&gt;
          &lt;/a&gt;
          &lt;/span&gt;
        &lt;/b:if&gt;

        &lt;!-- quickedit pencil --&gt;
        &lt;b:include data='post' name='postQuickEdit'/&gt;
      &lt;/span&gt; &lt;span class='post-backlinks post-comment-link'&gt;
         &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;
           &lt;b:if cond='data:post.showBacklinks'&gt;
             &lt;a class='comment-link' expr:href='data:post.url + &amp;quot;#links&amp;quot;'&gt;&lt;data:top.backlinkLabel/&gt;&lt;/a&gt;
           &lt;/b:if&gt;
         &lt;/b:if&gt;
       &lt;/span&gt; &lt;/div&gt;

      &lt;div class='post-footer-line post-footer-line-2'&gt;&lt;span class='post-labels'&gt;
        &lt;b:if cond='data:post.labels'&gt;
          &lt;data:postLabelsLabel/&gt;
          &lt;b:loop values='data:post.labels' var='label'&gt;
            &lt;a expr:href='data:label.url' rel='tag'&gt;&lt;data:label.name/&gt;&lt;/a&gt;&lt;b:if cond='data:label.isLast != &amp;quot;true&amp;quot;'&gt;,&lt;/b:if&gt;
          &lt;/b:loop&gt;
        &lt;/b:if&gt;
      &lt;/span&gt; &lt;/div&gt;

      &lt;div class='post-footer-line post-footer-line-3'&gt;&lt;span class='post-location'&gt;
        &lt;b:if cond='data:top.showLocation'&gt;
          &lt;b:if cond='data:post.location'&gt;
            &lt;data:postLocationLabel/&gt;
            &lt;a expr:href='data:post.location.mapsUrl' target='_blank'&gt;&lt;data:post.location.name/&gt;&lt;/a&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/span&gt; &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
&lt;b:includable id='status-message'&gt;
  &lt;b:if cond='data:navMessage'&gt;
  &lt;div class='status-msg-wrap'&gt;
    &lt;div class='status-msg-body'&gt;
      &lt;data:navMessage/&gt;
    &lt;/div&gt;
    &lt;div class='status-msg-border'&gt;
      &lt;div class='status-msg-bg'&gt;
        &lt;div class='status-msg-hidden'&gt;&lt;data:navMessage/&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div style='clear: both;'/&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
&lt;b:includable id='comment-form' var='post'&gt;
  &lt;div class='comment-form'&gt;
    &lt;a name='comment-form'/&gt;
    &lt;b:if cond='data:mobile'&gt;
      &lt;h4 id='comment-post-message'&gt;
        &lt;a expr:id='data:widget.instanceId + &amp;quot;_comment-editor-toggle-link&amp;quot;' href='javascript:void(0)'&gt;&lt;data:postCommentMsg/&gt;&lt;/a&gt;&lt;/h4&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' style='display: none' width='100%'/&gt;
    &lt;b:else/&gt;
      &lt;h4 id='comment-post-message'&gt;&lt;data:postCommentMsg/&gt;&lt;/h4&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' width='100%'/&gt;
    &lt;/b:if&gt;
    &lt;data:post.friendConnectJs/&gt;
    &lt;data:post.cmtfpIframe/&gt;
    &lt;script type='text/javascript'&gt;
      BLOG_CMT_createIframe(&amp;#39;&lt;data:post.appRpcRelayPath/&gt;&amp;#39;, &amp;#39;&lt;data:post.communityId/&gt;&amp;#39;);
    &lt;/script&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
&lt;b:includable id='threaded_comments' var='post'&gt;
  &lt;div class='comments' id='comments'&gt;
    &lt;a name='comments'/&gt;
    &lt;h4&gt;
      &lt;b:if cond='data:post.numComments == 1'&gt;
        1 &lt;data:commentLabel/&gt;:
      &lt;b:else/&gt;
        &lt;data:post.numComments/&gt; &lt;data:commentLabelPlural/&gt;:
      &lt;/b:if&gt;
    &lt;/h4&gt;

    &lt;div class='comments-content'&gt;
      &lt;b:if cond='data:post.embedCommentForm'&gt;
        &lt;b:include data='post' name='threaded_comment_js'/&gt;
      &lt;/b:if&gt;
      &lt;div id='comment-holder'&gt;
         &lt;data:post.commentHtml/&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;p class='comment-footer'&gt;
      &lt;b:if cond='data:post.allowNewComments'&gt;
        &lt;b:include data='post' name='threaded-comment-form'/&gt;
      &lt;b:else/&gt;
        &lt;data:post.noNewCommentsText/&gt;
      &lt;/b:if&gt;
    &lt;/p&gt;

    &lt;b:if cond='data:showCmtPopup'&gt;
      &lt;div id='comment-popup'&gt;
        &lt;iframe allowtransparency='true' frameborder='0' id='comment-actions' name='comment-actions' scrolling='no'&gt;
        &lt;/iframe&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div id='backlinks-container'&gt;
    &lt;div expr:id='data:widget.instanceId + &amp;quot;_backlinks-container&amp;quot;'&gt;
       &lt;b:if cond='data:post.showBacklinks'&gt;
         &lt;b:include data='post' name='backlinks'/&gt;
       &lt;/b:if&gt;
    &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
&lt;b:includable id='backlinkDeleteIcon' var='backlink'&gt;
  &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:backlink.adminClass'&gt;
    &lt;a expr:href='data:backlink.deleteUrl' expr:title='data:top.deleteBacklinkMsg'&gt;
      &lt;img src='//www.blogger.com/img/icon_delete13.gif'/&gt;
    &lt;/a&gt;
  &lt;/span&gt;
&lt;/b:includable&gt;
&lt;b:includable id='mobile-nextprev'&gt;
  &lt;div class='blog-pager' id='blog-pager'&gt;
    &lt;b:if cond='data:newerPageUrl'&gt;
      &lt;div class='mobile-link-button' id='blog-pager-newer-link'&gt;
      &lt;a class='blog-pager-newer-link' expr:href='data:newerPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-newer-link&amp;quot;' expr:title='data:newerPageTitle'&gt;&amp;amp;lsaquo;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;b:if cond='data:olderPageUrl'&gt;
      &lt;div class='mobile-link-button' id='blog-pager-older-link'&gt;
      &lt;a class='blog-pager-older-link' expr:href='data:olderPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-older-link&amp;quot;' expr:title='data:olderPageTitle'&gt;&amp;amp;rsaquo;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div class='mobile-link-button' id='blog-pager-home-link'&gt;
    &lt;a class='home-link' expr:href='data:blog.homepageUrl'&gt;&lt;data:homeMsg/&gt;&lt;/a&gt;
    &lt;/div&gt;

    &lt;div class='mobile-desktop-link'&gt;
      &lt;a class='home-link' expr:href='data:desktopLinkUrl'&gt;&lt;data:desktopLinkMsg/&gt;&lt;/a&gt;
    &lt;/div&gt;

  &lt;/div&gt;
  &lt;div class='clear'/&gt;
&lt;/b:includable&gt;
&lt;b:includable id='mobile-post' var='post'&gt;
  &lt;div class='date-outer'&gt;
    &lt;b:if cond='data:post.dateHeader'&gt;
      &lt;h2 class='date-header'&gt;&lt;span&gt;&lt;data:post.dateHeader/&gt;&lt;/span&gt;&lt;/h2&gt;
    &lt;/b:if&gt;
    &lt;div class='date-posts'&gt;
      &lt;div class='post-outer'&gt;

        &lt;div class='post hentry uncustomized-post-template'&gt;
          &lt;a expr:name='data:post.id'/&gt;
          &lt;b:if cond='data:post.title'&gt;
            &lt;h3 class='post-title entry-title'&gt;
              &lt;b:if cond='data:post.link'&gt;
                &lt;a expr:href='data:post.link'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
              &lt;b:else/&gt;
                &lt;b:if cond='data:post.url'&gt;
                  &lt;b:if cond='data:blog.url != data:post.url'&gt;
                    &lt;a expr:href='data:post.url'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
                  &lt;b:else/&gt;
                    &lt;data:post.title/&gt;
                  &lt;/b:if&gt;
                &lt;b:else/&gt;
                  &lt;data:post.title/&gt;
                &lt;/b:if&gt;
              &lt;/b:if&gt;
            &lt;/h3&gt;
          &lt;/b:if&gt;

          &lt;div class='post-header'&gt;
            &lt;div class='post-header-line-1'/&gt;
          &lt;/div&gt;

          &lt;div class='post-body entry-content' expr:id='&amp;quot;post-body-&amp;quot; + data:post.id'&gt;
            &lt;data:post.body/&gt;
            &lt;div style='clear: both;'/&gt; &lt;!-- clear for photos floats --&gt;
          &lt;/div&gt;

          &lt;div class='post-footer'&gt;
            &lt;div class='post-footer-line post-footer-line-1'&gt;
              &lt;span class='post-author vcard'&gt;
                &lt;b:if cond='data:top.showAuthor'&gt;
                  &lt;b:if cond='data:post.authorProfileUrl'&gt;
                    &lt;span class='fn'&gt;
                      &lt;a expr:href='data:post.authorProfileUrl' rel='author' title='author profile'&gt;
                        &lt;data:post.author/&gt;
                      &lt;/a&gt;
                    &lt;/span&gt;
                  &lt;b:else/&gt;
                    &lt;span class='fn'&gt;&lt;data:post.author/&gt;&lt;/span&gt;
                  &lt;/b:if&gt;
                &lt;/b:if&gt;
              &lt;/span&gt;

              &lt;span class='post-timestamp'&gt;
                &lt;b:if cond='data:top.showTimestamp'&gt;
                  &lt;data:top.timestampLabel/&gt;
                  &lt;b:if cond='data:post.url'&gt;
                    &lt;a class='timestamp-link' expr:href='data:post.url' rel='bookmark' title='permanent link'&gt;&lt;abbr class='published' expr:title='data:post.timestampISO8601'&gt;&lt;data:post.timestamp/&gt;&lt;/abbr&gt;&lt;/a&gt;
                  &lt;/b:if&gt;
                &lt;/b:if&gt;
              &lt;/span&gt;

              &lt;span class='post-comment-link'&gt;
                &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;
                  &lt;b:if cond='data:blog.pageType != &amp;quot;static_page&amp;quot;'&gt;
                    &lt;b:if cond='data:post.allowComments'&gt;
                      &lt;a class='comment-link' expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;&lt;b:if cond='data:post.numComments == 1'&gt;1 &lt;data:top.commentLabel/&gt;&lt;b:else/&gt;&lt;data:post.numComments/&gt; &lt;data:top.commentLabelPlural/&gt;&lt;/b:if&gt;&lt;/a&gt;
                    &lt;/b:if&gt;
                  &lt;/b:if&gt;
                &lt;/b:if&gt;
              &lt;/span&gt;
            &lt;/div&gt;

            &lt;div class='post-footer-line post-footer-line-2'&gt;
              &lt;b:if cond='data:top.showMobileShare'&gt;
                &lt;div class='mobile-link-button goog-inline-block' id='mobile-share-button'&gt;
                  &lt;a href='javascript:void(0);'&gt;&lt;data:shareMsg/&gt;&lt;/a&gt;
                &lt;/div&gt;
              &lt;/b:if&gt;
              &lt;b:if cond='data:top.showDummy'&gt;
                &lt;div class='goog-inline-block dummy-container'&gt;&lt;data:post.dummyTag/&gt;&lt;/div&gt;
              &lt;/b:if&gt;
            &lt;/div&gt;

          &lt;/div&gt;
        &lt;/div&gt;

        &lt;b:if cond='data:blog.pageType == &amp;quot;static_page&amp;quot;'&gt;
          &lt;b:if cond='data:post.showThreadedComments'&gt;
            &lt;b:include data='post' name='threaded_comments'/&gt;
          &lt;b:else/&gt;
            &lt;b:include data='post' name='comments'/&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:blog.pageType == &amp;quot;item&amp;quot;'&gt;
          &lt;b:if cond='data:post.showThreadedComments'&gt;
            &lt;b:include data='post' name='threaded_comments'/&gt;
          &lt;b:else/&gt;
            &lt;b:include data='post' name='comments'/&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
&lt;b:includable id='postQuickEdit' var='post'&gt;
  &lt;b:if cond='data:post.editUrl'&gt;
    &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:post.adminClass'&gt;
      &lt;a expr:href='data:post.editUrl' expr:title='data:top.editPostMsg'&gt;
        &lt;img alt='' class='icon-action' height='18' src='http://img2.blogblog.com/img/icon18_edit_allbkg.gif' width='18'/&gt;
      &lt;/a&gt;
    &lt;/span&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
&lt;b:includable id='main' var='top'&gt;
  &lt;b:if cond='data:mobile == &amp;quot;false&amp;quot;'&gt;

    &lt;!-- posts --&gt;
    &lt;div class='blog-posts hfeed'&gt;

      &lt;b:include data='top' name='status-message'/&gt;

      &lt;data:defaultAdStart/&gt;
      &lt;b:loop values='data:posts' var='post'&gt;
        &lt;b:if cond='data:post.isDateStart'&gt;
          &lt;b:if cond='data:post.isFirstPost == &amp;quot;false&amp;quot;'&gt;
            &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:post.isDateStart'&gt;
          &amp;lt;div class=&amp;quot;date-outer&amp;quot;&amp;gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:post.dateHeader'&gt;
          &lt;h2 class='date-header'&gt;&lt;span&gt;&lt;data:post.dateHeader/&gt;&lt;/span&gt;&lt;/h2&gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:post.isDateStart'&gt;
          &amp;lt;div class=&amp;quot;date-posts&amp;quot;&amp;gt;
        &lt;/b:if&gt;
        &lt;div class='post-outer'&gt;
        &lt;b:include data='post' name='post'/&gt;
        &lt;b:if cond='data:blog.pageType == &amp;quot;static_page&amp;quot;'&gt;
          &lt;b:if cond='data:post.showThreadedComments'&gt;
            &lt;b:include data='post' name='threaded_comments'/&gt;
          &lt;b:else/&gt;
            &lt;b:include data='post' name='comments'/&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:blog.pageType == &amp;quot;item&amp;quot;'&gt;
          &lt;b:if cond='data:post.showThreadedComments'&gt;
            &lt;b:include data='post' name='threaded_comments'/&gt;
          &lt;b:else/&gt;
            &lt;b:include data='post' name='comments'/&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
        &lt;/div&gt;
        &lt;b:if cond='data:post.includeAd'&gt;
          &lt;b:if cond='data:post.isFirstPost'&gt;
            &lt;data:defaultAdEnd/&gt;
          &lt;b:else/&gt;
            &lt;data:adEnd/&gt;
          &lt;/b:if&gt;
          &lt;div class='inline-ad'&gt;
            &lt;data:adCode/&gt;
          &lt;/div&gt;
          &lt;data:adStart/&gt;
        &lt;/b:if&gt;
      &lt;/b:loop&gt;
      &lt;b:if cond='data:numPosts != 0'&gt;
        &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
      &lt;/b:if&gt;
      &lt;data:adEnd/&gt;
    &lt;/div&gt;

    &lt;!-- navigation --&gt;
    &lt;b:include name='nextprev'/&gt;

    &lt;!-- feed links --&gt;
    &lt;b:include name='feedLinks'/&gt;

    &lt;b:if cond='data:top.showStars'&gt;
      &lt;script src='//www.google.com/jsapi' type='text/javascript'/&gt;
      &lt;script type='text/javascript'&gt;
        google.load(&amp;quot;annotations&amp;quot;, &amp;quot;1&amp;quot;, {&amp;quot;locale&amp;quot;: &amp;quot;&lt;data:top.languageCode/&gt;&amp;quot;});
        function initialize() {
          google.annotations.setApplicationId(&lt;data:top.blogspotReviews/&gt;);
          google.annotations.createAll();
          google.annotations.fetch();
        }
        google.setOnLoadCallback(initialize);
      &lt;/script&gt;
    &lt;/b:if&gt;

  &lt;b:else/&gt;
    &lt;b:include name='mobile-main'/&gt;
  &lt;/b:if&gt;

  &lt;b:if cond='data:top.showDummy'&gt;
    &lt;data:top.dummyBootstrap/&gt;
  &lt;/b:if&gt;

&lt;/b:includable&gt;
&lt;b:includable id='commentDeleteIcon' var='comment'&gt;
  &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:comment.adminClass'&gt;
    &lt;b:if cond='data:showCmtPopup'&gt;
      &lt;div class='goog-toggle-button'&gt;
        &lt;div class='goog-inline-block comment-action-icon'/&gt;
      &lt;/div&gt;
    &lt;b:else/&gt;
      &lt;a class='comment-delete' expr:href='data:comment.deleteUrl' expr:title='data:top.deleteCommentMsg'&gt;
        &lt;img src='//www.blogger.com/img/icon_delete13.gif'/&gt;
      &lt;/a&gt;
    &lt;/b:if&gt;
  &lt;/span&gt;
&lt;/b:includable&gt;
&lt;b:includable id='feedLinks'&gt;
  &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt; &lt;!-- Blog feed links --&gt;
    &lt;b:if cond='data:feedLinks'&gt;
      &lt;div class='blog-feeds'&gt;
        &lt;b:include data='feedLinks' name='feedLinksBody'/&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;b:else/&gt; &lt;!--Post feed links --&gt;
    &lt;div class='post-feeds'&gt;
      &lt;b:loop values='data:posts' var='post'&gt;
        &lt;b:if cond='data:post.allowComments'&gt;
          &lt;b:if cond='data:post.feedLinks'&gt;
            &lt;b:include data='post.feedLinks' name='feedLinksBody'/&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/b:loop&gt;
    &lt;/div&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
&lt;b:includable id='threaded-comment-form' var='post'&gt;
  &lt;div class='comment-form'&gt;
    &lt;a name='comment-form'/&gt;
    &lt;b:if cond='data:mobile'&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' style='display: none' width='100%'/&gt;
    &lt;b:else/&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' width='100%'/&gt;
    &lt;/b:if&gt;
    &lt;data:post.friendConnectJs/&gt;
    &lt;data:post.cmtfpIframe/&gt;
    &lt;script type='text/javascript'&gt;
      BLOG_CMT_createIframe(&amp;#39;&lt;data:post.appRpcRelayPath/&gt;&amp;#39;, &amp;#39;&lt;data:post.communityId/&gt;&amp;#39;);
    &lt;/script&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
&lt;b:includable id='mobile-index-post' var='post'&gt;
  &lt;div class='mobile-date-outer date-outer'&gt;
    &lt;b:if cond='data:post.dateHeader'&gt;
      &lt;div class='date-header'&gt;
        &lt;span&gt;&lt;data:post.dateHeader/&gt;&lt;/span&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div class='mobile-post-outer'&gt;
      &lt;a expr:href='data:post.url'&gt;
        &lt;h3 class='mobile-index-title entry-title'&gt;
          &lt;data:post.title/&gt;
        &lt;/h3&gt;

        &lt;div class='mobile-index-arrow'&gt;&amp;amp;rsaquo;&lt;/div&gt;

        &lt;div class='mobile-index-contents'&gt;
          &lt;b:if cond='data:post.thumbnailUrl'&gt;
            &lt;div class='mobile-index-thumbnail'&gt;
              &lt;div class='Image'&gt;
                &lt;img expr:src='data:post.thumbnailUrl'/&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/b:if&gt;

          &lt;div class='post-body'&gt;
            &lt;b:if cond='data:post.snippet'&gt;&lt;data:post.snippet/&gt;&lt;/b:if&gt;
          &lt;/div&gt;
        &lt;/div&gt;

        &lt;div style='clear: both;'/&gt;
      &lt;/a&gt;

      &lt;div class='mobile-index-comment'&gt;
        &lt;b:if cond='data:blog.pageType != &amp;quot;static_page&amp;quot;'&gt;
          &lt;b:if cond='data:post.allowComments'&gt;
            &lt;b:if cond='data:post.numComments != 0'&gt;
              &lt;a class='comment-link' expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;&lt;b:if cond='data:post.numComments == 1'&gt;1 &lt;data:top.commentLabel/&gt;&lt;b:else/&gt;&lt;data:post.numComments/&gt; &lt;data:top.commentLabelPlural/&gt;&lt;/b:if&gt;&lt;/a&gt;
            &lt;/b:if&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
&lt;b:includable id='feedLinksBody' var='links'&gt;
  &lt;div class='feed-links'&gt;
  &lt;data:feedLinksMsg/&gt;
  &lt;b:loop values='data:links' var='f'&gt;
     &lt;a class='feed-link' expr:href='data:f.url' expr:type='data:f.mimeType' target='_blank'&gt;&lt;data:f.name/&gt; (&lt;data:f.feedType/&gt;)&lt;/a&gt;
  &lt;/b:loop&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
&lt;b:includable id='comments' var='post'&gt;
  &lt;div class='comments' id='comments'&gt;
    &lt;a name='comments'/&gt;
    &lt;b:if cond='data:post.allowComments'&gt;
      &lt;h4&gt;
        &lt;b:if cond='data:post.numComments == 1'&gt;
          1 &lt;data:commentLabel/&gt;:
        &lt;b:else/&gt;
          &lt;data:post.numComments/&gt; &lt;data:commentLabelPlural/&gt;:
        &lt;/b:if&gt;
      &lt;/h4&gt;

      &lt;b:if cond='data:post.commentPagingRequired'&gt;
        &lt;span class='paging-control-container'&gt;
          &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.oldestLinkUrl'&gt;&lt;data:post.oldestLinkText/&gt;&lt;/a&gt;
          &amp;#160;
          &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.olderLinkUrl'&gt;&lt;data:post.olderLinkText/&gt;&lt;/a&gt;
          &amp;#160;
          &lt;data:post.commentRangeText/&gt;
          &amp;#160;
          &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newerLinkUrl'&gt;&lt;data:post.newerLinkText/&gt;&lt;/a&gt;
          &amp;#160;
          &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newestLinkUrl'&gt;&lt;data:post.newestLinkText/&gt;&lt;/a&gt;
        &lt;/span&gt;
      &lt;/b:if&gt;

      &lt;div expr:id='data:widget.instanceId + &amp;quot;_comments-block-wrapper&amp;quot;'&gt;
        &lt;dl expr:class='data:post.avatarIndentClass' id='comments-block'&gt;
          &lt;b:loop values='data:post.comments' var='comment'&gt;
            &lt;dt expr:class='&amp;quot;comment-author &amp;quot; + data:comment.authorClass' expr:id='data:comment.anchorName'&gt;
              &lt;b:if cond='data:comment.favicon'&gt;
                &lt;img expr:src='data:comment.favicon' height='16px' style='margin-bottom:-2px;' width='16px'/&gt;
              &lt;/b:if&gt;
              &lt;a expr:name='data:comment.anchorName'/&gt;
              &lt;b:if cond='data:blog.enabledCommentProfileImages'&gt;
                &lt;data:comment.authorAvatarImage/&gt;
              &lt;/b:if&gt;
              &lt;b:if cond='data:comment.authorUrl'&gt;
                &lt;a expr:href='data:comment.authorUrl' rel='nofollow'&gt;&lt;data:comment.author/&gt;&lt;/a&gt;
              &lt;b:else/&gt;
                &lt;data:comment.author/&gt;
              &lt;/b:if&gt;
              &lt;data:commentPostedByMsg/&gt;
            &lt;/dt&gt;
            &lt;dd class='comment-body' expr:id='data:widget.instanceId + data:comment.cmtBodyIdPostfix'&gt;
              &lt;b:if cond='data:comment.isDeleted'&gt;
                &lt;span class='deleted-comment'&gt;&lt;data:comment.body/&gt;&lt;/span&gt;
              &lt;b:else/&gt;
                &lt;p&gt;
                  &lt;data:comment.body/&gt;
                &lt;/p&gt;
              &lt;/b:if&gt;
            &lt;/dd&gt;
            &lt;dd class='comment-footer'&gt;
              &lt;span class='comment-timestamp'&gt;
                &lt;a expr:href='data:comment.url' title='comment permalink'&gt;
                  &lt;data:comment.timestamp/&gt;
                &lt;/a&gt;
                &lt;b:include data='comment' name='commentDeleteIcon'/&gt;
              &lt;/span&gt;
            &lt;/dd&gt;
          &lt;/b:loop&gt;
        &lt;/dl&gt;
      &lt;/div&gt;

      &lt;b:if cond='data:post.commentPagingRequired'&gt;
        &lt;span class='paging-control-container'&gt;
          &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.oldestLinkUrl'&gt;
            &lt;data:post.oldestLinkText/&gt;
          &lt;/a&gt;
          &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.olderLinkUrl'&gt;
            &lt;data:post.olderLinkText/&gt;
          &lt;/a&gt;
          &amp;#160;
          &lt;data:post.commentRangeText/&gt;
          &amp;#160;
          &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newerLinkUrl'&gt;
            &lt;data:post.newerLinkText/&gt;
          &lt;/a&gt;
          &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newestLinkUrl'&gt;
            &lt;data:post.newestLinkText/&gt;
          &lt;/a&gt;
        &lt;/span&gt;
      &lt;/b:if&gt;

      &lt;p class='comment-footer'&gt;
        &lt;b:if cond='data:post.embedCommentForm'&gt;
          &lt;b:if cond='data:post.allowNewComments'&gt;
            &lt;b:include data='post' name='comment-form'/&gt;
          &lt;b:else/&gt;
            &lt;data:post.noNewCommentsText/&gt;
          &lt;/b:if&gt;
        &lt;b:else/&gt;
          &lt;b:if cond='data:post.allowComments'&gt;
            &lt;a expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;&lt;data:postCommentMsg/&gt;&lt;/a&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;

      &lt;/p&gt;
    &lt;/b:if&gt;
    &lt;b:if cond='data:showCmtPopup'&gt;
      &lt;div id='comment-popup'&gt;
        &lt;iframe allowtransparency='true' frameborder='0' id='comment-actions' name='comment-actions' scrolling='no'&gt;
        &lt;/iframe&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div id='backlinks-container'&gt;
    &lt;div expr:id='data:widget.instanceId + &amp;quot;_backlinks-container&amp;quot;'&gt;
       &lt;b:if cond='data:post.showBacklinks'&gt;
         &lt;b:include data='post' name='backlinks'/&gt;
       &lt;/b:if&gt;
    &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
&lt;/b:widget&gt;
&lt;/b:section&gt;
      &lt;/div&gt;

      &lt;div id='sidebar-wrapper'&gt;
        &lt;b:section class='sidebar' id='sidebar' preferred='yes'&gt;
&lt;b:widget id='Gadget1' locked='false' title='Twitter Updates' type='Gadget'&gt;
&lt;b:includable id='main'&gt;  
  &lt;!-- only display title if it's non-empty --&gt;
  &lt;b:if cond='data:renderingUrl != &amp;quot;&amp;quot;'&gt;
    &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
      &lt;h2 class='title'&gt;&lt;data:title/&gt;&lt;/h2&gt;
    &lt;/b:if&gt;
    &lt;b:if cond='data:gadgetSnippet != &amp;quot;&amp;quot;'&gt;
       &lt;data:gadgetSnippet/&gt;
    &lt;b:else/&gt;
      &lt;div class='widget-content'&gt;
        &lt;b:if cond='data:nonSocialFragment != &amp;quot;&amp;quot;'&gt;
          &lt;data:nonSocialFragment/&gt;
        &lt;/b:if&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;
  &lt;b:else/&gt;
    &lt;data:errorMessage/&gt;
  &lt;/b:if&gt;

  &lt;b:include name='quickedit'/&gt;
&lt;/b:includable&gt;
&lt;/b:widget&gt;
&lt;b:widget id='BlogArchive1' locked='false' title='Blog Archive' type='BlogArchive'&gt;
&lt;b:includable id='main'&gt;
  &lt;b:if cond='data:title'&gt;
    &lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;
  &lt;/b:if&gt;
  &lt;div class='widget-content'&gt;
  &lt;div id='ArchiveList'&gt;
  &lt;div expr:id='data:widget.instanceId + &amp;quot;_ArchiveList&amp;quot;'&gt;
    &lt;b:if cond='data:style == &amp;quot;HIERARCHY&amp;quot;'&gt;
     &lt;b:include data='data' name='interval'/&gt;
    &lt;/b:if&gt;
    &lt;b:if cond='data:style == &amp;quot;FLAT&amp;quot;'&gt;
      &lt;b:include data='data' name='flat'/&gt;
    &lt;/b:if&gt;
    &lt;b:if cond='data:style == &amp;quot;MENU&amp;quot;'&gt;
      &lt;b:include data='data' name='menu'/&gt;
    &lt;/b:if&gt;
  &lt;/div&gt;
  &lt;/div&gt;
  &lt;b:include name='quickedit'/&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
&lt;b:includable id='flat' var='data'&gt;
  &lt;ul class='flat'&gt;
    &lt;b:loop values='data:data' var='i'&gt;
      &lt;li class='archivedate'&gt;
        &lt;a expr:href='data:i.url'&gt;&lt;data:i.name/&gt;&lt;/a&gt; (&lt;data:i.post-count/&gt;)
      &lt;/li&gt;
    &lt;/b:loop&gt;
  &lt;/ul&gt;
&lt;/b:includable&gt;
&lt;b:includable id='menu' var='data'&gt;
  &lt;select expr:id='data:widget.instanceId + &amp;quot;_ArchiveMenu&amp;quot;'&gt;
    &lt;option value=''&gt;&lt;data:title/&gt;&lt;/option&gt;
    &lt;b:loop values='data:data' var='i'&gt;
      &lt;option expr:value='data:i.url'&gt;&lt;data:i.name/&gt; (&lt;data:i.post-count/&gt;)&lt;/option&gt;
    &lt;/b:loop&gt;
  &lt;/select&gt;
&lt;/b:includable&gt;
&lt;b:includable id='interval' var='intervalData'&gt;
  &lt;b:loop values='data:intervalData' var='i'&gt;
      &lt;ul class='hierarchy'&gt;
        &lt;li expr:class='&amp;quot;archivedate &amp;quot; + data:i.expclass'&gt;
          &lt;b:include data='i' name='toggle'/&gt;
          &lt;a class='post-count-link' expr:href='data:i.url'&gt;&lt;data:i.name/&gt;&lt;/a&gt;
            &lt;span class='post-count' dir='ltr'&gt;(&lt;data:i.post-count/&gt;)&lt;/span&gt;
          &lt;b:if cond='data:i.data'&gt;
            &lt;b:include data='i.data' name='interval'/&gt;
          &lt;/b:if&gt;
          &lt;b:if cond='data:i.posts'&gt;
            &lt;b:include data='i.posts' name='posts'/&gt;
          &lt;/b:if&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
  &lt;/b:loop&gt;
&lt;/b:includable&gt;
&lt;b:includable id='toggle' var='interval'&gt;
  &lt;b:if cond='data:interval.toggleId'&gt;
  &lt;b:if cond='data:interval.expclass == &amp;quot;expanded&amp;quot;'&gt;
    &lt;a class='toggle' href='javascript:void(0)'&gt;
      &lt;span class='zippy toggle-open'&gt;&amp;#9660;&amp;#160;&lt;/span&gt;
    &lt;/a&gt;
  &lt;b:else/&gt;
    &lt;a class='toggle' href='javascript:void(0)'&gt;
      &lt;span class='zippy'&gt;
        &lt;b:if cond='data:blog.languageDirection == &amp;quot;rtl&amp;quot;'&gt;
          &amp;#9668;&amp;#160;
        &lt;b:else/&gt;
          &amp;#9658;&amp;#160;
        &lt;/b:if&gt;
      &lt;/span&gt;
    &lt;/a&gt;
  &lt;/b:if&gt;
 &lt;/b:if&gt;
&lt;/b:includable&gt;
&lt;b:includable id='posts' var='posts'&gt;
  &lt;ul class='posts'&gt;
    &lt;b:loop values='data:posts' var='i'&gt;
      &lt;li&gt;&lt;a expr:href='data:i.url'&gt;&lt;data:i.title/&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/b:loop&gt;
  &lt;/ul&gt;
&lt;/b:includable&gt;
&lt;/b:widget&gt;
&lt;/b:section&gt;
      &lt;/div&gt;

      &lt;!-- spacer for skins that want sidebar and main to be the same height--&gt;
      &lt;div class='clear'&gt;&amp;#160;&lt;/div&gt;

    &lt;/div&gt; &lt;!-- end content-wrapper --&gt;

    &lt;div id='footer-wrapper'&gt;
      &lt;b:section class='footer' id='footer'/&gt;
    &lt;/div&gt;

  &lt;/div&gt;&lt;/div&gt; &lt;!-- end outer-wrapper --&gt;

&lt;style type='text/css'&gt;
pre.codeblock { border: 1px dashed rgb(153, 153, 153); padding: 5px; overflow: auto; font-family: Andale Mono,Lucida Console,Monaco,fixed,monospace; color: rgb(0, 0, 0); background-color: rgb(238, 238, 238); font-size: 12px; line-height: 14px; width: 100%; }
&lt;/style&gt;
&lt;link href='http://alexgorbatchev.com/pub/sh/2.0.320/styles/shCore.css' rel='stylesheet' type='text/css'/&gt;
&lt;link href='http://alexgorbatchev.com/pub/sh/2.0.320/styles/shThemeDefault.css' rel='stylesheet' type='text/css'/&gt;
&lt;script src='http://alexgorbatchev.com/pub/sh/2.0.320/scripts/shCore.js' type='text/javascript'/&gt;
&lt;script src='http://alexgorbatchev.com/pub/sh/2.0.320/scripts/shBrushAS3.js' type='text/javascript'/&gt;
&lt;script src='http://alexgorbatchev.com/pub/sh/2.0.320/scripts/shBrushJScript.js' type='text/javascript'/&gt;
&lt;script src='http://alexgorbatchev.com/pub/sh/2.0.320/scripts/shBrushCpp.js' type='text/javascript'/&gt;

&lt;script src='http://alexgorbatchev.com/pub/sh/2.0.320/scripts/shBrushRuby.js' type='text/javascript'/&gt;
&lt;script src='http://alexgorbatchev.com/pub/sh/2.0.320/scripts/shBrushXml.js' type='text/javascript'/&gt;
&lt;script src='http://alexgorbatchev.com/pub/sh/2.0.320/scripts/shBrushJava.js' type='text/javascript'/&gt;
&lt;script type='text/javascript'&gt;
SyntaxHighlighter.defaults[&amp;#39;wrap-lines&amp;#39;]=false;
SyntaxHighlighter.all();
&lt;/script&gt;

&lt;script type='text/javascript'&gt;
var gaJsHost = ((&amp;quot;https:&amp;quot; == document.location.protocol) ? &amp;quot;https://ssl.&amp;quot; : &amp;quot;http://www.&amp;quot;);
document.write(unescape(&amp;quot;%3Cscript src=&amp;#39;&amp;quot; + gaJsHost + &amp;quot;google-analytics.com/ga.js&amp;#39; type=&amp;#39;text/javascript&amp;#39;%3E%3C/script%3E&amp;quot;));
&lt;/script&gt;
&lt;script type='text/javascript'&gt;
try {
var pageTracker = _gat._getTracker(&amp;quot;UA-8198442-1&amp;quot;);
pageTracker._trackPageview();
} catch(err) {}&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/template/default'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/template/default'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_PUBLISHING_MODE</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of publishing done for this blog.</title><content type='text'>PUBLISH_MODE_HOSTED</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_PUBLISHING_MODE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_PUBLISHING_MODE'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_ADMIN_PERMISSION</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The list of administrators' emails for the blog.</title><content type='text'>ohthepete@gmail.com</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_ADMIN_PERMISSION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_ADMIN_PERMISSION'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_ADULT_CONTENT</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog contains adult content</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_ADULT_CONTENT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_ADULT_CONTENT'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_ALTERNATE_JSRENDER_ALLOWED</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether alternate JS renderings are allowed</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_ALTERNATE_JSRENDER_ALLOWED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_ALTERNATE_JSRENDER_ALLOWED'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_ANALYTICS_ACCOUNT_NUMBER</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Blog's Google Analytics account number</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_ANALYTICS_ACCOUNT_NUMBER'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_ANALYTICS_ACCOUNT_NUMBER'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_ARCHIVE_DATE_FORMAT</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The number of the archive index date format</title><content type='text'>9</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_ARCHIVE_DATE_FORMAT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_ARCHIVE_DATE_FORMAT'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_ARCHIVE_FREQUENCY</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>How frequently this blog should be archived</title><content type='text'>MONTHLY</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_ARCHIVE_FREQUENCY'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_ARCHIVE_FREQUENCY'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_AUTHOR_PERMISSION</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The list of authors' emails who have permission to publish.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_AUTHOR_PERMISSION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_AUTHOR_PERMISSION'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_BACKLINKS_ALLOWED</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show comment backlinks on the blog</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_BACKLINKS_ALLOWED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_BACKLINKS_ALLOWED'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_BY_POST_ARCHIVING</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to provide an archive page for each post</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_BY_POST_ARCHIVING'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_BY_POST_ARCHIVING'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_COMMENT_ACCESS</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Who can comment</title><content type='text'>ANYONE</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENT_ACCESS'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENT_ACCESS'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_COMMENT_CAPTCHA</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to require commenters to complete a Captcha</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENT_CAPTCHA'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENT_CAPTCHA'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_COMMENT_EMAIL</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>List of e-mail addresses to send notifications of new comments to</title><content type='text'>public@thepete.net</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENT_EMAIL'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENT_EMAIL'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_COMMENT_FEED</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of feed to provide for blog comments</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENT_FEED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENT_FEED'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_COMMENT_FORM_LOCATION</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Blog comment form location</title><content type='text'>FULL_PAGE</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENT_FORM_LOCATION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENT_FORM_LOCATION'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_COMMENT_MESSAGE</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Blog comment message</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENT_MESSAGE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENT_MESSAGE'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_COMMENT_MODERATION</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to enable comment moderation</title><content type='text'>DISABLED</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENT_MODERATION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENT_MODERATION'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_COMMENT_MODERATION_DELAY</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Number of days after which new comments are subject to moderation</title><content type='text'>14</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENT_MODERATION_DELAY'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENT_MODERATION_DELAY'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_COMMENT_MODERATION_EMAIL</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Email address to send notifications of new comments needing moderation to</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENT_MODERATION_EMAIL'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENT_MODERATION_EMAIL'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_COMMENT_PROFILE_IMAGES</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show profile images in comments</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENT_PROFILE_IMAGES'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENT_PROFILE_IMAGES'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_COMMENTS_ALLOWED</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show comments</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENTS_ALLOWED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENTS_ALLOWED'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_COMMENTS_TIME_STAMP_FORMAT</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Comment time stamp format number</title><content type='text'>29</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENTS_TIME_STAMP_FORMAT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_COMMENTS_TIME_STAMP_FORMAT'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_CONVERT_LINE_BREAKS</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to convert line breaks into &lt;br /&gt; tags in post editor</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_CONVERT_LINE_BREAKS'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_CONVERT_LINE_BREAKS'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_CUSTOM_PAGE_NOT_FOUND</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The content served when the requested post or page is not found.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_CUSTOM_PAGE_NOT_FOUND'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_CUSTOM_PAGE_NOT_FOUND'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_CUSTOM_ROBOTS_TXT</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The custom robots.txt content of the blog served to search engines.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_CUSTOM_ROBOTS_TXT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_CUSTOM_ROBOTS_TXT'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_CUSTOM_ROBOTS_TXT_ENABLED</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog serves custom robots.txt content to search engines.</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_CUSTOM_ROBOTS_TXT_ENABLED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_CUSTOM_ROBOTS_TXT_ENABLED'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_DATE_FORMAT</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The number of the date header format</title><content type='text'>26</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_DATE_FORMAT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_DATE_FORMAT'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_DEFAULT_BACKLINKS_MODE</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Default backlinks mode for posts</title><content type='text'>DEFAULT_HAVE_BACKLINKS</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_DEFAULT_BACKLINKS_MODE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_DEFAULT_BACKLINKS_MODE'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_DEFAULT_COMMENTS_MODE</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Default comment mode for posts</title><content type='text'>DEFAULT_HAVE_COMMENTS</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_DEFAULT_COMMENTS_MODE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_DEFAULT_COMMENTS_MODE'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_DESCRIPTION</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>A description of the blog</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_DESCRIPTION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_DESCRIPTION'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_EMAIL_POST_LINKS</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show a link for users to e-mail posts</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_EMAIL_POST_LINKS'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_EMAIL_POST_LINKS'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_FEED_REDIRECT_URL</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>URL to redirect post feed requests to</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_FEED_REDIRECT_URL'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_FEED_REDIRECT_URL'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_FLOAT_ALIGNMENT</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether float alignment is enabled for the blog</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_FLOAT_ALIGNMENT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_FLOAT_ALIGNMENT'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_LOCALE</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Language for this blog</title><content type='text'>en_US</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_LOCALE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_LOCALE'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_MAX_NUM</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Maximum number of things to show on the main page"</title><content type='text'>7</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_MAX_NUM'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_MAX_NUM'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_MAX_UNIT</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Unit of things to show on the main page</title><content type='text'>POSTS</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_MAX_UNIT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_MAX_UNIT'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_META_DESCRIPTION</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The meta description of the blog served to search engines.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_META_DESCRIPTION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_META_DESCRIPTION'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_META_DESCRIPTION_ENABLED</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog is served with meta descriptions.</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_META_DESCRIPTION_ENABLED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_META_DESCRIPTION_ENABLED'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_NAME</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The name of the blog</title><content type='text'>being agile</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_NAME'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_NAME'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_PER_POST_FEED</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of feed to provide for per-post comments</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_PER_POST_FEED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_PER_POST_FEED'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_POST_FEED</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of feed to provide for blog posts</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_POST_FEED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_POST_FEED'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_POST_FEED_FOOTER</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Footer to append to the end of each entry in the post feed</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_POST_FEED_FOOTER'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_POST_FEED_FOOTER'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_POST_TEMPLATE</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The template for blog posts</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_POST_TEMPLATE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_POST_TEMPLATE'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_PROMOTED</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog can be promoted on Blogger</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_PROMOTED'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_PROMOTED'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_QUICK_EDITING</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether Quick Editing is enabled</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_QUICK_EDITING'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_QUICK_EDITING'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_READ_ACCESS_MODE</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The access type for the readers of the blog.</title><content type='text'>PUBLIC</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_READ_ACCESS_MODE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_READ_ACCESS_MODE'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_READER_PERMISSION</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The list of emails for users who have permission to read the blog.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_READER_PERMISSION'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_READER_PERMISSION'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_SEARCHABLE</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog should be indexed by search engines</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_SEARCHABLE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_SEARCHABLE'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_SEND_EMAIL</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Comma separated list of emails to send new blog posts to</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_SEND_EMAIL'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_SEND_EMAIL'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_SHOW_TITLE</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show the title field</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_SHOW_TITLE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_SHOW_TITLE'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_SHOW_URL</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show a related link box in the post composer</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_SHOW_URL'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_SHOW_URL'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_TIME_STAMP_FORMAT</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The number of the time stamp format</title><content type='text'>27</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_TIME_STAMP_FORMAT'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_TIME_STAMP_FORMAT'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_TIME_ZONE</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The time zone for this blog</title><content type='text'>America/Los_Angeles</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_TIME_ZONE'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_TIME_ZONE'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.settings.BLOG_USE_LIGHTBOX</id><published>2007-12-17T18:48:56.424-08:00</published><updated>2012-02-08T08:59:23.001-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show images in the Lightbox when clicked</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_USE_LIGHTBOX'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/settings/BLOG_USE_LIGHTBOX'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-1512294968367944089</id><published>2012-02-06T23:26:00.000-08:00</published><updated>2012-02-06T23:26:40.065-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Class-less javascript</title><content type='html'>&lt;br /&gt;
&lt;h1 id="intro"&gt;Intro&lt;/h1&gt;&lt;p&gt;It seems that &lt;a href="http://mootools.net/docs/core/Class/Class"&gt;every&lt;/a&gt; &lt;a href="http://www.prototypejs.org/learn/class-inheritance"&gt;javascript&lt;/a&gt; &lt;a href="http://www.sencha.com/blog/countdown-to-ext-js-4-dynamic-loading-and-new-class-system"&gt;framework&lt;/a&gt; &lt;a href="http://emberjs.com/#object_model"&gt;of&lt;/a&gt; &lt;a href="http://sproutcore.com/docs/#doc=SC.Object&amp;amp;method=.extend"&gt;a&lt;/a&gt; &lt;a href="http://developer.yahoo.com/yui/examples/yahoo/yahoo_extend.html"&gt;certain&lt;/a&gt; &lt;a href="http://dojotoolkit.org/documentation/tutorials/1.6/declare/"&gt;size&lt;/a&gt; is compelled to implement some kind of pseudo-classical type system. I am now fairly convinced that there is no good reason for doing so. I&amp;rsquo;d like to describe an alternative approach to dealing with types in javascript. &lt;/p&gt;&lt;br /&gt;
&lt;p&gt;This approach comes from a recent project where my team were building a pure-javascript single-page web application. This wasn&amp;rsquo;t a huge codebase, but due to the single-page nature of the app it did have a reasonable amount of non-presentation logic which was implemented client-side in javascript. We needed a type system but we knew we didn&amp;rsquo;t want to try and force a classical-OO system onto javascript. The patterns we evolved gave us just enough structure while still allowing us to take advantage of the highly flexible and dynamic nature of javascript. &lt;/p&gt;&lt;br /&gt;
&lt;p&gt;In this post I&amp;rsquo;ll be summarizing the major parts of the lightweight, class-less type system we created. Before that I&amp;rsquo;ll start with a brief tour of javascript, covering language concepts which are relevant to our approach. If there is sufficient interest in this topic I may write this up in more detail here over a series of posts.&lt;/p&gt;&lt;br /&gt;
&lt;h1 id="a-quick-tour-of-javascript"&gt;A quick tour of Javascript&lt;/h1&gt;&lt;br /&gt;
&lt;h2 id="prototypical-not-classical"&gt;Prototypical, not Classical&lt;/h2&gt;&lt;p&gt;Javascript is not a classical Object-Oriented language. Over the years many have tried to force it into that mold, but it just doesn&amp;rsquo;t fit. In javascript typing is achieved through the use of &lt;em&gt;prototypes&lt;/em&gt;, not classes. &lt;/p&gt;&lt;br /&gt;
&lt;p&gt;In languages like Ruby or Java you have Classes and Objects. An Object is always the instance of a specific Class. You generally define an object&amp;rsquo;s behaviour by specifying that behaviour in the object&amp;rsquo;s class (for the sake of clarity I&amp;rsquo;m glossing over things like ruby&amp;rsquo;s eigenclass). On the other hand in javascript an object&amp;rsquo;s type is not determined by its &lt;em&gt;class&lt;/em&gt;, but is instead based on the object&amp;rsquo;s &lt;em&gt;prototype&lt;/em&gt;. Unlike classes, a prototype has no special qualities. Any object can act as the prototype for another object. A prototype is not distinct from other objects, nor does it have a special type. &lt;/p&gt;&lt;br /&gt;
&lt;p&gt;In a classical OO language an object derives behaviour and state-shape (i.e. member variables) from its class, and also from superclasses of its class. In javascript, an object derives behaviour from its prototype and also from its prototype&amp;rsquo;s prototype, and so on up the prototype chain.&lt;/p&gt;&lt;br /&gt;
&lt;h2 id="objects-are-just-a-bag-of-key-value-pairs"&gt;Objects are just a bag of key-value pairs&lt;/h2&gt;&lt;p&gt;Javascript objects are in essence just a dictionary of key-value pairs called properties (plus a prototype as described above). Public object state is added directly to the object as a property, and object &amp;lsquo;methods&amp;rsquo; are simply a function which has been added directly to the object (or its prototypes) as a property.&lt;/p&gt;&lt;br /&gt;
&lt;h2 id="closures-as-an-alternate-source-of-per-instance-state"&gt;Closures as an alternate source of per-instance state&lt;/h2&gt;&lt;p&gt;Storing state directly in an object via its properties would mean that that state is publicly accessible in a similar fashion to a public instance variable in an OO language. This has the same drawbacks as in other languages (uncontrolled access, unclear public interfaces, etc.). To avoid this pitfall a common idiom used in javascript to control access to state is to instead store that state outside of the object itself, but rather as local variables of the function which created that object. Due to the scoping rules of javascript those local variables are &lt;em&gt;closed over&lt;/em&gt; by the object, and are thus available for access and modification.&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;&lt;a id="closure-code-sample"&gt;&lt;br /&gt;
&lt;script src="https://gist.github.com/1580895.js?file=closure-encapsulates-object-state.js"&gt;&lt;/script&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Note that the duck instance we create is &lt;em&gt;not&lt;/em&gt; storing its name anywhere inside the object. Instead the &lt;em&gt;name&lt;/em&gt; argument passed to the createDuck function has been closed over, and is accessible to that duck instance. Also note that the value of &lt;em&gt;name&lt;/em&gt; is therefore private. In fact it is private in a very strong sense. It is &lt;strong&gt;impossible&lt;/strong&gt; for any client of the duck instance to see or modify the value of that name variable. No tricks of reflection or runtime object manipulation can get around this. Interesting sandboxing systems such as &lt;a href="http://code.google.com/p/google-caja/"&gt;Caja&lt;/a&gt; have been built up around this property of javascript.&lt;/p&gt;&lt;br /&gt;
&lt;h1 id="a-lightweight-type-system-for-javascript"&gt;A lightweight type system for Javascript&lt;/h1&gt;&lt;br /&gt;
&lt;h2 id="constructor-functions-not-classes"&gt;Constructor functions, not classes&lt;/h2&gt;&lt;p&gt;In a typical OO system you would define the types in your system using classes such as Duck, Pond, Food, etc. The orthodox approach in javascript would be to define types using prototypes. In our approach we do neither. We have no classes or prototypes, just constructor functions. Each type in the system has one or more constructor functions which create instance of that type. So we would have createDuck(&amp;hellip;), createPond(&amp;hellip;), createFood(&amp;hellip;). &lt;/p&gt;&lt;br /&gt;
&lt;p&gt;The &lt;a href="#closure-code-sample"&gt;closure code sample above&lt;/a&gt; shows the general form these constructor functions take. The equivalent of methods and member variables are defined inside the constructor function and at the tail end of the function an object with references to the methods is created and returned.&lt;/p&gt;&lt;br /&gt;
&lt;h2 id="state-via-closure"&gt;State via closure&lt;/h2&gt;&lt;p&gt;As mentioned earlier, storing state directly in object properties is analogous to having public instance variables. There are very few cases where this is a good idea. Instead our objects maintain state via closed-over local variables declared in the object&amp;rsquo;s constructor functions. In this way object state is private and encapsulated but still available for manipulation by the object&amp;rsquo;s functions, because they are declared in the same constructor function. Access to state is exposed in the public interface of a type instance via these functions which are added to the returned object, becomding &amp;lsquo;methods&amp;rsquo; on that instance.&lt;/p&gt;&lt;br /&gt;
&lt;h2 id="mixins-for-shared-public-behaviour"&gt;Mixins for shared public behaviour&lt;/h2&gt;&lt;p&gt;In javascript public &amp;lsquo;methods&amp;rsquo; are just functions added to an object as a property. This means you can easily mix in new public behaviour by just merging the contents of the a mixin object with the instance itself. For example:&lt;br /&gt;
&lt;a id="mixin"&gt;&lt;br /&gt;
&lt;script src="https://gist.github.com/1580895.js?file=extending-with-mixins.js"&gt;&lt;/script&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Here we have a &lt;em&gt;shouter&lt;/em&gt; mixin and a &lt;em&gt;createShoutyDuck&lt;/em&gt; constructor function which uses that mixin to construct a new type of duck which can shout. The constructor achieves this by using the methods defined in &lt;em&gt;shouter&lt;/em&gt; to extend the duck type that is defined by the &lt;em&gt;createDuck&lt;/em&gt; constructor function. We often use this pattern as an alternative to implementation inheritance. Instead of a base class which provided standard behaviour and subclasses which layer on additional behaviour we instead would have a base mixin which provides standard behaviour and constructor functions which define types by mixing together that standard base behaviour with additional type-specific behaviour. It&amp;rsquo;s also interesting to note that as well as using mixins to extend a type via a constructor function it is also possible to extend specific instances of a type with mixed in functionality on an ad-hoc basis. This allows interesting dynamic patterns such as mixing in &amp;lsquo;admin&amp;rsquo; methods to a specific instance of a User type once they have been authorized as an admin via a service call.&lt;/p&gt;&lt;br /&gt;
&lt;h2 id="namespacing"&gt;Namespacing&lt;/h2&gt;&lt;p&gt;We follow the standard practice in large javascript codebases of namespacing using the &lt;a href="http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth"&gt;module pattern&lt;/a&gt;. Coupled with our other practices, this means that a module will generally only expose a small number of constructor functions to other parts of the system. Inside a namespace we may have quite a few types (and thus constructor functions), but across module boundaries only a few types are shared, and thus only a few constructor functions exposed. This is a natural outcome of following the time-honored practice of organizing modules with low coupling and high cohesion in mind. Global variables are avoided at all costs, and pseudo-global variables (i.e. raw variables tacked on to a top-level namespace) are considered a design smell.&lt;/p&gt;&lt;br /&gt;
&lt;h2 id="dependencies"&gt;Dependencies&lt;/h2&gt;&lt;p&gt;Dependencies are wired together in an initial boot function. Because this function&amp;rsquo;s role is to connect large modules together it has a side-effect of documenting in a relatively declarative, high-level way how the various parts of the system depend on each other. &lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Dependencies are generally hooked in by providing constructor functions as parameters to other constructor functions. As well as directly passing constructor functions, it&amp;rsquo;s also quite common that &lt;a href="http://ejohn.org/blog/partial-functions-in-javascript/"&gt;partially-specified&lt;/a&gt; constructor functions are used to encapsulate lower-level or cross-functional dependencies. Here&amp;rsquo;s another contrived example:&lt;/p&gt;&lt;br /&gt;
&lt;script src="https://gist.github.com/1580895.js?file=currying-and-constructor-functions.js"&gt;&lt;/script&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;This example shows two distinct applications of currying. First, we have exposed a curried createDuck function to the outside world, with the logger dependency hidden. We also used a curried createLogger function called duckLogger to pass to the createDuck function. Again this was to remove cross-functional implementation details (about logging in this case) which the createDuck constructor should not be aware of or care about.&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;There is a strong similarity between our use of partially applied functions and the parameterized Factory classes you see quite often in statically typed OO code (particularly Java). &lt;/p&gt;&lt;br /&gt;
&lt;p&gt;A notable advantage of this dependency injection approach is that modules can easily be tested in isolation by injecting test doubles in place of real dependencies.&lt;/p&gt;&lt;br /&gt;
&lt;h1 id="outcomes"&gt;Outcomes&lt;/h1&gt;&lt;br /&gt;
&lt;h2 id="composition-over-inheritance"&gt;Composition over Inheritance&lt;/h2&gt;&lt;p&gt;A slightly unfortunate side-effect of capturing our instance state in closures is that it is hard to expose that state to mixins and sub-classes, as the state is only available via lexical scoping and is not available via the &lt;em&gt;this&lt;/em&gt; keyword. Another way of putting this is that there is no equivalent of the &amp;lsquo;protected&amp;rsquo; scope found in a language like C++ or Java. This leads to a favoring of composition over inheritance/mixin when it comes to sharing common behaviour between types. Instead of mixing in behaviour that requires access to private state we would wrap that behaviour in a helper object. That helper object would be available to types which need it via their constructor function. Instances of those types would then call out to that helper object as needed, passing in the private state needed by the helper to provide its functionality. Sort of a &amp;lsquo;tell-don&amp;rsquo;t-ask&amp;rsquo; approach to using shared behaviour.&lt;/p&gt;&lt;br /&gt;
&lt;h2 id="no-prototypes-no-new-less-this"&gt;No prototypes, no &lt;em&gt;new&lt;/em&gt;, less &lt;em&gt;this&lt;/em&gt;&lt;/h2&gt;&lt;p&gt;By following this approach to creating types we&amp;rsquo;ve found no need for the prototypical type system built into javascript. Our code does not use the &lt;em&gt;new&lt;/em&gt; operator at all, except when interacting with libraries or frameworks which require the use of &lt;em&gt;new&lt;/em&gt; to instantiate objects.&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;The lack of &lt;em&gt;new&lt;/em&gt; also means usage of the &lt;em&gt;this&lt;/em&gt; keyword becomes less frequent. References from a method&amp;rsquo;s implementation to member variables or to other methods in a type are mostly achieved via lexical scoping. &lt;em&gt;this&lt;/em&gt; is only really needed when writing mixins which achieve their work by calling hook methods implemented in the instances they are mixed into - see the &lt;a href="#mixin"&gt;shouty duck sample above&lt;/a&gt; for an example of that.&lt;/p&gt;&lt;br /&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;&lt;br /&gt;
&lt;p&gt;I have been honestly rather surprised at how well this class-less approach has worked. I would certainly use it (and refine it) in future javascript projects. &lt;/p&gt;&lt;br /&gt;
&lt;p&gt;I&amp;rsquo;d love to hear feedback on what I&amp;rsquo;ve outlined here. If there is interest I may write some follow-up posts diving into more detail on some of the aspects I&amp;rsquo;ve touched on here.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/1512294968367944089/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=1512294968367944089' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/1512294968367944089'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/1512294968367944089'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2012/02/class-less-javascript.html' title='Class-less javascript'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-2976050840025158602</id><published>2011-09-02T13:25:00.000-07:00</published><updated>2011-09-03T12:52:37.147-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Testing Mobile Web Apps With WebDriver</title><content type='html'>&lt;h2 id="intro"&gt;Intro&lt;/h2&gt;&lt;p&gt;We&amp;rsquo;ve been building mobile web apps using &lt;a href="http://jquerymobile.com"&gt;JQuery Mobile&lt;/a&gt; with the main target being webkit-based mobile browsers - Android and iPhone, basically. We&amp;rsquo;re big fans of functional testing, so we spent some time figuring out how to get a good testing infrastructure set up for mobile app development. That&amp;rsquo;s what I&amp;rsquo;ll be sharing here.&lt;/p&gt;&lt;br /&gt;
&lt;h2 id="the-approach"&gt;The approach&lt;/h2&gt;&lt;div class="figure"&gt;&lt;img src="http://3.bp.blogspot.com/-D4Q_lhMFVMg/TmE6GcGW0UI/AAAAAAAAF9M/owO_VqcoS2w/s800/mobile_webdriver_diagram.png" /&gt; &lt;/div&gt;&lt;br /&gt;
Our team members have a lot of experience using &lt;a href="http://cukes.info"&gt;Cucumber&lt;/a&gt; to write automated acceptance tests, and we&amp;rsquo;re big fans. In previous projects we were building native iOS apps and testing them using Cucumber and &lt;a href="http://github.com/moredip/Frank"&gt;Frank&lt;/a&gt;. We wanted to bring over some of the testing infrastructure we already had set up, so we decided on a similar approach. We still use Cucumber to drive tests in the iOS simulator, but instead of talking to a native app using Frank we are talking to our mobile web app via Selenium 2&amp;rsquo;s remote WebDriver protocol. In order to do this we run a special iOS app provided as part of Selenium 2 called &lt;a href="http://code.google.com/p/selenium/wiki/IPhoneDriver"&gt;iWebDriver&lt;/a&gt; which hosts an embedded UIWebView and listens for WebDriver commands, in much the same way as a Frankified native app listens for Frankly commands. We launch the iWebDriver app using the same &lt;a href="http://github.com/moredip/SimLauncher"&gt;SimLauncher gem&lt;/a&gt; which we&amp;rsquo;ve previously used to launch our native app for pre-commit and CI testing. To make our lives easier we use &lt;a href="https://github.com/jnicklas/capybara"&gt;Capybara&lt;/a&gt;, which provides a nice ruby DSL for driving web apps and some useful cucumber step definitions out of the box. We configure Capybara to use the &lt;a href="https://rubygems.org/gems/selenium-webdriver"&gt;selenium-webdriver gem&lt;/a&gt; to drive the iWebDriver-hosted web app via the WebDriver remote protocol.&lt;/p&gt;&lt;br /&gt;
&lt;h2 id="selenium-2--webdriver"&gt;Selenium 2 == WebDriver&lt;/h2&gt;&lt;p&gt;Note that when I talk about Selenium here, I am not referring to the Selenium 1.0 system (Selenium RC, Selenium IDE and friends). We are using Selenium 2.0, which is essentially the WebDriver system plus some Selenium backwards compatibility stuff which isn&amp;rsquo;t used in this setup. We don&amp;rsquo;t run any kind of Selenium server, we simply run iWebDriver in the iOS simulator. iWebDriver exposes the WebDriver remote API, and our cucumber tests drive our mobile app directly within iWebDriver using that API.&lt;/p&gt;&lt;br /&gt;
&lt;h2 id="webdriver-on-mobile-is-still-bleeding-edge"&gt;WebDriver on mobile is still bleeding edge&lt;/h2&gt;&lt;p&gt;On the whole we have been happy using WebDriver and the iOS simulator to drive our functional tests. However, the WebDriver infrastructure for mobile platforms does feel a little rough around the edges. We have rare cases where our CI test run will fail, apparently due to iWebDriver crashing. When we were first getting our app under test we saw what appeared to be an iWebDriver bug where it was overwriting the global _ variable that underscore.js uses. We worked around that by using underscore.js in no-conflict mode. We also had to add a small but hacky monkey-patch to the selenium-webdriver gem to work around a bug in the way CocoaHTTPServer (the embedded HTTP server that iWebDriver uses) handled a POST with an empty body. That bug has been fixed in more recent releases of CocoaHTTPServer, but frustratingly we got no response when we reported the issue and suggested an upgrade of the dependency to resolve the issue. &lt;i&gt;&lt;b&gt;UPDATE&lt;/b&gt;: Jari Bakken notes in the comments that a similar workaround to our monkey-patch has now &lt;a href="http://code.google.com/p/selenium/source/detail?r=13678"&gt;been added&lt;/a&gt; to the selenium-webdriver gem.&lt;/i&gt; We also found that iWebDriver locks up when showing a javascript alert. We worked around this by injecting a stub version of window.alert() in our web page at the start of each test. This worked, but is obviously less than ideal.&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;We briefly experimented with using the Android WebDriver client, but it lacked support for CSS-based selectors at the time. That may have changed since. If you are just using Capybara this is not an issue since Capybara uses XPath under the hood. However we quickly found that our use of JQuery Mobile meant we needed to write a fair amount of custom selectors, and our automation engineers had a preference for CSS. Ideally we would have run our test suite against both the iOS simulator and the Android emulator, but this lack of CSS support led to us deciding to just test on iOS. Given that both platforms are webkit-based this was an acceptable tradeoff.&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;The last drawback worth mentioning around using the iOS simulator is that it can only be run under OS X, and it doesn&amp;rsquo;t seem possible to run multiple instances of the simulator at once. This means that parallelizing your tests will involve running multiple OS X host machines, either physical boxes (we have used mac minis successfully) or virtual machines.&lt;/p&gt;&lt;br /&gt;
&lt;h2 id="recommendations"&gt;Recommendations&lt;/h2&gt;&lt;p&gt;All in all I would still recommend a testing approach similar to what I&amp;rsquo;ve outlined. The extra safety-net that our suite of functional tests provided was just as valuable as in a non-mobile project. While they are not totally polished, iWebDriver and Cucumber are the best way I know of currently to build that safety net.&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;One thing we didn&amp;rsquo;t do which I would recommend is to also have your test suite execute against a desktop webkit-based browser, using ChromeDriver for example. Tests will run a lot quicker on that platform, giving you faster feedback. You will likely need to make minor modifications to the way your tests are written, but if you&amp;rsquo;re running tests in ChromeDriver from day one then you should be able to tackle any small issues as and when they arise. That said, I would &lt;em&gt;absolutely&lt;/em&gt; make sure you are also running your full test suite against at least one mobile platform as frequently as you can - there will be issues in mobile webkit browsers that aren&amp;rsquo;t apparent on a desktop browser.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/2976050840025158602/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=2976050840025158602' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/2976050840025158602'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/2976050840025158602'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2011/09/testing-mobile-web-apps-with-webdriver.html' title='Testing Mobile Web Apps With WebDriver'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/-D4Q_lhMFVMg/TmE6GcGW0UI/AAAAAAAAF9M/owO_VqcoS2w/s72-c/mobile_webdriver_diagram.png' height='72' width='72'/><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-58919191236955237</id><published>2011-07-02T06:37:00.000-07:00</published><updated>2011-07-02T06:37:27.917-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Javascript Promises</title><content type='html'>&lt;p&gt;One of the interesting aspects of Javascript development is its asynchronous, event-driven nature. Any operation which will take a significant amount of time (e.g. a network request) is non-blocking. You don&amp;rsquo;t call a function and block until the operation completes. Instead functions are non-blocking - they return before the operation is complete. To obtain the result of the operation you provide &lt;em&gt;callbacks&lt;/em&gt; which are subsequently invoked once the operation completes, allowing you to move on to the next stage in your computation. This is a very powerful, efficient model that avoids the need for things like explicit threading and all the associated synchronization problems. However, it does make it a bit harder to implement a set of operations that need to happen one after another in sequential series. Instead of writing:&lt;/p&gt;

&lt;pre class="brush: javascript; gutter: false"&gt; 
var response = makeNetworkRequest(),
processedData = processResponse(response);
writeToDB( processedData );
&lt;/pre&gt;

&lt;p&gt;you end up writing:&lt;/p&gt;

&lt;pre class="brush: javascript; gutter: false"&gt; 
makeNetworkRequest( function(response){
  var processedData = processResponse(response);
  writeToDB( processedData, function(){
    // OK, I'm done now, next action goes here.
  });
});
&lt;/pre&gt;

&lt;p&gt;This is the start of what is sometimes referred to as a &lt;em&gt;callback pyramid&lt;/em&gt; - callbacks invoking subsequent operations passing in callbacks which are invoking subsequent operations, and on and on. This is particularly common in node.js code, because most server-side applications involve a fair amount of IO-bound operations (service calls, DB calls, file system calls) which are all implemented asynchronously in node. Because this is a common issue there have been a rash of libraries to help mitigate it. See for example &lt;a href="http://www.infoq.com/articles/surviving-asynchronous-programming-in-javascript"&gt;&amp;ldquo;How to Survive Asynchronous Programming in JavaScript&amp;rdquo; on InfoQ&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One approach to help cope with these issues in asynchronous systems is the Promise pattern. This has been floating around the comp-sci realm since the 70s, but has recently found popularity in the javascript community as it starts to build larger async systems. The basic idea is quite simple. When you call a function which performs some long-running operation instead of that function blocking and then eventually returning with the result of the operation it will instead return immediately, but rather than passing back the result of the operation (which isn&amp;rsquo;t available yet) it passes back a &lt;em&gt;promise&lt;/em&gt;. This promise is a sort of proxy, representing the &lt;em&gt;future&lt;/em&gt; result of the operation. You would then register a callback on the promise, which will be executed by the promise once the operation does complete and the result is available. Here&amp;rsquo;s the same example as I used before, implemented in a promise style:&lt;/p&gt;

&lt;pre class="brush: javascript; gutter: false"&gt; 
var networkRequestPromise = makeNetworkRequest();
networkRequestPromise.then( function(response){
  var processedData = processResponse(response),
  dbPromise = writeToDB(processedData);
  dbPromise.then( function(){
    // OK, I'm done now, next action goes here.
  });
});
&lt;/pre&gt;

&lt;p&gt;I created local promise variable here to show explicitly what&amp;rsquo;s happening. Usually you&amp;rsquo;d inline those, giving you:&lt;/p&gt;

&lt;pre class="brush: javascript; gutter: false"&gt; 
makeNetworkRequest().then( function(response){
  var processedData = processResponse(response); 
  writeToDB(processedData).then( function(){
    // OK, I'm done now, next action goes here.
  });
});
&lt;/pre&gt;

&lt;p&gt;For a simple example like this there&amp;rsquo;s really not much advantage over passing the callbacks as arguments as in the previous example. The advantages come once you need to compose asynchronous operations in complex ways. As an example, you can imagine a server-side app wanting to do something like: &amp;ldquo;make this network request and read this value from the DB in parallel, then perform some computation, then write to the DB and write a log to disk in parallel, then write a network response&amp;rdquo;. The beauty of a promise is that it is an encapsulated representation of an async operation in process which can be returned from functions, passed to functions, stored in a queue, etc. That&amp;rsquo;s what allows the composition of async operations in a more abstract way, leading to a much more manageable codebase.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/58919191236955237/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=58919191236955237' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/58919191236955237'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/58919191236955237'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2011/07/javascript-promises.html' title='Javascript Promises'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-7982999663002802831</id><published>2011-05-08T09:57:00.000-07:00</published><updated>2011-05-08T10:03:08.424-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>retroactive quality metrics with git</title><content type='html'>&lt;h2&gt;The Background&lt;/h2&gt;
&lt;p&gt;For a recent project retrospective we wanted to chart some metrics over the course of the entire project. Things like number of unit tests, test coverage, how long builds took to run, number of failing tests, etc. Taken in isolation these metrics aren't incredibly exciting, but when you plot them over time and hold that against other metrics like team morale, story point velocity, open defects, etc then often some interesting correlations can emerge.&lt;/p&gt;

&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;So, we wanted metrics for internal quality, but we actually hadn't done the best job at collecting those metrics, particularly at the start of the project. So under pressure to get ready for our project retro we decided that we'd have to pass on graphing the internal quality metrics.
&lt;/p&gt;
&lt;p&gt;
After the retrospective - which was a very valuable exercise regardless - I decided to figure out a way to capture this kind of data retroactively. I reasoned that if we had a script which generated a metric for the codebase at an instance in time then we can easily leverage The Awesome Power Of Git&amp;trade; to collect that same metric over an entire set of commits.
&lt;/p&gt;

&lt;h2&gt;Find someone else who's solved 80% of your problem&lt;/h2&gt;
I came across a script in &lt;a href="http://blog.extracheese.org/"&gt;Gary Bernhardt&lt;/a&gt;'s dotfiles repo on github called &lt;a href="https://github.com/garybernhardt/dotfiles/blob/master/bin/run-command-on-git-revisions"&gt;run-command-on-git-revisions&lt;/a&gt;. Sounds promising, doesn't it? This script will take a given range of git commits and run whatever command you provide on each commit in the range one by one. Just what I needed.

&lt;h2&gt;Solve the remaining 20%&lt;/h2&gt;
I just needed a few additional tweaks. First I created a little 5 line ruby script which ran some test coverage metrics on our codebase, outputting a single line of comma-separated data. Then I created a &lt;a href="https://gist.github.com/961178"&gt;modified version of Gary's script&lt;/a&gt;. The modified script only outputted raw CSV data, and tacked on the timestamp of each git commit as it processed it. Once that was done all I had to do was kick off the script with the appropriate range of commits, asking it to run my metric reporter script on each commit. I took the output and pulled it into graphing software and now have a pretty graph of how our test code has trended over time.</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/7982999663002802831/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=7982999663002802831' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/7982999663002802831'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/7982999663002802831'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2011/05/retroactive-quality-metrics-with-git.html' title='retroactive quality metrics with git'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-5245024116805829719</id><published>2011-05-01T11:45:00.000-07:00</published><updated>2011-05-01T18:37:24.202-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Inspect the state of your running iOS app's UI with Symbiote</title><content type='html'>&lt;h2&gt;What's Symbiote?&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/moredip/Frank"&gt;Frank&lt;/a&gt; comes with a useful little tool called Symbiote. It's a little web app which is embedded &lt;i&gt;inside&lt;/i&gt; your native iOS application. Its purpose is to let you inspect the current state of your app's UI, and to test the UIQuery selectors which Frank uses to help it automate your app. Essentially Symbiote is Firebug for your native iOS app.&lt;/p&gt;

&lt;p&gt;Recently I've added some improvements to Symbiote, adding some new features and making it easier to use. &lt;a href="http://vimeo.com/22644221"&gt;This screencast&lt;/a&gt; demonstrates most of the new-and-improved Symbiote.&lt;/p&gt;

&lt;iframe src="http://player.vimeo.com/video/22644221?title=0&amp;amp;byline=0&amp;amp;portrait=0" width="400" height="300" frameborder="0"&gt;&lt;/iframe&gt;

&lt;h2&gt;Main features&lt;/h2&gt;
&lt;h3&gt;View hierarchy&lt;/h3&gt;
&lt;table&gt;&lt;tr&gt;
&lt;td&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="http://3.bp.blogspot.com/-Mqo9tT-rSmo/Tb4FJdhN8oI/AAAAAAAAFyc/aoFGVvGSL94/s1600/view%2Bheirarchy.png" imageanchor="1" style="margin-left:1em; margin-right:1em"&gt;&lt;img border="0" height="334" width="365" src="http://3.bp.blogspot.com/-Mqo9tT-rSmo/Tb4FJdhN8oI/AAAAAAAAFyc/aoFGVvGSL94/s400/view%2Bheirarchy.png" /&gt;&lt;/a&gt;&lt;/div&gt;


&lt;/td&gt;
&lt;td&gt;
Symbiote provides you with a tree describing the current state of the view hierarchy of your running app. This gives you an overview of the general structure of your app's UI, and also helps you write UIQuery selectors which drill down from high level UI features to individual UI elements. For example, you might want to find a specific UITableView, and from there drill down to a specific row within that table view.
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;View properties&lt;/h3&gt;
&lt;table&gt;&lt;tr&gt;
&lt;td&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="http://3.bp.blogspot.com/-Bzy_Ygq7gnM/Tb4GgEHi7pI/AAAAAAAAFyk/IHeRWdTE1cI/s1600/view%2Bproperties.png" imageanchor="1" style="margin-left:1em; margin-right:1em"&gt;&lt;img border="0" height="156" width="400" src="http://3.bp.blogspot.com/-Bzy_Ygq7gnM/Tb4GgEHi7pI/AAAAAAAAFyk/IHeRWdTE1cI/s400/view%2Bproperties.png" /&gt;&lt;/a&gt;&lt;/div&gt;


&lt;/td&gt;
&lt;td&gt;
After selecting a specific view in the view hierarchy you can see details of that view in a properties tab. Inside this tab is a table describing all the properties exposed by the specific view.
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;UI Snapshot, with view locator&lt;/h3&gt;

&lt;table&gt;&lt;tr&gt;
&lt;td&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="http://2.bp.blogspot.com/-VvRIkyC_6xQ/Tb4HtjSTf2I/AAAAAAAAFys/T6sjsD5EKSw/s1600/UI%2Bsnapshot.png" imageanchor="1" style="margin-left:1em; margin-right:1em"&gt;&lt;img border="0" height="246" width="400" src="http://2.bp.blogspot.com/-VvRIkyC_6xQ/Tb4HtjSTf2I/AAAAAAAAFys/T6sjsD5EKSw/s400/UI%2Bsnapshot.png" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;td&gt;
The View Locator tab shows a snapshot of the current app UI. As you mouse over views in the view hierarchy that view will be highlighted in the view locator, making it easy to visualize which 
parts of the view tree map to which parts of the app's UI. 
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


&lt;h3&gt;Selector testing&lt;/h3&gt;
&lt;table&gt;&lt;tr&gt;
&lt;td&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="http://3.bp.blogspot.com/-Qw5aDFr07x0/Tb4IRDAqeBI/AAAAAAAAFy0/vm-wsxHOXNg/s1600/selector%2Btesting.png" imageanchor="1" style="margin-left:1em; margin-right:1em"&gt;&lt;img border="0" height="145" width="400" src="http://3.bp.blogspot.com/-Qw5aDFr07x0/Tb4IRDAqeBI/AAAAAAAAFy0/vm-wsxHOXNg/s400/selector%2Btesting.png" /&gt;&lt;/a&gt;&lt;/div&gt;


&lt;/td&gt;
&lt;td&gt;
Frank uses UIQuery selectors during testing to select a specific view or set of views. This is very similar to how Selenium uses XPath or CSS selectors. In order to test these, Symbiote allows you to provide free-form UIQuery selectors and then have Frank flash any matching views in your app's live UI. This makes it a lot easier to test selectors when writing your automated tests.
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;Accessible elements&lt;/h3&gt;
&lt;table&gt;&lt;tr&gt;
&lt;td&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;
&lt;a href="http://4.bp.blogspot.com/-aCXhNBPGqsw/Tb4IuN4bauI/AAAAAAAAFy8/2_xE_EmNGJY/s1600/accessible%2Belements.png" imageanchor="1" style="margin-left:1em; margin-right:1em"&gt;&lt;img border="0" height="264" width="400" src="http://4.bp.blogspot.com/-aCXhNBPGqsw/Tb4IuN4bauI/AAAAAAAAFy8/2_xE_EmNGJY/s400/accessible%2Belements.png" /&gt;&lt;/a&gt;&lt;/div&gt;


&lt;/td&gt;
&lt;td&gt;
Frank makes use of accessibility labels to make it easier for it to find elements in the UI. To that end, Symbiote provides a list of all the views in your current UI which have accessibility labels. You can click on these elements and see the corresponding UI element flash in your app's running UI, using the same mechanism as the free-from selector input field.
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;Cool, where do I get it?&lt;/h2&gt;

That's easy. Just &lt;a href="http://blog.thepete.net/2011/04/tutoral-creencast-on-frankifying-your.html"&gt;get your app Frankified&lt;/a&gt;, and you're good to go!

&lt;h2&gt;Gracias!&lt;/h2&gt;
We wouldn't have what we have today without the original UI cleanup of Symbiote by Cory Smith, and the UX and CSS help of Mike Long.</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/5245024116805829719/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=5245024116805829719' title='2 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/5245024116805829719'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/5245024116805829719'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2011/05/inspect-state-of-our-running-ios-apps.html' title='Inspect the state of your running iOS app&apos;s UI with Symbiote'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/-Mqo9tT-rSmo/Tb4FJdhN8oI/AAAAAAAAFyc/aoFGVvGSL94/s72-c/view%2Bheirarchy.png' height='72' width='72'/><thr:total>2</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-6340934392706302952</id><published>2011-04-19T21:01:00.000-07:00</published><updated>2011-05-01T18:37:05.389-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Tutorial screencast on Frankifying your app</title><content type='html'>&lt;p&gt;I maintain &lt;a href="http://github.com/moredip/Frank"&gt;Frank&lt;/a&gt;, a tool which lets you write automated acceptance tests for your iOS app using Cucumber. I've been trying to reduce the hurdles in getting started with Frank. My latest attempt is to record a &lt;a href="http://vimeo.com/22537514"&gt;tutorial screencast&lt;/a&gt; showing how to take your existing app and 'Frankify' it.
&lt;/p&gt;

&lt;iframe src="http://player.vimeo.com/video/22537514?title=0&amp;amp;byline=0&amp;amp;portrait=0" width="400" height="300" frameborder="0"&gt;&lt;/iframe&gt;

&lt;p&gt;
'Frankifying' an app is the process of adding a separate Frank target to your app which has the Frank server embedded into it, allowing it to respond to automation commands. It can seem like a bit of an intimidating process at first glance, but it's actually very simple. Hopefully running through the whole process in a 7 minute screencast demonstrates that. 

&lt;p&gt;Derek Longmuir has also contributed a &lt;a href="https://github.com/moredip/Frank/blob/master/tutorial/Tutorial.md"&gt;nice in-depth tutorial writeup&lt;/a&gt; (which I was following along with when I recorded the screencast).
&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/6340934392706302952/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=6340934392706302952' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/6340934392706302952'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/6340934392706302952'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2011/04/tutoral-creencast-on-frankifying-your.html' title='Tutorial screencast on Frankifying your app'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-4947787486036462973</id><published>2011-01-09T15:37:00.001-08:00</published><updated>2011-01-09T21:47:39.155-08:00</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Essential reads for a software developer</title><content type='html'>&lt;p&gt;&lt;a href="http://amzn.com/020161622X"&gt;Pragmatic Programmer&lt;/a&gt;:
Covers basic low-level design best practices as well as many of the foundational practices all developers should be following (testing,version control,refactoring). &lt;/p&gt; 
 
&lt;p&gt;&lt;a href="http://amzn.com/0735619670"&gt;Code Complete&lt;/a&gt;:
Similar content to The Pragmatic Programmer. More indepth, a little more reasoned but also a little drier.&lt;/p&gt; 
 
&lt;p&gt;&lt;a href="http://amzn.com/0321503627"&gt;Growing Object-Oriented Software Guided By Tests&lt;/a&gt; 
The main focus of this book is about building software using the &amp;lsquo;London School&amp;rsquo; of TDD, but along the way it describes the kind of advanced OO design which takes years to fully grok.&lt;/p&gt; 
 
&lt;p&gt;&lt;a href="http://amzn.com/0201485672"&gt;Refactoring&lt;/a&gt;:
Thorough and readable description of a core developer practice.&lt;/p&gt; 
 
&lt;p&gt;&lt;a href="http://amzn.com/0132350882"&gt;Clean Code&lt;/a&gt;:
Opinionated but full of very useful guidance on OO design. &lt;/p&gt; 
 
&lt;p&gt;&lt;a href="http://amzn.com/0321146530"&gt;Test-Driven Development: By Example&lt;/a&gt;:
Maybe a little dated now, but a great introduction to the foundational principle of TDD&lt;/p&gt; 
 
&lt;p&gt;&lt;a href="http://amzn.com/0321278658"&gt;Extreme Programming Explained&lt;/a&gt;:
A little dated at this point (although I haven&amp;rsquo;t read the 2nd edition). Provides a nice short intro to agile practices couched in relatively developer-centric terms.&lt;/p&gt; 
 
&lt;p&gt;&lt;a href="http://amzn.com/0321213351"&gt;Refactoring to Patterns&lt;/a&gt; 
A higher level look at ways to apply the practice of refactoring to evolve towards Patterns. A good way to solidify your understanding of the practice of refactoring.&lt;/p&gt; 
 
&lt;p&gt;&lt;a href="http://amzn.com/0596529260"&gt;RESTful Web Services&lt;/a&gt;: 
Pragmatic but principled coverage on building RESTful services. &lt;/p&gt; 
 
&lt;p&gt;&lt;a href="http://amzn.com/1934356050"&gt;Pragmatic Thinking &amp;amp; Learning: Refactor Your Wetware&lt;/a&gt;:
The only non-technical book in my list, but one of the more valuable. Your entire career revolves around problem solving and interacting with people. Get better at both.&lt;/p&gt; 
 
&lt;p&gt;&lt;a href="http://amzn.com/0131495054"&gt;xUnit Test Patterns&lt;/a&gt;:
Encyclopedic coverage of unit testing patterns and practices.&lt;/p&gt; 
 
&lt;p&gt;&lt;a href="http://amzn.com/0131177052"&gt;Working Effectively with Legacy Code&lt;/a&gt;:
Absolutely required reading for every developer on how to maintain and extend existing systems.&lt;/p&gt; 
 
&lt;p&gt;&lt;a href="http://amzn.com/0321127420"&gt;Patterns of Enterprise Application Architecture&lt;/a&gt;:
Full to the brim with higher-level design/architecture patterns, some of which are applicable to most any large software systems. &lt;/p&gt; 
 
&lt;p&gt;Pattern-Oriented Software Architecture (POSA) &lt;a href="http://amzn.com/0471958697"&gt;Volume 1&lt;/a&gt;, &lt;a href="http://amzn.com/0471606952"&gt;Volume 2&lt;/a&gt;, &lt;a href="http://amzn.com/0470059028"&gt;Volume 4&lt;/a&gt;:
Rather dated, and a bit dry and academic, but some often-overlooked gems can be found in here. For example, lots of coverage of event-driven patterns now made trendy by Node.js, Event Machine et al.&lt;/p&gt; 
 
&lt;p&gt;&lt;a href="http://amzn.com/0136291554"&gt;Object-Oriented Software Construction&lt;/a&gt;:
Old and fairly academic, but lots of stuff that&amp;rsquo;s still relevant. Meyer&amp;rsquo;s Design By Contract approach is definitely something more developers should be exposed to.&lt;/p&gt; 
 
&lt;p&gt;&lt;a href="http://amzn.com/0321413091"&gt;Implementation Patterns&lt;/a&gt;:
A straightforward explanation of the low-level code design tricks which seasoned developers learn through years of practices. You will apply lessons from this book on a daily basis.&lt;/p&gt; 
 
&lt;p&gt;&lt;a href="http://amzn.com/0596007124"&gt;Head First Design Patterns&lt;/a&gt;:
While the original Gang of Four &lt;a href="http://amzn.com/0201633612"&gt;Design Patterns&lt;/a&gt; book is obviously the canonical source, this book presents the core patterns in a more digestable, modern form.&lt;/p&gt; 
 
&lt;p&gt;&lt;a href="http://amzn.com/0321125215"&gt;Domain Driven Design&lt;/a&gt;:
This is really two books in one. The first half covers useful mid-to-high level &amp;lsquo;tactical&amp;rsquo; issues, introducing a set of highly-regarded design patterns. The second half covers high-level &amp;lsquo;strategic&amp;rsquo; issues which span teams and multiple co-dependent code bases.&lt;/p&gt; 
 
&lt;p&gt;&lt;a href="http://amzn.com/0978739213"&gt;Release It!&lt;/a&gt;: 
Written long before the DevOps movement took off, this is a great resource for developers who care about the production life of the systems they help create.&lt;/p&gt; 
 
&lt;p&gt;&lt;a href="http://amzn.com/0262011530"&gt;Structure and Interpretation of Computer Programs (SICP)&lt;/a&gt;: 
I haven&amp;rsquo;t finished reading it, but I feel like I should have. Subtle, math-heavy, and mind-altering.&lt;/p&gt;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/4947787486036462973'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/4947787486036462973'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-4237892156686022426</id><published>2011-01-04T08:34:00.000-08:00</published><updated>2011-01-04T08:34:38.689-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Working with Indirect Input and Output in Unit Tests</title><content type='html'>&lt;style type="text/css"&gt; 
div.figure {
 //border: 1px dotted;
 //padding-left: 1em;
 //padding-right: 1em;
 clear: both; 
 text-align: center;
}

div.figure img {
 border:0px;
}
&lt;/style&gt; 
 
&lt;h2 id="testing-how-a-unit-of-code-interacts-with-its-environment"&gt;Testing how a unit of code interacts with its environment&lt;/h2&gt; 
 
&lt;p&gt;When testing a unit of code you need to both observe how the unit of code is interacting with the outside world and also control how the world interacts with it. &lt;/p&gt; 
 
&lt;p&gt;In a particuarly simple example, you might want to check that when an adder function is given a 2 and a 4 then it returns a 6. In this case you&amp;rsquo;re controlling what the &lt;strong&gt;System Under Test&lt;/strong&gt; (SUT) pulls in from its environment (the 2 and the 4) and also observing what it pushes out (the 6). In a more sophisticated example you might be testing a method which talks to a remote service, verifying that if it receives an error code when trying to read from the network then it logs the appropriate error message to a logger. Note that we&amp;rsquo;re still doing essentially the same thing here - controlling what the SUT pulls in from the environment (an error code in this case) and observing what it pushes out (a call to a logger in this case).&lt;/p&gt; 
 
&lt;p&gt;These two examples both illustrate the same fundamental practice of controlling input and observing output, but they are dealing with different kinds of input and output. In the first example of the adder function we are controlling the &lt;a href="http://xunitpatterns.com/direct%20input.html"&gt;Direct Input&lt;/a&gt; provided to the SUT, and observing the &lt;a href="http://xunitpatterns.com/direct%20output.html"&gt;Direct Output&lt;/a&gt;. In the second example we are controlling &lt;a href="http://xunitpatterns.com/indirect%20input.html"&gt;Indirect Input&lt;/a&gt; and observing &lt;a href="http://xunitpatterns.com/indirect%20output.html"&gt;Indirect Output&lt;/a&gt; (these terms are courtesy of the quite great &lt;a href="http://xunitpatterns.com"&gt;XUnit Test Patterns book&lt;/a&gt;).&lt;/p&gt; 

&lt;h2&gt;Four categories of inputs and outputs&lt;/h2&gt;
&lt;div class="figure"&gt; 
&lt;img height="400" width="234" src="http://4.bp.blogspot.com/_rzQrByr0AIg/TSNKXPJqj-I/AAAAAAAAFsU/TT6q1wTxCvc/s400/input_output_diagram.png" /&gt;
&lt;/div&gt; 
 
&lt;p&gt;As you can see, direct input and output is so called because it is provided directly to the SUT by the unit test. On the other hand, Indirect Input and Output can only be controlled and observed &lt;em&gt;indirectly&lt;/em&gt;, via the SUT&amp;rsquo;s &lt;strong&gt;dependencies&lt;/strong&gt; (aka &lt;a href="http://xunitpatterns.com/DOC.html"&gt;Depended Upon Components&lt;/a&gt;). In one of the previous examples we were testing some code which needed to talk to a remote service. In that case the SUT would have had a dependency on some sort of lower level network service. We used this dependency to inject Indirect Input in the form of an error code being returned when the network service was called. Our SUT also had a dependency on some sort of logging service. We used &lt;em&gt;that&lt;/em&gt; dependency to observe Indirect Output by checking that a logging method was called with the logging information we expect in the circumstances we simulated using the Indirect Input of an error coming back from the network service.&lt;/p&gt; 
 
&lt;h2 id="how-do-we-manage-indirect-input-and-output"&gt;How do we manage indirect input and output?&lt;/h2&gt; 
 
&lt;p&gt;We control indirect input and measure indirect output within our Unit Tests by using &lt;a href="http://www.martinfowler.com/bliki/TestDouble.html"&gt;Test Doubles&lt;/a&gt;. This term encompasses the test-specific doohickeys commonly referred to as &lt;strong&gt;Mocks&lt;/strong&gt; and &lt;strong&gt;Stubs&lt;/strong&gt;, as well as the more esoteric variants such as &lt;strong&gt;Spies&lt;/strong&gt;, &lt;strong&gt;Dummies&lt;/strong&gt;, &lt;strong&gt;Fakes&lt;/strong&gt;, etc. &lt;/p&gt; 
 
&lt;p&gt;In my personal opinion the vocabulary for these things is pretty confusing, and the definitions do not appear to be universally agreed upon and consistent. Also, I don&amp;rsquo;t often find myself too concerned with the implementation-specific differences which for some definitions serve to distinguish between e.g. a Stub vs a Mock. To me a much more important distinction is in what &lt;em&gt;role&lt;/em&gt; a specific Test Double is playing in the test at hand. Is it helping to inject Indirect Input, or is it helping to observe Indirect Output? Or is it simply there to replace a required dependency for which we don&amp;rsquo;t want to use a real implementation? In an ill-advised mixing of terminology, I categorize these roles as Mocking, Stubbing, or Faking. I know this aligns quite poorly with other definitions for these terms, but they&amp;rsquo;re the best I have for now. &lt;/p&gt; 
 
&lt;h2 id="test-double-roles"&gt;Test Double Roles&lt;/h2&gt; 
 
&lt;h3 id="stubbing"&gt;Stubbing&lt;/h3&gt; 
&lt;p&gt;This refers to using a Test Double to control your SUT by providing specific Indirect Input. For example, you might supply your SUT with a testing-specific implementation of a Car repository which you have pre-configured to return a specific Car instance. This Car instance would be the indirect input which you are providing to your SUT. Another classic example would be injecting a fake Clock into your SUT so that you can test how it behaves at 1 second before midnight, or on February 29, or on &lt;a href="http://en.wikipedia.org/wiki/2012_phenomenon"&gt;December 21 2012&lt;/a&gt;.&lt;/p&gt; 
 
&lt;h3 id="mocking"&gt;Mocking&lt;/h3&gt; 
&lt;p&gt;This refers to using a Test Double to observe some piece of Indirect Output produced by your SUT. Perhaps you&amp;rsquo;re creating a system that lets people tweet messages to the Jumbotron at a baseball game, and you need to make sure that you filter the tweets for naughty words. You could supply your SUT with a mock implementation of a RudeWordFilter class, and check that its filtering methods are being called correctly.&lt;/p&gt; 
 
&lt;h3 id="faking"&gt;Faking&lt;/h3&gt; 
&lt;p&gt;A Faking Test Double is one which is just being used to satisfy the SUT&amp;rsquo;s dependencies, and which is &lt;em&gt;not&lt;/em&gt; being used to provide Indirect Input or to observe Indirect Output. Maybe the method you&amp;rsquo;re testing writes entries to a logger as it goes about its business. Your &lt;em&gt;current&lt;/em&gt; test doesn&amp;rsquo;t care about this behavior, so you provide a &lt;a href="http://en.wikipedia.org/wiki/Null_Object_pattern"&gt;Null Object&lt;/a&gt; implementation of the Logger to the SUT. This Null logger will simply ignore any logging methods which are called on it. Note that I emphasized that the &lt;em&gt;current&lt;/em&gt; test wasn&amp;rsquo;t interested in how the SUT uses the logger. Other tests likely would be, and in those tests the Test Double which provides the Logger dependency would likely play a Mocking role rather than a Faking role.&lt;/p&gt; 
 
&lt;h2 id="test-double-roles-vs-test-double-implementation"&gt;Test Double Roles vs Test Double Implementation&lt;/h2&gt; 
&lt;p&gt;It&amp;rsquo;s important to note here that the way in which these Test Doubles are implemented is orthogonal to the role they are playing. You can use a &amp;lsquo;mocking framework&amp;rsquo; (e.g. Mockito, JMock, Typemock, EasyMock) both to supply Indirect Input and to observe Indirect Output. On the other hand you could just as well use hand-written classes (sometimes referred to as stubs) to achieve both these goals. This orthogonality between the technique you&amp;rsquo;re using to create your Test Doubles and the role a Test Double is playing is an important but subtle point, and is part of why I&amp;rsquo;m really not happy with the confusing terminology I have been using.&lt;/p&gt; 
 
&lt;h2 id="acknowledgements"&gt;Acknowledgements&lt;/h2&gt; 
&lt;p&gt;Lots of the ideas in this post are inspired by the patterns in the wonderful, encyclopedic XUnit Test Patterns book. It&amp;rsquo;s not exactly a 5 minute read, but nevertheless I highly recommend it. Most of the patterns in the book are also covered in very high-level overview form on the accompanying website, &lt;a href="http://xunitpatterns.com"&gt;xunitpatterns.com&lt;/a&gt;.&lt;/p&gt; 
 
&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; my categorization of the Mocking, Stubbing and Faking roles lines up pretty closely with what Roy Osherove describes in his book, &lt;a href=""&gt;The art of unit testing&lt;/a&gt;, but I haven&amp;rsquo;t read the book so I can&amp;rsquo;t say that with any confidence.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/4237892156686022426/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=4237892156686022426' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/4237892156686022426'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/4237892156686022426'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2011/01/working-with-indirect-input-and-output.html' title='Working with Indirect Input and Output in Unit Tests'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://4.bp.blogspot.com/_rzQrByr0AIg/TSNKXPJqj-I/AAAAAAAAFsU/TT6q1wTxCvc/s72-c/input_output_diagram.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-4161514738790083450</id><published>2010-11-20T17:55:00.000-08:00</published><updated>2010-11-20T17:57:17.020-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Creating and publishing your first ruby gem</title><content type='html'>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt; 
&lt;p&gt;In this post I&amp;rsquo;m going to cover the basics of creating and publishing a gem using the &lt;code&gt;bundle gem&lt;/code&gt; command provided by &lt;a href="http://gembundler.com/"&gt;Bundler&lt;/a&gt;. We&amp;rsquo;re going to use bundler to create a gem template for us. We&amp;rsquo;ll then take that skeleton gem, add some functionality to it, and publish it for all the world to use.&lt;/p&gt; 
 
&lt;p&gt;For the purposes of this tutorial I need a very simple example of something which you could conceivably want to release as a gem. How about a simple &lt;a href="http://sinatrarb.com"&gt;Sinatra&lt;/a&gt; web app which tells you the time? Sure, that&amp;rsquo;ll work. We&amp;rsquo;ll call it Didactic Clock. In order to make this server implementation need more a couple of lines of code we&amp;rsquo;ll add the requirement that the clock tells you the time in a verbose form like &amp;ldquo;34 minutes past 4 o&amp;rsquo;clock, AM&amp;rdquo;.&lt;/p&gt; 
 
&lt;h2 id="preparing-to-create-a-gem"&gt;Preparing to create a gem&lt;/h2&gt; 
&lt;p&gt;A great way to create and test gems in a clean environment is to use the awesome &lt;a href="http://rvm.beginrescueend.com/integration/bundler/"&gt;rvm&lt;/a&gt; and in particular rvm&amp;rsquo;s awesome &lt;a href="http://rvm.beginrescueend.com/gemsets/basics/"&gt;gemset&lt;/a&gt; feature. I assume you&amp;rsquo;re already set up with rvm. If not &lt;a href="http://rvm.beginrescueend.com/rvm/install/"&gt;go get set up now&lt;/a&gt;!&lt;/p&gt; 
 
&lt;p&gt;First off we&amp;rsquo;ll create a seperate gemset so that we can create and install our gem in a clean environment and be sure that someone installing our gem will have all the dependencies they need provided to them. We&amp;rsquo;re going to be creating a gem called didactic_clock, so we&amp;rsquo;ll name our gemset similarly. We&amp;rsquo;ll create the gemset and start using it by executing:&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt; rvm gemset create didactic_clock
 rvm gemset use didactic_clock
&lt;/code&gt;&lt;/pre&gt; 
 
&lt;p&gt;From now on I&amp;rsquo;ll assume we&amp;rsquo;re always using this clean-room gemset.&lt;/p&gt; 
 
&lt;h2 id="creating-the-skeleton"&gt;Creating the skeleton&lt;/h2&gt; 
 
&lt;p&gt;First lets install bundler into our gemset:&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;gem install bundler
&lt;/code&gt;&lt;/pre&gt; 
 
&lt;p&gt;Now we&amp;rsquo;ll ask bundler to create the skeleton of a gem. In this tutorial we&amp;rsquo;re going to be creating a gem called didactic_clock. We&amp;rsquo;ll ask bundler to create a skeleton for a gem with that name by calling:&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;bundle gem didactic_clock
&lt;/code&gt;&lt;/pre&gt; 
 
&lt;p&gt;You should see some output like:&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;  create  didactic_clock/Gemfile
  create  didactic_clock/Rakefile
  create  didactic_clock/.gitignore
  create  didactic_clock/didactic_clock.gemspec
  create  didactic_clock/lib/didactic_clock.rb
  create  didactic_clock/lib/didactic_clock/version.rb
Initializating git repo in /Users/pete/git/didactic_clock
&lt;/code&gt;&lt;/pre&gt; 
 
&lt;h2 id="modifying-our-gemspec"&gt;Modifying our gemspec&lt;/h2&gt; 
&lt;p&gt;Bundler creates a basic .gemspec file which contains metadata about the gem you are creating. There are a few parts of that file which we need to modify. Let&amp;rsquo;s open it up and see what it looks like:&lt;/p&gt; 
 
&lt;pre class="brush: ruby; gutter: false"&gt; 
   # -*- encoding: utf-8 -*-
   $:.push File.expand_path("../lib", __FILE__)
   require "didactic_clock/version"
 
   Gem::Specification.new do |s|
    s.name        = "didactic_clock"
    s.version     = DidacticClock::VERSION
    s.platform    = Gem::Platform::RUBY
    s.authors     = ["TODO: Write your name"]
    s.email       = ["TODO: Write your email address"]
    s.homepage    = "http://rubygems.org/gems/didactic_clock"
    s.summary     = %q{TODO: Write a gem summary}
    s.description = %q{TODO: Write a gem description}
 
    s.rubyforge_project = "didactic_clock"
 
    s.files         = `git ls-files`.split("\n")
    s.test_files    = `git ls-files -- {test,spec,features}/*`.split("\n")
    s.executables   = `git ls-files -- bin/*`.split("\n").map{ |f| File.basename(f) }
    s.require_paths = ["lib"]
   end
&lt;/pre&gt; 
 
&lt;p&gt;You can see that Bundler has set up some sensible defaults for pretty much everything. Note how your gem version information is pulled out of a constant which Bundler was nice enough to define for you within a file called version.rb. You should be sure to update that version whenever you publish any changes to your gem. Follow the principles of &lt;a href="http://semver.org/"&gt;Semantic Versioning&lt;/a&gt;.&lt;/p&gt; 
 
&lt;p&gt;Also note that there are some TODOs in the authors, email, summary, and description fields. You should update those as appropriate. Everything else can be left as is for the time being.  &lt;/p&gt; 
 
&lt;h2 id="adding-a-class-to-our-lib"&gt;Adding a class to our lib&lt;/h2&gt; 
 
&lt;p&gt;We&amp;rsquo;ll start by creating a TimeKeeper class which will report the current time in the verbose format we want the Didactic Clock server to use. To avoid polluting the client code&amp;rsquo;s namespace it is important to put all the classes within your gem in an enclosing namespace module. In our case the namespace module would be DidacticClock, so we&amp;rsquo;re creating a class called DidacticClock::TimeKeeper. Another convention which is important to follow when creating gems is to keep all your library classes inside a folder named after your gem. This avoids polluting your client&amp;rsquo;s load path when your gem&amp;rsquo;s lib path is added to it by rubygems. So taking both of these conventions together we&amp;rsquo;ll be creating a DidacticClock::TimeKeeper class in a file located at lib/didactic_clock/time_keeper.rb. Here&amp;rsquo;s what that file looks like:&lt;/p&gt; 
 
&lt;pre class="brush: ruby; gutter: false"&gt; 
    module DidacticClock
    class TimeKeeper
     def verbose_time
      time = Time.now
      minute = time.min
      hour = time.hour % 12
      meridian_indicator = time.hour &amp;lt; 12 ? 'AM' : 'PM'
 
      "#{minute} minutes past #{hour} o'clock, #{meridian_indicator}"
     end
    end
   end
&lt;/pre&gt; 
 
&lt;h2 id="adding-a-script-to-our-bin"&gt;Adding a script to our bin&lt;/h2&gt; 
&lt;p&gt;We want users of our gem to be able to launch our web app in sinatra&amp;rsquo;s default http server by just typing &lt;code&gt;didactic_clock_server&lt;/code&gt; at the command line. In order to achieve that we&amp;rsquo;ll add a script to our gem&amp;rsquo;s bin directory. When the user installs our gem the rubygems system will do whatever magic is required such that the user can execute the script from the command line. This is the same magic that adds the spec command when you install the rspec gem, for example. &lt;/p&gt; 
 
&lt;p&gt;So we&amp;rsquo;ll save the following to bin/didactic_clock_server&lt;/p&gt; 
 
&lt;pre class="brush: ruby; gutter: false"&gt; 
   #!/usr/bin/env ruby
 
   require 'sinatra'
   require 'didactic_clock/time_keeper'
 
   # otherwise sinatra won't always automagically launch its embedded 
   # http server when this script is executed
   set :run, true
 
   get '/' do
    time_keeper = DidacticClock::TimeKeeper.new
    return time_keeper.verbose_time
   end
&lt;/pre&gt; 
 
&lt;p&gt;Note that we require in other gems as normal, we &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; require rubygems, and that we &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; do any tricks with relative paths or &lt;code&gt;File.dirname(__FILE__)&lt;/code&gt; or anything like that when requiring in our TimeKeeper class. Rubygems handles all that for us by setting up the load path correctly.&lt;/p&gt; 
 
&lt;h2 id="adding-a-dependency"&gt;Adding a dependency&lt;/h2&gt; 
&lt;p&gt;Our little web app uses Sinatra to serve up the time, so obviously we need the Sinatra gem installed in order for our own gem to work. We can easily express that dependency by adding the following line to our .gemspec:&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;s.add_dependency "sinatra"
&lt;/code&gt;&lt;/pre&gt; 
 
&lt;p&gt;Now Rubygems will ensure that sinatra is installed whenever anyone installs our didactic_clock gem.&lt;/p&gt; 
 
&lt;h2 id="building-the-gem-and-testing-it-locally"&gt;Building the gem and testing it locally&lt;/h2&gt; 
 
&lt;p&gt;At this point we&amp;rsquo;re done writing code. Bundler created a git repo as part of the &lt;code&gt;bundle gem&lt;/code&gt; command. Let&amp;rsquo;s check in our changes to the git repo. &lt;code&gt;git commit -a&lt;/code&gt; should do the trick, but obviously feel free to use whatever git-fu you prefer.&lt;/p&gt; 
 
&lt;p&gt;Now we&amp;rsquo;re ready to build the gem and try it out. Make sure you&amp;rsquo;re still in the clean-room gemset we created earlier, and then run:&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;rake install
&lt;/code&gt;&lt;/pre&gt; 
 
&lt;p&gt;to build our didactic_clock gem and install it into our system (which in our case means installing it into our didactic_clock gemset). If we run &lt;code&gt;gem list&lt;/code&gt; at this point we should see didactic_clock in our list of gems, along with sinatra (which will have been installed as a dependency).&lt;/p&gt; 
 
&lt;p&gt;Now we&amp;rsquo;re ready to run our app by calling &lt;code&gt;didactic_clock_server&lt;/code&gt; from the command line. We should see sinatra start up, and if we visit http://localhost:4567/ we should see our app reporting the time in our verbose format. Victory!&lt;/p&gt; 
 
&lt;h2 id="publishing-our-gem"&gt;Publishing our gem&lt;/h2&gt; 
&lt;p&gt;The last step is to share our creation with the world. Before we do that you&amp;rsquo;ll need to set up rubygems in your system to publish gems. The &lt;a href="https://rubygems.org/pages/gem_docs"&gt;instructions at rubygems.org&lt;/a&gt; are easy to follow.&lt;/p&gt; 
 
&lt;p&gt;Bundler provides a &lt;code&gt;rake publish&lt;/code&gt; task which automates the steps you would typically take when publishing a version of your gem, but it&amp;rsquo;s fairly opinionated in how it does so. The task will tag your current git commit, push from your local git repo to some upstream repo (most likely in github), and then finally build your gem and publish your .gem to rubygems.org. If you don&amp;rsquo;t have an upstream repo configured then you&amp;rsquo;ll probably get an error like:&lt;/p&gt; 
 
&lt;pre&gt;&lt;code&gt;   rake aborted!
   Couldn't git push. `git push  2&amp;gt;&amp;amp;1' failed with the following output:
 
   fatal: No destination configured to push to.
&lt;/code&gt;&lt;/pre&gt; 
 
&lt;p&gt;So, now would be the time to set up an upstream repo. Doing that with github is &lt;a href="http://help.github.com/creating-a-repo/"&gt;really straightforward&lt;/a&gt;. Once you have your local git repo configured with an upstream repo you can finally publish your gem with &lt;code&gt;rake publish&lt;/code&gt;. &lt;/p&gt; 
 
&lt;p&gt;Now anyone who wants to install your gem can do so with a simple &lt;code&gt;gem install&lt;/code&gt; command. Congratulations! Fame and fortune await you!&lt;/p&gt; 
 
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt; 
&lt;p&gt;Hopefully I&amp;rsquo;ve shown that creating and publishing a well-behaved gem is pretty simple. The didactic_clock sample I created is &lt;a href="https://github.com/moredip/didactic_clock"&gt;up on github&lt;/a&gt;, and of course the gem is &lt;a href="https://rubygems.org/gems/didactic_clock"&gt;published on rubygems.org&lt;/a&gt; and can be installed with &lt;code&gt;gem install didactic_clock&lt;/code&gt;.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/4161514738790083450/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=4161514738790083450' title='5 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/4161514738790083450'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/4161514738790083450'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/11/creating-and-publishing-your-first-ruby.html' title='Creating and publishing your first ruby gem'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>5</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-6900788904020274082</id><published>2010-11-20T14:39:00.000-08:00</published><updated>2010-11-20T14:39:41.832-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>timestamped-scenarios, a custom Cucumber formatter</title><content type='html'>I just published a new Ruby gem called &lt;a href="https://rubygems.org/gems/timestamped-scenarios"&gt;timestamped-scenarios&lt;/a&gt;. As usual the code is also &lt;a href="https://github.com/moredip/timestamped-scenarios"&gt;available on github&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;What's this gem for?&lt;/h2&gt;&lt;p&gt;This gem provides custom cucumber formatters which append a test run timestamp to each scenario name as it is generated. a Timestamped::PrettyFormatter and Timestamped::HtmlFormatter are supplied already, but you can use the AddsTimestamp module to dynamically add timestamping to pretty much any Cucumber formatter.&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;You might wonder why I created these formatters. I'm currently working on an iOS project where we are using &lt;a href="https://github.com/moredip/Frank"&gt;Frank&lt;/a&gt; and Cucumber to run automated acceptance tests against the application. We have integrated these acceptance tests into our CI build, and as part of that integration we record a screen capture movie of each test run. By adding timestamps to each scenario name we can easily skip to the part of the movie which shows that scenario executing. This is useful when trying to figure out the context around why a &lt;br /&gt;
specific scenario failed. &lt;/p&gt;&lt;br /&gt;
&lt;h2&gt;How do you use it?&lt;/h2&gt;&lt;p&gt;As with my other cucumber formatter gem (&lt;a href="https://rubygems.org/gems/slowhandcuke"&gt;slowhandcuke&lt;/a&gt;), getting set up with timestamped-scenarios is super easy. just install the gem with &lt;br /&gt;
&lt;pre&gt;&lt;code&gt;gem install timestamped-scenarios&lt;/code&gt;&lt;/pre&gt;and you're ready to use them by executing cucumber with something like &lt;br /&gt;
&lt;pre&gt;&lt;code&gt;cucumber --format 'Timestamped::HtmlFormatter' --out cucumber.html&lt;/code&gt;&lt;/pre&gt;You can also add these parameters to your rake cucumber task, or to your cucumber.yml config file. There's also &lt;a href="https://github.com/moredip/timestamped-scenarios/tree/master/example/"&gt;a little sample project&lt;/a&gt; in the timestamped-scenarios repo on github which shows how to use the formatters.&lt;/p&gt;&lt;br /&gt;
&lt;h2&gt;What's it look like?&lt;/h2&gt;&lt;p&gt;Here's an example of what the Timestamped::PrettyFormatter output looks like:&lt;br /&gt;
&lt;pre&gt;&lt;code&gt;
∴  cucumber 
Using the default profile...
Feature: demonstration

  Scenario: The First [0:00]      # the.feature:3
    Given I wait 5 seconds # step_definitions/steps.rb:1

  Scenario: The Second [0:05]       # the.feature:6
    Given I wait 0.7 seconds # step_definitions/steps.rb:1
    Given I wait 3 seconds   # step_definitions/steps.rb:1

  Scenario: The Third [0:09] # the.feature:10

3 scenarios (3 passed)
3 steps (3 passed)
0m8.709s
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/6900788904020274082/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=6900788904020274082' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/6900788904020274082'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/6900788904020274082'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/11/timestamped-scenarios-custom-cucumber.html' title='timestamped-scenarios, a custom Cucumber formatter'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-3503721181843019236</id><published>2010-10-12T22:48:00.000-07:00</published><updated>2010-10-12T22:49:19.390-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Objective C memory errors pt II - Dangling Pointers</title><content type='html'>&lt;p&gt;In my &lt;a href="/2010/10/common-objective-c-memory-management.html"&gt;last post&lt;/a&gt; I talked about memory leaks in Objective C. In this post I'll take about the converse - dangling pointers. In iOS a dangling pointer happens when you maintain a reference to an object which has been deallocated. I'd say the most common cause is failure to take ownership of an object you intend to maintain a reference to. Another common cause is when an object is accidently released multiple times by the same owner, leading to its retain count dropping to 0 and the object being deallocated before all the objects which hold references to the object release those references.&lt;br /&gt;
&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;I'm going to illustrate this first type of dangling pointer bug (failing to take ownership of a reference) and try to explain in detail the cause of the error and its effects. We'll use a pedagogical Duck class similar to the one in my previous post:&lt;br /&gt;
&lt;/p&gt;&lt;br /&gt;
&lt;pre class="brush: c; gutter: false;"&gt;@interface Duck : NSObject {
  NSArray *_feathers;
}
@end
&lt;/pre&gt;&lt;br /&gt;
&lt;p&gt;We have a Duck which holds a reference to an array of feathers. We'd like to ensure that our Duck's feathers array always points to a valid NSArray instance, so we set the reference to an empty array during construction:&lt;br /&gt;
&lt;/p&gt;&lt;br /&gt;
&lt;pre class="brush: c; gutter: false;"&gt;- (id) init
{
  self = [super init];
  if (self != nil) {
    _feathers = [NSArray array];
  }
  return self;
}
&lt;/pre&gt;&lt;br /&gt;
&lt;p&gt;Once again we have a memory bug here, but this time it's the flip side of the memory management coin from a memory leak - a dangling pointer. Instead of failing to relinquish ownership of a reference we're failing to &lt;em&gt;take&lt;/em&gt; ownership. We are asking NSArray to create an instance using the [NSArray array] factory method, which does NOT transfer any ownership to the caller. This is explained quite clearly in &lt;a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmRules.html#//apple_ref/doc/uid/20000994-BAJHFBGH"&gt;Apple's Memory Management Rules&lt;/a&gt; - if a method does not start with &lt;code&gt;alloc&lt;/code&gt;, &lt;code&gt;new&lt;/code&gt; or &lt;code&gt;copy&lt;/code&gt; then the caller is not automatically granted ownership of the object, and should take that ownership explicitly by calling retain if it intends to maintain a reference to that object.&lt;br /&gt;
&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;I'll illustrate one scenario of how this bug could manifest itself:&lt;/p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;div style="border: 1px dotted; padding-left: 1em; padding-right: 1em;"&gt;&lt;img style="border:0px"
 src="http://2.bp.blogspot.com/_rzQrByr0AIg/TLVBJClOLRI/AAAAAAAAFZM/pslgwyVbxD8/s1600/ObjCDanglingPointer_1.jpg" /&gt;&lt;p&gt;1) In our init method we call [NSArray array] which creates an NSArray instance. The creator of the array inside the implementation of [NSArray array] has to keep ownership of the instance for a certain period of time, otherwise its retain count would drop to 0 and it would immediately be deallocated.&lt;br /&gt;
&lt;/p&gt;&lt;/div&gt;&lt;br /&gt;
&lt;div style="border: 1px dotted; padding-left: 1em; padding-right: 1em;"&gt;&lt;img style="border:0px"
 src="http://1.bp.blogspot.com/_rzQrByr0AIg/TLVBJi5bmOI/AAAAAAAAFZQ/qTTCtI0gyOY/s1600/ObjCDanglingPointer_2.jpg" /&gt;&lt;p&gt;2) still in the init method, we update _feathers to refer to the array, but neglect to take any ownership of the array.&lt;br /&gt;
&lt;/p&gt;&lt;/div&gt;&lt;br /&gt;
&lt;div style="border: 1px dotted; padding-left: 1em; padding-right: 1em;"&gt;&lt;img style="border:0px"
 src="http://3.bp.blogspot.com/_rzQrByr0AIg/TLVBKOAtISI/AAAAAAAAFZU/K8Wp87-Inwg/s1600/ObjCDanglingPointer_3.jpg" /&gt;&lt;p&gt;3) at some later point while Duck is still alive the creator (and sole owner) of the array instance relinquishes its ownership of the array instance, dropping the array's retain count down to 0. This might be because it has been deallocated, or maybe it is replacing its reference to the array with something else, or some other reason.&lt;br /&gt;
&lt;/p&gt;&lt;/div&gt;&lt;br /&gt;
&lt;div style="border: 1px dotted; padding-left: 1em; padding-right: 1em;"&gt;&lt;img style="border:0px"
 src="http://2.bp.blogspot.com/_rzQrByr0AIg/TLVBKvgkDMI/AAAAAAAAFZY/6xAlg_f0nqU/s1600/ObjCDanglingPointer_4.jpg" /&gt;&lt;p&gt;4) The array's retain count has dropped to 0, so it is immediately deallocated and its memory reclaimed for future use by the memory management system. Our Duck instance has no way of knowing this, and is still holding a reference to where the array used to be. This is the dangling pointer.&lt;br /&gt;
&lt;/p&gt;&lt;/div&gt;&lt;br /&gt;
&lt;p&gt;Subsequently when the Duck instance attempts to talk to that array it is going to find itself talking to some random object, or just to arbitrary junk data. Crashes will ensue... eventually.&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Note that the sole owner of the array as shown in the diagrams would in a lot of cases be an autorelease pool. This is because the easiest way to handle memory management when implementing factory methods like [NSArray array] is to create the object to be returned using alloc, and then transfer ownership to the autorelease pool before returning the object, like so:&lt;/p&gt;&lt;br /&gt;
&lt;pre class="brush: c; gutter: false;"&gt;+ (NSArray *) array {
  return [[[NSArray alloc]init]autorelease];
}
&lt;/pre&gt;&lt;br /&gt;
&lt;p&gt;What makes this kind of dangling pointer error particularly tricky is that in certain use cases it will not manifest at all. If the usage of Duck is such that it always goes out of scope before the NSArray instance is deallocated then no issues will be detected. This could happen if the Duck instance and the NSArray instance it references are both owned by the same autorelease pool, for instance. However, when the usage patterns of Duck change you could suddenly see errors - even if you haven't changed the (buggy) implementation of the Duck class itself in months!&lt;/p&gt;&lt;br /&gt;
&lt;h2&gt;What should we have done?&lt;/h2&gt;&lt;br /&gt;
&lt;h3&gt;Use an object creation method which implicitly grants ownership to the caller&lt;/h3&gt;&lt;pre class="brush: c; gutter: false;"&gt;- (id) init
{
  self = [super init];
  if (self != nil) {
    _feathers = [[NSArray alloc]init];
  }
  return self;
}
&lt;/pre&gt;&lt;br /&gt;
&lt;h3&gt;Use retain to explicitly take ownership&lt;/h3&gt;&lt;br /&gt;
&lt;pre class="brush: c; gutter: false;"&gt;- (id) init
{
  self = [super init];
  if (self != nil) {
    _feathers = [[NSArray array] retain];
  }
  return self;
}
&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/3503721181843019236/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=3503721181843019236' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/3503721181843019236'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/3503721181843019236'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/10/objective-c-memory-errors-pt-ii.html' title='Objective C memory errors pt II - Dangling Pointers'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://2.bp.blogspot.com/_rzQrByr0AIg/TLVBJClOLRI/AAAAAAAAFZM/pslgwyVbxD8/s72-c/ObjCDanglingPointer_1.jpg' height='72' width='72'/><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-8434564713845385282</id><published>2010-10-11T22:08:00.000-07:00</published><updated>2010-10-12T22:49:57.963-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Common Objective-C memory management errors, Part I</title><content type='html'>I would say that the steepest learning curve for someone new to iOS development is having to manage your own memory using reference counting. Knowing when to retain and when to autorelease can seem like a black art until you understand the conventions which is used (extremely consistently, I might add) within Objective C libraries. Let's examine one very common mistake, which I will call the Property Assignment Memory Leak. I've seen this a few times, and indeed committed this error myself during my first weeks of iOS development.&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;The code&lt;/h2&gt;&lt;br /&gt;
Imagine we have a simple Duck class, which holds a feathers array:&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;pre class="brush: c; gutter: false"&gt;@interface Duck : NSObject {
  NSArray *_feathers;
}
@property (nonatomic,retain) NSArray *feathers;
@end

@implementation Duck
@synthesize feathers=_feathers;
@end
&lt;/pre&gt;&lt;br /&gt;
during construction we'd like to initialize this array, so we create an init method as follows:&lt;br /&gt;
&lt;pre class="brush: c; gutter: false"&gt;- (id) init
{
  self = [super init];
  if (self != nil) {
    self.feathers = [[NSArray alloc] init];
  }
  return self;
}
&lt;/pre&gt;Of course, we need to make sure we release our ownership of the feather array during deallocation, so we'll add a dealloc method like so:&lt;br /&gt;
&lt;pre class="brush: c; gutter: false"&gt;- (void)dealloc {
  self.feathers = nil;
}
&lt;/pre&gt;&lt;br /&gt;
&lt;h2&gt;The Leak&lt;/h2&gt;So we're good here, right? The observant reader will note that no, we're not. the feathers array which we created in our init method will never be released. This will be a little easier to explain if I refactor the init method a little, making it more verbose by introducing a local variable to hold the array we are about to assign to the self.feathers property:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class="brush: c;"&gt;- (id) init
{
  self = [super init];
  if (self != nil) {
    // alloc will always create an object with a retain count already set to 1. In other 
    // words, tempArray has ownership of the object.
    NSArray *tempArray = [[NSArray alloc] init]; 

    // assigning to self.feathers bumps the array's retain count up to 2. In other words, 
    // now the feathers property also has ownership of the object.
    self.feathers = tempArray; 
  }

  // when we return tempArray goes out of scope without ever releasing ownership of the object it created. Memory leak!
  return self;
}
&lt;/pre&gt;&lt;br /&gt;
To make this clearer, I'll try and illustrate what happens as we move through the Duck object's lifecycle.&lt;br /&gt;
&lt;br /&gt;
&lt;div style="border: 1px dotted; padding-left: 1em; padding-right: 1em;"&gt;&lt;img style="border:0px"
 src="http://1.bp.blogspot.com/_rzQrByr0AIg/TLPif9vTCHI/AAAAAAAAFYU/pvo2veXZj3A/s1600/ObjCMemLeak_1.png" /&gt;&lt;p&gt;1) Here an instance of Duck has just been alloced, and we're about to execute init.&lt;/p&gt;&lt;/div&gt;&lt;br /&gt;
&lt;div style="border: 1px dotted; padding-left: 1em; padding-right: 1em;"&gt;&lt;img style="border:0px"
 src="http://3.bp.blogspot.com/_rzQrByr0AIg/TLPigBadwKI/AAAAAAAAFYY/5p1A35EcqCc/s1600/ObjCMemLeak_2.png"" /&gt;&lt;p&gt;2) We create an array, and assign it to the local tempArray variable. Note that any objects created with alloc will already have a retain count of +1 when alloc returns.&lt;br /&gt;
&lt;/p&gt;&lt;/div&gt;&lt;br /&gt;
&lt;div style="border: 1px dotted; padding-left: 1em; padding-right: 1em;"&gt;&lt;img style="border:0px"
 src="http://1.bp.blogspot.com/_rzQrByr0AIg/TLPigjIqkoI/AAAAAAAAFYc/v-Bk6DZGXWk/s1600/ObjCMemLeak_3.png" /&gt;&lt;p&gt;3) We assign the array to the feathers property. Because the property has retain semantics it will take ownership of the array, incrementing its retain count to +2.&lt;br /&gt;
&lt;/p&gt;&lt;/div&gt;&lt;br /&gt;
&lt;div style="border: 1px dotted; padding-left: 1em; padding-right: 1em;"&gt;&lt;img style="border:0px"
 src="http://1.bp.blogspot.com/_rzQrByr0AIg/TLPig2tUvnI/AAAAAAAAFYg/ng4R-7FVNNI/s1600/ObjCMemLeak_4.png" /&gt;&lt;p&gt;4) We've now left the init method, and so the local tempArray variable has gone out of scope. However, it never released ownership of the array before it went out of scope, so the retain count is still +2.&lt;/p&gt;&lt;/div&gt;&lt;br /&gt;
&lt;div style="border: 1px dotted; padding-left: 1em; padding-right: 1em;"&gt;&lt;img style="border:0px"
 src="http://3.bp.blogspot.com/_rzQrByr0AIg/TLPihCflJXI/AAAAAAAAFYk/nq0UTQa8Yzc/s1600/ObjCMemLeak_5.png" /&gt;&lt;p&gt;5) After using our Duck instance for some time it is eventually deallocated, at which point its dealloc method is called. We do the right thing and set its feather property to nil during dealloc. Again, the feather property has retain semantics and therefore it will release ownership of whatever it is currently pointing to just before taking ownership of whatever it is being asked to point to. It was pointing to our array, and is now pointing to nil, so it releases ownership of the array (dropping its retain count down to +1), and takes ownership of nil (which has no effect whatsoever).&lt;br /&gt;
&lt;/p&gt;&lt;/div&gt;&lt;br /&gt;
&lt;div style="border: 1px dotted; padding-left: 1em; padding-right: 1em;"&gt;&lt;img style="border:0px"
 src="http://2.bp.blogspot.com/_rzQrByr0AIg/TLPihq5UurI/AAAAAAAAFYo/W60lonuAKBI/s1600/ObjCMemLeak_6.png" /&gt;&lt;p&gt;6) Finally, our Duck instance is fully deallocated, and disappears. But our array instance still has a retain count of +1, even thought nothing is referencing it. Memory leak! &lt;br /&gt;
&lt;/p&gt;&lt;/div&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;While I showed the entire lifecycle for a Duck instance here I should note that the bug is in the init method, and once that method returns the damage has been done. The fact that after init returns the array instance only has 1 reference pointing to it but has a retain count of 2 is indicative of that. I wanted to show the entire lifecycle to demonstrate that the point at which a memory leak is introduced will likely be quite far away from the point where the leak is detected. This is important to know when using Instruments or some other tool to try and detect leaks at runtime.&lt;br /&gt;
&lt;/p&gt;&lt;p&gt;I think that the most common cause of this particular memory leak bug is an unclear understanding of how properties work. It is hard at first glance to see how assigning an object pointer to self.foo is different than assigning that pointer to a local variable. Once you grok that that property assignment also assigns ownership, and that you already have an implied ownership by the act of calling alloc then things start to fall into place. At least, that's what happened for me.&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;What should we have done?&lt;/h2&gt;&lt;br /&gt;
We have a range of options for &lt;em&gt;correctly&lt;/em&gt; implementing our init method:&lt;br /&gt;
&lt;br /&gt;
&lt;h3&gt;Use autorelease&lt;/h3&gt;&lt;pre class="brush: c; gutter: false"&gt;- (id) init
{
  self = [super init];
  if (self != nil) {
    self.feathers = [[[NSArray alloc] init] autorelease];
  }
  return self;
}
&lt;/pre&gt;&lt;br /&gt;
&lt;h3&gt;Explicitly release ownership after assignment&lt;/h3&gt;&lt;pre class="brush: c; gutter: false"&gt;- (id) init
{
self = [super init];
  if (self != nil) {
    NSArray *tempArray = [[NSArray alloc] init]; 
    self.feathers = tempArray;
    [tempArray release];
  }
  return self;
}
&lt;/pre&gt;&lt;br /&gt;
&lt;h3&gt;Create an array without implicitly taking ownership&lt;/h3&gt;&lt;pre class="brush: c; gutter: false"&gt;- (id) init
{
  self = [super init];
  if (self != nil) {
    self.feathers = [NSArray array];
  }
  return self;
}
&lt;/pre&gt;&lt;br /&gt;
&lt;p&gt;The first two approaches are the most common. I often see advice to use the more verbose explicit release approach, rather than autorelease, because it is more performant. Personally, I tend to optimize for developer performance at the sake of a bit of CPU performance, and prefer the autorelease approach. It's a lot less typing and more importantly I feel it makes the code a bit easier to scan through, particularly if you have a block of code with lots of property assignments.&lt;br /&gt;
&lt;/p&gt;&lt;br /&gt;
&lt;h2&gt;UPDATE&lt;/h2&gt;After posting this I remembered there's another way we could solve this memory leak:&lt;br /&gt;
&lt;h3&gt;Assign directly to the member variable&lt;/h3&gt;&lt;pre class="brush: c; gutter: false"&gt;- (id) init
{
  self = [super init];
  if (self != nil) {
    _feathers = [[NSArray alloc] init];
  }
  return self;
}
&lt;/pre&gt;&lt;br /&gt;
&lt;p&gt;I don't really like this approach, because there's a lack of symmetry in sometimes accessing a member variable directly, but at other times via a property. Also, it encourages folk to use this approach outside of init methods. This greatly increases the likelihood of &lt;em&gt;another&lt;/em&gt; memory management error - not releasing ownership from an existing reference before replacing that reference. Hmm, I should cover that one in a future post...&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/8434564713845385282/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=8434564713845385282' title='8 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/8434564713845385282'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/8434564713845385282'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/10/common-objective-c-memory-management.html' title='Common Objective-C memory management errors, Part I'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://1.bp.blogspot.com/_rzQrByr0AIg/TLPif9vTCHI/AAAAAAAAFYU/pvo2veXZj3A/s72-c/ObjCMemLeak_1.png' height='72' width='72'/><thr:total>8</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-6085951127263777477</id><published>2010-08-07T11:43:00.000-07:00</published><updated>2010-08-07T11:45:17.800-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Podcast about Frank and test automation on iOS</title><content type='html'>Some colleagues at Thoughtworks and I recently recorded a 30 minute podcast about &lt;a href="http://github.com/moredip/frank"&gt;Frank&lt;/a&gt;, our UI automation tool for iPhone/iPad testing which I introduced in &lt;a href="http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html"&gt;this post&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;
In the podcast we cover:&lt;br /&gt;
&lt;ul&gt;&lt;li&gt;an overview of Frank, what it is and where it came from.&lt;/li&gt;
&lt;li&gt;How our testers and developers use Frank and cucumber at our current client (and how we'd ideally &lt;i&gt;like&lt;/i&gt; to be using it).&lt;/li&gt;
&lt;li&gt;Alternatives to Frank, such as &lt;a href="http://github.com/unboxed/icuke"&gt;iCuke&lt;/a&gt; and &lt;a href="http://github.com/undees/brominet"&gt;brominet&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some waffling by me about some of the reasoning that drove my design decisions with Frank. For example, avoiding XML and XPath for UI element selection.&lt;/li&gt;
&lt;li&gt;Symbiote, the little web app that we embed inside Frank which allows a test creator to inspect and play with the live iOS app as it's running.&lt;/li&gt;
&lt;li&gt;Writing cucumber feature files per-story versus per-feature.&lt;/li&gt;
&lt;li&gt;Handling the stateful nature of an iOS app in UI-level tests, and including Frank testing into a Continuous Integration system.&lt;/li&gt;
&lt;li&gt;The challenges of testing an app which integrates with large back-end systems.&lt;/li&gt;
&lt;li&gt;What's next for Frank.&lt;/li&gt;
&lt;/ul&gt;&lt;br /&gt;
Many thanks to Chris Stephenson for organizing and facilitating, and to Derek and Hiyasmin for tolerating my hogging of the mike!&lt;br /&gt;
&lt;br /&gt;
You can get more information on the podcast and give it a listen &lt;a href="http://bit.ly/9cyMjT"&gt;here&lt;/a&gt;.</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/6085951127263777477/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=6085951127263777477' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/6085951127263777477'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/6085951127263777477'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/08/podcast-about-frank-and-test-automation.html' title='Podcast about Frank and test automation on iOS'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-8166190842767775043</id><published>2010-07-23T16:48:00.000-07:00</published><updated>2010-07-23T17:00:00.683-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Frank: Automated Acceptance Tests for iPhone and iPad</title><content type='html'>&lt;p&gt;Recently I joined a team developing an iPad application. The application had no existing automated tests, and the team was under a tight deadline to deliver on promised functionality. Faced with similar circumstances in the past I have advocated introducing automated UI-driven acceptance tests to establish a loose but broad test coverage net. After a brief investigation we decided that the available tools weren't quite what we needed, so we built our own 'Frankenstein's Monster' by plumbing together several existing open source libraries to create &lt;a href="http://github.com/moredip/Frank"&gt;a light-weight UI automation framework for iPhone and iPad applications, called Frank.&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;
&lt;h2&gt;How does Frank work?&lt;/h2&gt;&lt;p&gt;In use Frank consists of two main parts. There is a small objective-C server which is compiled into the iOS application you want to automate. You then use a remote driver from within your automated testing framework of choice to send automation commands to the Frank server and interpret the responses sent back.&lt;/p&gt;&lt;img src="http://github.com/moredip/frank/raw/master/doc/Frank%20Architecture.png" alt="Frank Architecture Overview"&gt;&lt;br /&gt;
&lt;p&gt;Currently the project includes a Cucumber driver. Creating additional drivers (for RSpec, NUnit or JBehave perhaps) is a pretty trivial task, as the Frank server provides just a few key commands.&lt;/p&gt;&lt;br /&gt;
&lt;h2&gt;I don't get it. Show me moving pictures!&lt;/h2&gt;&lt;p&gt;Here is a brief screencast which demonstrates a Cucumber test suite exercising the functionality of a simple iPhone app via Frank. [&lt;a target="_blank" href="http://sl.thepete.net/frank_ea_demo"&gt;Click Here&lt;/a&gt; to watch the screencast in a larger window]&lt;/p&gt;&lt;object id="scPlayer" class="embeddedObject" width="950" height="642" type="application/x-shockwave-flash" data="http://content.screencast.com/users/PeteHodgson/folders/Jing/media/0f35802c-684a-49bd-bb7a-b141e4d2c689/jingswfplayer.swf" &gt;  &lt;param name="movie" value="http://content.screencast.com/users/PeteHodgson/folders/Jing/media/0f35802c-684a-49bd-bb7a-b141e4d2c689/jingswfplayer.swf" /&gt;&lt;param name="quality" value="high" /&gt;&lt;param name="bgcolor" value="#FFFFFF" /&gt;&lt;param name="flashVars" value="thumb=http://content.screencast.com/users/PeteHodgson/folders/Jing/media/0f35802c-684a-49bd-bb7a-b141e4d2c689/FirstFrame.jpg&amp;containerwidth=950&amp;containerheight=642&amp;content=http://content.screencast.com/users/PeteHodgson/folders/Jing/media/0f35802c-684a-49bd-bb7a-b141e4d2c689/00000015.swf&amp;blurover=false" /&gt;&lt;param name="allowFullScreen" value="true" /&gt;&lt;param name="scale" value="showall" /&gt;&lt;param name="allowScriptAccess" value="always" /&gt;&lt;param name="base" value="http://content.screencast.com/users/PeteHodgson/folders/Jing/media/0f35802c-684a-49bd-bb7a-b141e4d2c689/" /&gt;&lt;/object&gt;&lt;br /&gt;
&lt;p&gt;You can see the Cucumber scenarios and then watch as the Frank driver automates the application in the iPhone simulator, restarting the application between each scenario.&lt;/p&gt;&lt;br /&gt;
&lt;h2&gt;Anything else?&lt;/h2&gt;&lt;p&gt;Frank has additional functionality which I haven't gone into here. There is a javascript web app called Symbiote which is embedded within your iOS app itself. This allows you to interact with your iOS application as it's running, testing UI selection paths and inspecting the application's DOM in realtime. We also provide Cucumber steps for utility tasks such as recording a test run to video (great for debugging a failing acceptance test within a CI system), rotating the simulated device, and restarting the application between scenarios to ensure independent tests.&lt;/p&gt;&lt;br /&gt;
&lt;h2&gt;Where can I get it?&lt;/h2&gt;Frank (plus some more documentation) can be found on github &lt;a href="http://github.com/moredip/Frank"&gt;right here&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;
&lt;h2&gt;What's coming?&lt;/h2&gt;&lt;p&gt;The next important step is including our automated acceptance tests within a Continuous Integration build. We intend to run Frank tests upon every checkin, much as you would run Selenium tests for a web application. A failing test will break the build, emailing the team with a video showing the failing test.&lt;/p&gt;&lt;p&gt;I'm also planning to blog about specific aspects of Frank in greater depth in coming weeks.&lt;/p&gt;&lt;p&gt;Please do &lt;a href="http://github.com/moredip/Frank"&gt;check Frank out&lt;/a&gt;, and get in touch if you have any feedback, feature requests, bug reports, or anything else!&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/8166190842767775043/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=8166190842767775043' title='15 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/8166190842767775043'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/8166190842767775043'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html' title='Frank: Automated Acceptance Tests for iPhone and iPad'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>15</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-7365698883206657809</id><published>2010-04-22T16:19:00.000-07:00</published><updated>2010-04-22T16:19:52.821-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>TDD, Emergent Design, and Punctuated Equilibrium</title><content type='html'>&lt;p&gt;In my experience good TDD designs tend to have evolved (and hopefully continue to evolve) in a sort of punctuated equilibrium. There are long periods of small incremental changes to a code base, punctuated by infrequent bursts of large design-level refactorings. While the TDD mantra is "Red, Green, Refactor", I think a more accurate version would be "Red, Green, Red, Green, Red, Green, Refactor". Less catchy, I know.&lt;br /&gt;
&lt;/p&gt;&lt;p&gt;Letting tests drive your design is great, but if you're not careful you will end up with a design which is the result of a simple accreation of functionality. This of course is the reason for the "Refactor" part of RGR. However, in my experience the refactoring part does not occur in a steady flow. Rather there will be periods of time where only small implementation-level refactorings take place during the RGR cycle as new functionality is implemented. Then at some point something will give. Someone may have a design breakthrough, realizing a more expressive/elegant/clean way to express some functionality. Alternatively some niggling annoyance in a subsystem's design will pass the team's tolerance threshold such that they decide they need to clean up the design to remove the annoyance. Both events will lead to a brief flurry of larger design-level refactorings.&lt;br /&gt;
&lt;/p&gt;&lt;p&gt;A somewhat minor example of the 'niggling annoyance' case would be when someone is adding a 4th optional parameter to a method call and finally decides to bite the bullet and pull all the optional parameters out into a single options hash. An example of the 'design breakthrough' case might be the third time someone adds a subclass in order to specialize some aspect of a base classes functionality. They might realize that really what's going on here is that each subclass represents a Strategy, which can be plugged into the base class. Now both of these examples are rather small-scale, but hopefully they illustrate the concept. It's hard to come up with examples of larger refactorings which are easy to succinctly describe without a bunch of background information.&lt;br /&gt;
&lt;/p&gt;&lt;p&gt;A key observation here is that principles like YAGNI and 'do the simplest thing that will work' will not work well in isolation. Rather they must live alongside principles like DRY, seperation of concerns, do one thing and do it well, etc. If your sole focus is on doing the minimum amount to get your tests passing you will not end up with a supple code base which is amenable to change. That requires dilligent attention on your part.&lt;br /&gt;
&lt;/p&gt;&lt;p&gt;Does this mean that TDD leads to bad design? No. TDD does not lead to good design on its own, but it &lt;i&gt;does&lt;/i&gt; set the stage for good design to emerge. A team with the safety net of a strong test suite has the courage to follow through and realize these design-level refactorings. A team without that safety net may know exactly what needs to be done but will lack the courage to do so, because they know that any changes will lead to unknown breakages. Thus, the team will be reluctant to undertake these design improvements, as much as they would like to do so.&lt;br /&gt;
&lt;/p&gt;&lt;p&gt;Finally, this idea of punctuated design equilibrium may sound familiar to folks who've read &lt;a href="http://www.domaindrivendesign.org"&gt;Eric Evan's Domain Driven Design&lt;/a&gt;. He talks about how good teams who are really working to understand a domain will occasionally find themselves up against a breakthrough which requires them to stop forward momentum on features in order to realize a more elegant expression of their core domain. That small section of his really excellent book was certainly in my mind as I started writing this post.&lt;br /&gt;
&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/7365698883206657809/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=7365698883206657809' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/7365698883206657809'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/7365698883206657809'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/04/tdd-emergent-design-and-punctuated.html' title='TDD, Emergent Design, and Punctuated Equilibrium'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-1724728842367721400</id><published>2010-04-05T11:41:00.000-07:00</published><updated>2010-04-21T17:31:02.543-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><title type='text'>Introducing Noguchi</title><content type='html'>&lt;p&gt;Generating HTML tables in ruby has always seemed like more of a hassle than it should be. Most of the times that I've had to do it I've been a little frustrated with how, well, &lt;i&gt;ugly&lt;/i&gt; the view code looks. So, I decided I'd try and create a nicer way to build tables. The end result is a small table creation library called Noguchi. Given a set of data and some optional configuration it will render a table as HTML or CSV.&lt;/p&gt;&lt;h2&gt;Show me!&lt;/h2&gt;&lt;p&gt;Here are some quick examples of the kind of things you can do with Noguchi. There are more features than I will show here; for more details check out the &lt;a href='http://github.com/moredip/noguchi'&gt;README in the library's github repo&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Creating a simple table from ActiveRecord model instances&lt;/h3&gt;&lt;pre&gt;table = Noguchi.table_for(users)
table.render&lt;/pre&gt;&lt;p&gt;generates&lt;/p&gt;&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Age&lt;/th&gt;&lt;th&gt;Sex&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt; Jenny&lt;/td&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;F&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Dave&lt;/td&gt;&lt;td&gt;32&lt;/td&gt;&lt;td&gt;M&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Hank&lt;/td&gt;&lt;td&gt;27&lt;/td&gt;&lt;td&gt;M&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;Rendering CSV&lt;/h3&gt;&lt;pre&gt;table = Noguchi.table_for(users)
table.render_as_csv&lt;/pre&gt;&lt;p&gt;generates&lt;/p&gt;&lt;pre&gt;name,age,sex
Jenny,24,F
Dave,32,M
Hank,27,M&lt;/pre&gt;&lt;h3&gt;Rendering collections of hashes&lt;/h3&gt;&lt;pre&gt;fruits = [
  { :name =&gt; 'banana', :color =&gt; 'yellow' },
  { :name =&gt; 'apple', :color =&gt; 'green' },
  { :name =&gt; 'orange', :color =&gt; 'orange' } 
]
table = Noguchi.table_for(fruits)&lt;/pre&gt;&lt;p&gt;generates&lt;/p&gt;&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;color&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;   &lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;banana&lt;/td&gt;&lt;td&gt;yellow&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;apple&lt;/td&gt;&lt;td&gt;green&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;orange&lt;/td&gt;&lt;td&gt;orange&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt; &lt;/table&gt;&lt;h3&gt;Adding arbitrary custom-rendered columns&lt;/h3&gt;&lt;pre&gt;table = Noguchi.table_for(users)
table.add_field(:edit)
table.to_render_body_cell_for(:edit) do |context,cell|
  cell.raw_content = link_to( "Edit this user", edit_user_path(context.datum) )
end&lt;/pre&gt;&lt;p&gt;generates&lt;/p&gt;&lt;table&gt;  &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Age&lt;/th&gt;&lt;th&gt;Sex&lt;/th&gt;&lt;th&gt;Edit&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;
  &lt;tbody&gt; 
    &lt;tr&gt;&lt;td&gt;Jenny&lt;/td&gt;&lt;td&gt;24&lt;/td&gt;&lt;td&gt;F&lt;/td&gt;&lt;td&gt;&lt;a href='http://example.com/users/1/edit'&gt;Edit this user&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Dave&lt;/td&gt;&lt;td&gt;32&lt;/td&gt;&lt;td&gt;M&lt;/td&gt;&lt;td&gt;&lt;a href='http://example.com/users/2/edit'&gt;Edit this user&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;Hank&lt;/td&gt;&lt;td&gt;27&lt;/td&gt;&lt;td&gt;M&lt;/td&gt;&lt;td&gt;&lt;a href='http://example.com/users/3/edit'&gt;Edit this user&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt; 
&lt;/table&gt;&lt;h2&gt;The approach&lt;/h2&gt;&lt;p&gt;I decided that since the goal of this library was to make table creation code look less ugly I would let the design of the API drive the process. So I started off by thinking about how I'd like table creation code to look like, basically just writing some rough ruby code that used the as-yet-unwritten library to render a basic table. The idea here was to get a simple core API which would render a basic table with very few lines of code, but to make the table rendering customizable by adding various tweaks to that basic table. Once I was happy with how the core API looked I started writing more complex examples, letting that drive out more advanced features in the API. These features were optional configurations which aimed to handle the most common kinds of customization I seem to end up doing to a table. Things like customizing a column header, adding an extra column to contain an edit link, things like that.&lt;/p&gt;&lt;p&gt;Once I had a rough idea of the API in my head, I started writing tests that described the functionality, implementing just enough of the library at each step to make the tests pass. I was plesantly surprised at how well this worked; the entire implementation was driven out by these tests. While I do tend to TDD most of the time, I've seldom done so exclusively. I tend to find myself spending some small amount of time outside of the Red-Green-Refactor loop, usually while exploring a new design approach or a brand new subsystem. I'm quite pleased with how this exclusively TDD approach played out in this case, although I wonder whether it would work quite as well in different circumstances.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/1724728842367721400/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=1724728842367721400' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/1724728842367721400'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/1724728842367721400'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/04/introducing-noguchi.html' title='Introducing Noguchi'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-576148816888376035</id><published>2010-04-03T20:25:00.000-07:00</published><updated>2010-04-21T17:30:53.355-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><title type='text'>Stormcloud will watch over the unicorns.</title><content type='html'>&lt;p&gt;Hipster geeks crack me up. A nice ancillary benefit of being in this industry is I get to read blog posts about interesting technical stuff which also include phrases such as:&lt;/p&gt;&lt;br /&gt;
&lt;blockquote&gt;...we developed a new monitoring script, called Stormcloud, to kill Unicorns when they ran out of control...&lt;br /&gt;
&lt;br /&gt;
...Monit would still monitor the master Unicorn process, but Stormcloud would watch over the Unicorns...&lt;br /&gt;
&lt;br /&gt;
...child death during request processing ... would cause that request and all requests queued in the mongrel to send 500 "robot" errors until the mongrel had been restarted...&lt;br /&gt;
&lt;/blockquote&gt;&lt;br /&gt;
&lt;p&gt;No need to fear, children. Stormcloud will watch over the unicorns. And if all else fails, a mongrel will send 500 robot errors.&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;In case you were wondering, &lt;a href="http://engineering.twitter.com/2010/03/unicorn-power.html"&gt;the blog post these come from&lt;/a&gt; is about Twitter's app server infrastructure.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/576148816888376035/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=576148816888376035' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/576148816888376035'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/576148816888376035'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/04/stormcloud-will-watch-over-unicorns.html' title='Stormcloud will watch over the unicorns.'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-2196537645787131553</id><published>2010-03-09T14:33:00.001-08:00</published><updated>2010-03-09T14:38:43.380-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='flex'/><title type='text'>TickTock: A dirt-simple stopwatch class for actionscript</title><content type='html'>I just threw together a really straightforward stopwatch class, for use when profiling operations in ActionScript code. You can either use it in an old-skool procedural way:

&lt;pre class="brush: as3; gutter: false"&gt;
var tt:TickTock = new TickTock();
tt.start();
doSomeWork();
tt.stop();
trace( "That took "+tickTock.elapsedTimeInMilliseconds+" millisconds" );
&lt;/pre&gt;

or in a fancy-pants, functional, closure-y way:

&lt;pre class="brush: as3; gutter: false"&gt;
var tt:TickTock = TickTock.measure( function(){
  doSomeWork();
});
trace( "That took "+tickTock.elapsedTimeInMilliseconds+" millisconds" );
&lt;/pre&gt;

Being primarily a ruby guy, I prefer the fancy-pants approach ;)

The class, along with a little sample app, is &lt;a href="http://github.com/moredip/TickTock"&gt;up on GitHub now&lt;/a&gt;.</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/2196537645787131553/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=2196537645787131553' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/2196537645787131553'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/2196537645787131553'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/03/ticktock-dirt-simple-stopwatch-class.html' title='TickTock: A dirt-simple stopwatch class for actionscript'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-5480662959189187079</id><published>2010-03-07T15:08:00.001-08:00</published><updated>2010-03-08T10:33:48.067-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='agile'/><title type='text'>Why do we estimate effort?</title><content type='html'>&lt;p&gt;I listened to a &lt;a href="http://www.se-radio.net/podcast/2010-02/episode-156-kanban-david-anderson"&gt;really good podcast&lt;/a&gt; yesterday on Kanban. One of the topics discussed was the fact that with Kanban estimating story points is optional. Most of my agile experience is with Scrum, so my initial reaction was one of mild disbelief. How can a team perform work without estimating effort! But when you think about it, why do we have this vaguely obsessive focus on story points in Scrum? Surely in other areas there are teams that get by perfectly well without having to determine up-front how much effort each item of work is going to require. What &lt;i&gt;is&lt;/i&gt; the value in estimating? Here's what I came up with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tracking velocity&lt;/li&gt;
&lt;li&gt;Deciding on the scope for an iteration&lt;/li&gt;
&lt;li&gt;Prioritizing stories (what will give us the most bang for the buck)&lt;/li&gt;
&lt;li&gt;Release planning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm focused on the fine-grained estimations for individual stories here, so I'm just going to skip past the release planning stuff. My rationale being that for release planning you're mainly going to use more course-grained estimates for a whole set of features, rather than estimating every single story. As to the value of story points for priotization purposes, I wonder whether there are many times where the decision is based on how much effort a story would take. Even if that was a factor on occasion, I would argue that the estimation process could be done 'just in time' for the relevant stories in the course of a brief conversation.&lt;/p&gt;

&lt;p&gt;Really it seems that the main value in estimating story points is to allow a team to sign up for the appropriate amount of work for an iteration. If a team is using a Kanban approach then this isn't really required. A team can just pull work through until they have enough releasable stories. At any point they can decide to make a release with whatever stories are complete at that time. The restriction of a hard timeboxed iteration just isn't required.&lt;/p&gt;

&lt;p&gt;So what are we left with? Tracking velocity. Is that actually useful enough to justify the cost of the estimation effort? I wonder. In my own experience it seems that estimating is a relatively painful part of the agile process. Most engineers just find it hard to do it well.&lt;/p&gt;

&lt;h2&gt;Hidden benefits?&lt;/h2&gt;
&lt;p&gt;While reflecting on the estimating and planning sessions I've done with teams in the past, I came up with one very valuable side-effect of the estimation process. In order to estimate well a team will need to discuss in detail what's involved in a story. That can often reveal previously unrecognized dependencies, ambiguous or contradictory requirements, and so on. Perhaps there are other processes that would play a similar role if estimating were not being done? For example if a team is doing feature-driven development then they will probably flush out these kinds of issues as they are defining the acceptance criteria for a story. I've not worked on a team that &lt;i&gt;doesn't&lt;/i&gt; do story point estimations, so I'm not sure on this one.&lt;/p&gt;

&lt;p&gt;It's interesting to reflect that most of the benefit of estimating effort is done in order to support the agile process itself, rather than the actual creation of software. If a team wasn't doing agile, it wouldn't really need to estimate. In that sense it could be considered waste.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/5480662959189187079/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=5480662959189187079' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/5480662959189187079'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/5480662959189187079'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/03/why-do-we-estimate-effort.html' title='Why do we estimate effort?'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-7362590025924733581</id><published>2010-02-22T22:41:00.000-08:00</published><updated>2010-03-09T14:59:07.133-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='patterns'/><title type='text'>Primitive Obsession obsessions</title><content type='html'>&lt;p&gt;After seeing the &lt;span style="font-variant: small-caps;"&gt;Primitive Obsession&lt;/span&gt; code smell crop up in a few different places recently I got to thinking about it in the context of static and dynamic languages.&lt;/p&gt;

&lt;p&gt;Essentially this code smell refers to using a primitive data type (int, string, etc), or a cluster thereof, where you could instead be using an explicitly defined type. Probably the most common variant of &lt;span style="font-variant: small-caps;"&gt;Primitive Obsession&lt;/span&gt; would be a method like:&lt;/p&gt;

&lt;pre class="brush: ruby; gutter: false"&gt;
def is_point_within_bounds( x, y )
# ...
end
&lt;/pre&gt;

&lt;p&gt;I would call this variant &lt;span style="font-variant: small-caps;"&gt;Primitives Travelling in a Pack&lt;/span&gt;. You'll probably see these two x and y values hanging out together all over the place. Often this variant will be addressed with the &lt;span style="font-variant: small-caps;"&gt;Introduce Parameter Object&lt;/span&gt; refactoring, leading to something like:&lt;/p&gt;

&lt;pre class="brush: ruby; gutter: false"&gt;
class Point &lt; Struct.new(:x,:y)
end

def is_point_within_bounds( point )
# ...
end
&lt;/pre&gt;

&lt;p&gt;This is a pretty uncontroversial refactoring. It tends to make the code easier to read, and is often the initial stage in the 'budding of' of a full-fledged class (I believe I have the wonderful &lt;a href="http://www.growing-object-oriented-software.com/"&gt;GOOS book&lt;/a&gt; to thank for that term). Once the class is there, it often becomes a locus for a little cluster of methods, often pulled in from surrounding client code. This is a powerful way of letting your design evolve based on needs.&lt;/p&gt;

&lt;p&gt;There are other more subtle variants of &lt;span style="font-variant: small-caps;"&gt;Primitive Obsession&lt;/span&gt;. Some people would say that two methods like:&lt;/p&gt;

&lt;pre class="brush: java; gutter: false"&gt;
public class Rental {
  void increaseRentalPeriod( int numWeeks ) {
   //...
  } 

  int getRentalPeriod() {
   //...
  }
} 
&lt;/pre&gt;

&lt;p&gt;would be better refactored to:&lt;/p&gt;

&lt;pre class="brush: java; gutter: false"&gt;
public class WeekSpan {
    public int numWeeks;
}

public class Rental {
  void increaseRentalPeriod( WeekSpan period ) {
   //...
  } 

  WeekSpan getRentalPeriod() {
   //...
  }
} 
&lt;/pre&gt;

&lt;p&gt;Applying this refactoring can again be the first step in budding off a new class. However I would say that the main advantage of this refactoring is the explicit typing which it adds when in a statically typed language. Before refactoring there was an implicit typing going on that said "ints in this context actually represent a time period, in weeks". After the refactoring that typing has been made explicit. One outcome of that is that type errors which were previously implicit are now explicit, and will be caught by the type system. Before the refactoring you could have written client code like&lt;/p&gt;

&lt;pre class="brush: java; gutter: false"&gt;
someRental.increaseRentalPeriod( numDaysToIncreaseRentalBy() );
&lt;/pre&gt;

&lt;p&gt;and your compiler wouldn't utter a squeak, despite the fact that you're passing in a number of days, rather than the number of weeks which the method expects. With the explicit WeekSpan type, that error wouldn't sneak through.&lt;/p&gt;

&lt;p&gt;This explicit typing also helps with future refactoring. If we later decided that it would be better to represent the rental period using a number of days rather than a number of weeks we could use a automated refactoring tool to trivially replace all instances of WeekSpan with DaySpans (or we could just refactor WeekSpan itself into a generic TimePeriod). If we didn't have the explicit WeekSpan class then we'd be reduced to manually searching for all the instances of the primitive int type which happened to actually be representing a time period in weeks.&lt;/p&gt;

&lt;p&gt;This is all good stuff, and makes an awful lot of sense in a static language. However, I personally am not convinced that introducing these single-field data types makes as much immediate sense in a dynamically typed language. Both of the typing advantages are lost in a dynamic language. We don't know the type of anything until runtime so we can't check for type violations (however our unit tests help with that), and our refactoring tools can't take advantage of static type information.&lt;/p&gt;

&lt;p&gt;The other advantages of introducing these non-primitive types remain, but I would err towards the &lt;a href="http://c2.com/xp/YouArentGonnaNeedIt.html"&gt;YAGNI principle&lt;/a&gt;. Leave the primitives where they are, and make a mental note that they might need some attention in the future. Once you see a need to move to a next step in the budding off process (e.g. moving a method into the nascent data type), then that's the time to apply the refactoring. Doing so just for the sake of having an explicit type smacks of premature optimization to me.&lt;/p&gt;

&lt;h2&gt;Postscript&lt;/h2&gt; 
&lt;p&gt;It's interesting to note that some languages (such as Google's Go) allow you to declare an explicit type which simply aliases a primitive. For example in Go you could write&lt;/p&gt;
&lt;pre&gt;
type WeekSpan uint;
&lt;/pre&gt;

&lt;p&gt;This might be the best of both worlds. You get the explicit typing and attendant type safety, without the potential overkill of creating an new single-field class. If you later discovered that budding off a new class was required it would be trivial to refactor that semi-primitive WeekSpan type into a full fledged WeekSpan class.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/7362590025924733581/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=7362590025924733581' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/7362590025924733581'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/7362590025924733581'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/02/primitive-obsession-obsessions.html' title='Primitive Obsession obsessions'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-7810011072193686636</id><published>2010-02-19T00:20:00.000-08:00</published><updated>2010-02-23T12:54:29.992-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='flex'/><title type='text'>Encapsulating user interaction events in Flex</title><content type='html'>&lt;p&gt;When developing the presentation layer in a Flex application I like to follow an MVC/MVP pattern. I also like to keep my views nice and skinny, with as much logic as possible in the controller/presenter. However, I do like to encapsulate &lt;em&gt;some&lt;/em&gt; of the details of the UI itself within the view, and so I shy away from exposing raw user interaction events (button clicks, list selections, etc) outside of the view. Instead I like to have the view capture those events and translate them into what I call &lt;em&gt;user action&lt;/em&gt; events, which represent higher-level, user-centric interactions. So instead of publishing a 'list item selected' event, the view publishes a 'blog post selected' event. For example, here what a typical event handler would look like in a view's MXML file:&lt;/p&gt;

&lt;pre class="brush: as3; gutter: false"&gt;
private function onListItemDoubleClick(event:ListEvent):void {
  dispatchEvent( new Event(EVENT_postSelected) );
}
&lt;/pre&gt;

&lt;p&gt;This allows small user experience tweaks (e.g. double clicks to select vs single clicks) without affecting clients of the view. More importantly it helps the view expose a consistent, user-centric level of abstraction - its interface talks in terms of user actions, not UI minutia. A view's controller would register listeners for these user action events via the generic IEventDispatcher::addEventListener(...) exposed by the view, and process them appropriately in the registered listener callback:&lt;/p&gt;

&lt;pre class="brush: as3; gutter: false"&gt;
public class Controller
{
  //... 

  public function bindToView(view:IView):void {
    _view = view;
    //...
    _view.addEventListener( View.EVENT_postSelected, onPostSelected );
  }
  
  //...

  private function onPostSelected(event:Event):void {
    //... process user action here
    //...
  }
}
&lt;/pre&gt;

&lt;p&gt;One thing to note in passing (we'll come back to it) is the ugly fact that while bindToView(...) is dealing with an abstract interface (IView), it still needs to reference the &lt;b&gt;concrete View implementation&lt;/b&gt; in order to get to the View.EVENT_postSelected constant. In real terms the controller class has a dependency on the concrete view implementation.&lt;/p&gt;

&lt;p&gt;Back to the story. I want to make sure that my controller processes these user actions correctly, which for me means I need good unit test coverage of the listener callbacks which the controller registers. These callbacks are private methods, so therefore I need some way of simulating the occurrence of these user actions within the unit tests for my controller. Typically when unit testing a controller I arrange for it to be bound to a stub implementation of the view. To simulate these user actions I could have that stub implementation derive from EventDispatcher. During test setup the controller would be bound to the stub view, and as part of that process would subscribe to these user action events. Subsequently my test code could artificially fire the appropriate event within a test case using EventDispatcher::dispatchEvent(...) in order to simulate a given user action occurring.&lt;/p&gt;

&lt;pre class="brush: as3; gutter: false"&gt;
public class StubView extends EventDispatcher implements IView
{
  // other stub stuff here
}

public class ControllerTests 
{

  [Before]
  public function setUp():void {
    // instantiate controller, instantiate stub view, bind controller to stub view, etc...
  }

  [Test]
  public function doesSomethingWhenPostSelected():void {
    // ... set up test
    simulatePostSelected();
    // ... verify expectations
  }

  // .. other tests

  private function simulatePostSelected():void {
    _stubView.dispatchEvent( new Event( View.EVENT_postSelected ) );
  }
}
&lt;/pre&gt;

&lt;p&gt;This has always felt a little hacky to me, and I started to wonder if that feeling indicated a design flaw (I find that when something feels wrong when writing tests it often points towards a design deficiency). So recently I started experimenting with another approach. Instead of the controller registering event callbacks on the view directly with addEventListener(...), the view exposes methods which do the registration on the controller's behalf. I call these &lt;i&gt;interest registration methods&lt;/i&gt;. Instead of the controller calling view.addEventListener( SOME_EVENT_TYPE, my_callback ), it calls view.addUserActionListener( my_callback ).&lt;/p&gt;

&lt;pre class="brush: as3; gutter: false"&gt;
 // ... in the view MXML
 // ...
 public function addPostSelectedListener(listener:Function):void {
   addEventListener( EVENT_postSelected, listener );
  }

// ... in the controller
// ...
  public function bindToView(view:IView):void {
    _view = view;
  //...
    _view.addPostSelectedListener( onPostSelected );
  }
&lt;/pre&gt;

&lt;p&gt;In production code the view &lt;em&gt;implements&lt;/em&gt; these interest registration methods in the same way as the controller did before - by calling addEventListener(...) with the appropriate event type and the callback supplied by the caller. The code is the same, it's just moved from the controller to the view.&lt;/p&gt;

&lt;p&gt;The effect this has is quite powerful however. The fact that events are used as the mechanism for invoking the callback is hidden within the view. This becomes interesting when you come to test your controller. Instead of subscribing to events, your stub implementation of the view can implement the interest registration methods by just holding the callback in a instance variable. When the test wants to simulate a user action it can ask the view for the registered callback and call it directly, &lt;em&gt;bypassing the Flex eventing mechanism entirely&lt;/em&gt;.&lt;/p&gt;

&lt;pre class="brush: as3; gutter: false"&gt;
public class StubView implements IView
{
  public var postSelectedListener:Function;
  public function addPostSelectedListener(listener:Function):void {
    postSelectedListener = listener;
  }

   // .. the rest of IView implemented here
}

public class ControllerTests
{
  // ... every thing else as before

  private function simulatePostSelected():void {
    _stubView.postSelectedListener( new Event( 'ignored' ) );
  }
}
&lt;/pre&gt;

&lt;p&gt;What's more interesting is the effect this change has on the interface exposed by the view. Previously we had a view which exposed implementation details - the fact it was handling client callback registration using EventDispatcher), and most tellingly the string constants which identify different event types. We also had different levels of abstraction being exposed in the same interface. Typically the other parts of the view interface worked on the high level of user actions, not on the low level of events being fired of a particular type. With the migration to the interest registration methods we have a consistent level of abstraction, and we can hide all the messy implementation details of the eventing mechanism. Those annoying public event type strings become private and hidden away within the view; an implementation detail. We can even totally encapsulate the fact that the view inherits from EventDispatcher. The explicit interface also feels more typesafe to me. It's impossible to accidentally register for an invalid event code, and it's immediately obvious from the view's interface which user actions it reports.&lt;/p&gt;

&lt;p&gt;There are some drawbacks to this approach. Because we're abstracting away the details of the event dispatching mechanism we're also hiding some of the advanced facilities that mechanism provides. For example the approach as described doesn't allow a client of the view to unregister its interest, which would usually be accomplished using IEventDispatcher#removeEventListener(...). I would argue that this is a reasonable price to pay. If that functionality is required in some situations it would be straightforward to add, and because it would be explicitly added as a new method in the view's interface it would be clear that the view was expecting clients to use that method.&lt;/p&gt;

&lt;p&gt;All in all I'm very happy with how this experiment turned out. By paying attention to the 'smells' that my tests were exposing I discovered a valid issue with the way different parts of my code interacted. I would argue that changing that interaction to make the tests cleaner does seem to have lead to a cleaner design overall.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/7810011072193686636/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=7810011072193686636' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/7810011072193686636'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/7810011072193686636'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/02/encapsulating-user-interaction-events.html' title='Encapsulating user interaction events in Flex'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-99440316219000888</id><published>2010-02-18T16:11:00.000-08:00</published><updated>2010-02-23T12:53:50.720-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><title type='text'>Ruby Facets: the mash method</title><content type='html'>&lt;p&gt;I keep meaning to write up some of the useful gems (if you'll pardon the pun) which are hidden in the super-handy &lt;a href="http://facets.rubyforge.org/"&gt;Facets gem&lt;/a&gt;. Today I'll cover &lt;a href="http://facets.rubyforge.org/apidoc/api/core/classes/Enumerable.html#M000524"&gt;Enumerable#mash.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
Let's say you have a list of Users, and you'd like to create a hash which lets you look up the Users based on their login. You might write something like:
&lt;/p&gt;

&lt;pre class="brush: ruby; gutter: false"&gt;
def create_login_hash_for( users )
  user_login_hash = {}
  users.each do |user|
    user_login_hash[user.login] = user
  end
  user_login_hash
end
&lt;/pre&gt;

&lt;p&gt;With Enumerable#mash, you can trim that down to:&lt;/p&gt;

&lt;pre class="brush: ruby; gutter: false"&gt;
def create_login_hash_for( users )
  users.mash do |user|
    [user.login,user]
  end
end
&lt;/pre&gt;

&lt;p&gt;This is much more succinct. More importantly, it expresses the &lt;em&gt;intention&lt;/em&gt; more clearly.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/99440316219000888/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=99440316219000888' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/99440316219000888'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/99440316219000888'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/02/ruby-facets-mash-method.html' title='Ruby Facets: the mash method'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-6453696039626648878</id><published>2010-02-03T10:05:00.000-08:00</published><updated>2010-02-23T12:55:18.995-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='git'/><title type='text'>Partial commits with git</title><content type='html'>&lt;p&gt;I've been using git for a few months now. Like all the best dev tools it has slowly permeated my workflow to the point where I'd feel pretty crippled without it. In fact, I don't think I would ever go back to a centralized system like svn at this point. In a pinch I'd fall back to using git locally and then using the appropriate git-to-foo integration to push my local changes from my git repo to whatever the centralized repository was.&lt;/p&gt;
&lt;p&gt;So, git is great. However, there's one practice which is common amongst git users which I am still uncomfortable with (even though I do it myself on occasion). I'm referring to the practice of staging some, but not all, of the changes in your working tree to the index, and then committing that partial change set. For example, let's say I've been hacking away on my stamp collector application. I added the ability to 'tag' stamps (folksonomy now being mainstream enough to appeal to your average philatelist). While I was working, I also fixed a couple of badly named methods that I happened to come across during my other changes. With git I can decide to commit these changes separately, through judicious use of the index. I can say 'add changes to files x and y to the index, but leave out z for now', then commit, then add the changes to file z to the index, and then commit that change. If I want to get really fancy I can even add &lt;i&gt;some&lt;/i&gt; of the changes to a file to the index, but not all changes. This way I can seperate my changes into two logical commits, one for the feature addition of tagging stamps, and one for the miscellaneous method name cleanup.&lt;/p&gt;
&lt;p&gt;This is definitely one of those features that is very cool once you realize the power it offers. It means someone else reviewing my commits will have an easier time, and it even means that I could roll back my feature addition change but still keep the method name cleanup work. Still, I would submit that this can be a Bad Idea.&lt;/p&gt;
&lt;p&gt;Why does this concern me? Because any such partial commits haven't been tested before being commited. At this point you might be thinking "Well, don't know about you, but I run my tests before each commit". The point here is that the tests run before you commit are run against your working tree, which in the world of git isn't necessarily the same as your commit. In the Good Old Days of svn, the changeset in your working tree was always the same as the changeset in your commit. With git and the index (aka the stage, aka the cache, don't get me started on that) that's not the case. Your working tree may contain changes to files x, y and z, but you've decided to only commit the changes to files x and y. Or even more extreme, you've decided to commit the changes to file x but only &lt;i&gt;some&lt;/i&gt; of the changes to file y (maybe the other changes where related to your method renaming binge). So you're running your tests against one set of code (your working tree, with changes to x, y, and z), but your commit is another set of code. I think that ninety nine times out of a hundred this distinction won't matter. Your "technically untested" commit would still have passed the tests anyway. Plus, what you're almost certainly following it up straight away with another commit which &lt;i&gt;will&lt;/i&gt; be the same as your working tree. What are the chances that someone will manage to stumble upon an invalid state like that. Probably really low. But still, kinda scary I think. It seems a bit like saying "well, this race condition is really unlikely to happen, right...". I'd rather not have to even think about that. Another thing to consider is the 'cool' use case that someone could decide to revert one commit but not the other.At that point you have code sitting on head that hasn't been tested.&lt;/p&gt;

&lt;p&gt;One solution to this would be to ban the use of commits that don't include all changes in the working tree. Yeah, right. Not likely, and not helpful. Staging is definitely a useful way to add more structure to your change history, and not something I'd like to leave behind.&lt;/p&gt;

&lt;p&gt;I wonder if a better solution could be achieved with the judicious use of commit hooks. What if we had a pre-commit script that would take the change set that was about to be committed (NOT whatever is in the working tree) and run tests against that tree. If the tests fail the commit fails. Now we would be left in a place of greater confidence than before. We wouldn't even need the discipline to run the tests by hand, because even if we forgot then git would be running them for us anyway. To be honest I'm not sure of the feasibility of creating this kind of setup. I'd love to find out more about how feasible it would be.&lt;/p&gt;

&lt;p&gt;Option number 3 would be to have a CI pipeline such that you don't ever commit changes to a branch that others can touch until the CI system has had a chance to run tests against your commit. Instead, you would always be commiting changes to a private branch. The CI system would detect your commit, run a build, and then merge your changes into a shared branch if and only if your commit passed muster. I don't think this would prevent commits in the middle of a batch of commits being pushed to your private branch from bein un-tested, but it would prevent the system ever getting into a state where the shared head is untested. This is an idea I'm planning to blog about more at some point in the future.&lt;/p&gt;

&lt;p&gt;In conclusion, while I find myself sometimes taking advantage of this powerful feature of git, I always feel a little nervous doing so, and try and take extra care.
&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/6453696039626648878/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=6453696039626648878' title='4 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/6453696039626648878'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/6453696039626648878'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/02/partial-commits-with-git.html' title='Partial commits with git'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>4</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-611559591925337451</id><published>2010-01-31T18:13:00.001-08:00</published><updated>2010-02-23T12:53:50.721-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><title type='text'>an inverted include? for ruby</title><content type='html'>&lt;p&gt;I've always found it a slightly hard to read ruby which uses Enumerable#include?(), especially when the Enumerable your testing against is a literal or a constant. For example, let's say you're checking an input parameter to guard against invalid input. You might write something like:&lt;/p&gt;

&lt;pre class="brush: ruby; gutter: false"&gt;
unless VALID_COMMANDS.include?( command_param )
  whine_to_user()
  return
end
&lt;/pre&gt;

&lt;p&gt;This makes sense, but it seems backwards to me. I don't care whether some array has a value in it so much as I care whether a value is in some array. Obviously that's just two ways of saying the same thing, but the latter seems to capture the intent much more to me. I think it would be easier to understand this:&lt;/p&gt;

&lt;pre class="brush: ruby; gutter: false"&gt;
unless command_param.in?( VALID_COMMANDS )
  whine_to_user()
  return
end
&lt;/pre&gt;

&lt;p&gt;This evening it (finally) dawned on me that this would be ridiculously trivial to implement:&lt;/p&gt;

&lt;pre class="brush: ruby; gutter: false"&gt;
class Object
  def in?( enumerable )
    enumerable.include?(self)
  end
end
&lt;/pre&gt;

&lt;p&gt;In fact, this was such a trivial fix that I'm now left wondering (a) whether this is already in ActiveSupport or Facets or whatever and I just haven't found it yet and (b) whether there's some huge flaw in this that I'm not spotting...&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/611559591925337451/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=611559591925337451' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/611559591925337451'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/611559591925337451'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/01/inverted-include-for-ruby.html' title='an inverted include? for ruby'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-4086252390215644490</id><published>2010-01-17T14:08:00.000-08:00</published><updated>2010-02-23T12:54:29.992-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='flex'/><category scheme='http://www.blogger.com/atom/ns#' term='patterns'/><title type='text'>Flex Patterns: Presentation Adapter</title><content type='html'>&lt;h1&gt;Flex Patterns: Presentation Adapter&lt;/h1&gt;

&lt;a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_rzQrByr0AIg/S1aRKN1ceHI/AAAAAAAAFC0/G7CLFQUloUM/s1600-h/Presentation+Adapter+%28Abstract%29+Class+Diagram.png"&gt;&lt;img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 360px; height: 277px;" src="http://1.bp.blogspot.com/_rzQrByr0AIg/S1aRKN1ceHI/AAAAAAAAFC0/G7CLFQUloUM/s400/Presentation+Adapter+%28Abstract%29+Class+Diagram.png" alt="" id="BLOGGER_PHOTO_ID_5428686005540255858" border="0" /&gt;&lt;/a&gt;

Encapsulate the logic for presenting a domain object, and provide an object for skinny views to perform data-binding against.

&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;When using &lt;a href="http://sl.thepete.net/presentation-model-pattern"&gt;Presentation Model&lt;/a&gt; our goal is to bind UI elements in your Skinny View directly to individual components of  the Presentation Model. This requires translating information in Domain Model instances into a presentation-specific form. At the same time we need to be able to map back from that presentation-specific form to the underlying domain model instance in order to present user interactions in terms of our domain model.&lt;/p&gt;

&lt;h2&gt;Context&lt;/h2&gt;
&lt;p&gt;We are developing a UI component in a Flex application using some form of MVC/MVP. This UI component will be displaying information about a domain object, e.g. a list of Users. We are using the &lt;a href="http://sl.thepete.net/presentation-model-pattern"&gt;Presentation Model&lt;/a&gt; pattern or similar, so we want Skinny Views.&lt;/p&gt;

&lt;h2&gt;Forces&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We need to transform information from a Domain Model class into something  suitable for display&lt;/li&gt;
&lt;li&gt;We want to keep formatting logic out of the view, using Flex databinding from view controls to a &lt;a href="http://sl.thepete.net/presentation-model-pattern"&gt;Presentation Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We want to keep formatting logic out of the Domain Model, because it's presentation-specific, and not the responsibility of the domain model.&lt;/li&gt;
&lt;li&gt;Clients of our UI component expect to interact with it using instances of the Domain Model class. For example, clients should be able to pass in a list of Domain Model instances to display, and the UI component should publish events which refer to Domain Model instances.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;We can use a Presentation Adapter (PA) to wrap a domain object (an instance of a Domain Model class). The PA provides a presentation-specific formatting of some or all of the information represented by that domain object. The PA also exposes a reference to the domain object itself. This allows UI component code to map from the PA back to the domain object is represents when reporting user interactions back out to clients of the UI component.&lt;/p&gt;

&lt;h2&gt;Example&lt;/h2&gt;

&lt;a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_rzQrByr0AIg/S1aR5lC0FtI/AAAAAAAAFC8/v5ihUbTWMNU/s1600-h/Presentation+Adapter+Class+Diagram.png"&gt;&lt;img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 267px;" src="http://3.bp.blogspot.com/_rzQrByr0AIg/S1aR5lC0FtI/AAAAAAAAFC8/v5ihUbTWMNU/s400/Presentation+Adapter+Class+Diagram.png" alt="" id="BLOGGER_PHOTO_ID_5428686819224196818" border="0" /&gt;&lt;/a&gt;

&lt;p&gt;Let's say we are creating a Post Listing component which lists a collection of blog posts, and allows the user to select specific posts from that list. Our Presentation Model needs to include a collection of posts to list, and our View will contain some kind of list control which will be bound directly to that collection of posts. We want each post to be listed in the UI using a specific format, which will include the post title and the number of comments associated with the post. The application's Domain Model contains a BlogPost class, and our component is expected to expose an interface which talks in terms with BlogPost instances. The client of the Post Listing component will supply a collection of BlogPost instances which it wishes to be displayed in the list. When a user selects a post the component's client expects to receive a 'post selected' event which includes the BlogPost instance that was selected by the user. In other words, the client does not need to know anything about the Presentation Adapter we will be using.&lt;/p&gt;

&lt;p&gt;We'll create a PostPA class which will act as a Presentation Adapter for the listing. It will expose a label field. The Presentation Model can hold a list of these PostPAs (one for each BlogPost supplied to the Post Listing component), and the View's list control can be bound directly to that list of PostPA instances.&lt;/p&gt;

&lt;p&gt;We also need some simple formatting logic which transforms a BlogPost instance into the appropriately formatted string which will eventually be shown in the list control. That formatting logic should live within the Post Listing component, as it's presentation-specific. In fact it's likely that the formatting is specific to this particular UI component. The Presentation Adapter is a good place to put this formatting logic (although there are alternatives which I'll see below in the Variants section).&lt;/p&gt;

&lt;pre class="brush: as3; gutter: false"&gt;
public class PostPA
{
 private var _post:BlogPost;
 
 public function PostPA( post:BlogPost )
 {
  _post = post;
 }
 
 public function get label():String
 {
  return _post.title + " ["+ post.comments.length+" comments]";
 }
 
 public function get post():Post
 {
  return _post;
 }

}
&lt;/pre&gt;

&lt;p&gt;We also need to map from BlogPost instances to PostPA instances, and vice versa. We'll put that logic in our Presentation Model. core UI logic can supply the Presentation Model with a collection of BlogPost instances, and the view will be updated with a list of corresponding PostPA instances. &lt;/p&gt;

&lt;pre class="brush: as3; gutter: false"&gt;
public class Model extends EventDispatcher
{
 function Model(){
  _postPAs = [];
  _selectedPostIndex = -1;
 }
 
 private var _selectedPostIndex:int;
 private var _postPAs:Array;
 
 public function get selectedPost():Post
 {
  if( _selectedPostIndex &lt; 0 )
   return null;
  else
   return _postPAs[_selectedPostIndex].post;
 }
 
 public function set selectedPostIndex(index:int):void
 {
  _selectedPostIndex = index;
 }
   
 public function set posts(posts:Array):void
 {
  _selectedPostIndex = -1;
  _postPAs = posts.map( function( post:Post, i:int, a:Array ):PostPA {
   return new PostPA(post);
  });
  dispatchEvent(new Event("postPAsChange"));
 } 
 
 public function get posts():Array
 {
  return _postPAs.map( function( postPA:PostPA, i:int, a:Array ):Post {
   return postPA.post;
  });
 }
 
 [Bindable (event="postPAsChange")]
 public function get postPAs():Array{ return _postPAs; }
 
}
&lt;/pre&gt;

&lt;p&gt;Our Post Listing component needs to send an event whenever a user selects a post, and that event needs to reference the BlogPost instance that was selected. To that end, the Presentation Model also exposes methods which allow the view to update the selected post based just on a list index, while the core UI logic can ask for the underlying BlogPost instance which was selected. Now, when the list control sends an event saying an item has been selected the View can update the Presentation Model appropriately and then signal the core UI logic. That logic can then ask the Presentation Model for the selected BlogPost, and dispatch a 'post selected' event, including that BlogPost instance in the event.&lt;/p&gt;

&lt;a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://4.bp.blogspot.com/_rzQrByr0AIg/S1dV6uTYa1I/AAAAAAAAFDE/NokaPL0RP-M/s1600-h/Presentation+Adapter+Item+Selection+Interaction+Diagram.png"&gt;&lt;img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer;" src="http://4.bp.blogspot.com/_rzQrByr0AIg/S1dV6uTYa1I/AAAAAAAAFDE/NokaPL0RP-M/s400/Presentation+Adapter+Item+Selection+Interaction+Diagram.png" alt="" id="BLOGGER_PHOTO_ID_5428902343168518994" border="0" /&gt;&lt;/a&gt;

&lt;h2&gt;Variants&lt;/h2&gt;

&lt;p&gt;The decision on where and when the presentation formatting logic is done defines several variants on this pattern.&lt;/p&gt;

&lt;h3&gt;Dynamic Presentation Adapter&lt;/h3&gt;
Presentation formatting logic lives in the PA class, and the formatting is performed on-the-fly as the view requires it.
&lt;h3&gt;Static Presentation Adapter&lt;/h3&gt;
Presentation formatting logic still lives in the PA class, but the formatting is done at construction time. Depending on usage patterns this could be more or less performant than the Dynamic Presentation Adapter variant.
&lt;h3&gt;Dumb Presentation Adapter&lt;/h3&gt;
Presentation formatting logic lives within the Presentation Model which is creating the Presentation Adapter. In this case the Presentation Adapter itself becomes a simple value object with no logic, or even just a dynamically created object.

&lt;h2&gt;Related Patterns&lt;/h2&gt;
&lt;p&gt;Generally a Presentation Adapter will be used in the context of a Presentation Model, where the Presentation Model contains instances of one or more Presentation Adapters (collections or otherwise). A Presentation Adapter is a specific form of the GoF's Adapter Pattern.&lt;/p&gt;

&lt;h2&gt;Alternative Patterns&lt;/h2&gt;
&lt;p&gt;Instead of a Presentation Adapter one could use a Transformer/Mapper, where a single Mapper instance performs the presentation-specific formatting for a whole class of domain objects. This Mapper is attached to the UI control as part of the binding mechanism, and does the formatting on the fly. The Mapper could be a simple Function, or an instance of a specialized Mapper class.&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/4086252390215644490/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=4086252390215644490' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/4086252390215644490'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/4086252390215644490'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/01/flex-patterns-presentation-adapter.html' title='Flex Patterns: Presentation Adapter'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://1.bp.blogspot.com/_rzQrByr0AIg/S1aRKN1ceHI/AAAAAAAAFC0/G7CLFQUloUM/s72-c/Presentation+Adapter+%28Abstract%29+Class+Diagram.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-3145784736651982891</id><published>2009-11-17T15:33:00.001-08:00</published><updated>2010-02-23T12:55:18.995-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='git'/><title type='text'>How much code did I just delete?</title><content type='html'>Today I had the great pleasure of deleting a huge chunk of old code from my application. Using git it's surprisingly easy to figure out exactly how much code:

&lt;pre&gt; 
git checkout -b deletion_task

# ... delete lots of code...
# ... time passes...

git add -i
git commit
git co master
FILES_DELETED=`git diff --summary master deletion_task | grep "^ delete" | wc -l`
LINES_DELETED=`git diff --summary master deletion_task | grep "^ delete" | awk '{ print $4 }' | xargs cat | wc -l`
echo -e "$FILES_DELETED files deleted.\n$LINES_DELETED lines deleted."
&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/3145784736651982891/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=3145784736651982891' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/3145784736651982891'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/3145784736651982891'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2009/11/how-much-code-did-i-just-delete.html' title='How much code did I just delete?'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-3416131971213334775</id><published>2009-11-16T20:28:00.000-08:00</published><updated>2010-02-23T12:54:44.725-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><title type='text'>Introducing Gimme: a lightweight ruby Registry</title><content type='html'>I recently created &lt;a href="http://github.com/moredip/gimme"&gt;Gimme&lt;/a&gt;, a small ruby gem which allows you to configure and access a simple &lt;a href="http://martinfowler.com/eaaCatalog/registry.html"&gt;Registry&lt;/a&gt; using a nice little DSL. 

&lt;h1&gt;Gimme in a paragraph&lt;/h1&gt;

The general idea of Gimme is to allow a single point for configuring the well known services which your application uses (think DB connection, twitter API gateway, email server, etc). Once configured Gimme then exposes a single point to access those services, without needing to resort to singletons or global variables.

&lt;h1&gt;Show me teh codez&lt;/h1&gt;
Here's a simple example showing how you would configure your registry:

&lt;pre class="brush: ruby; gutter: false"&gt;
Gimme.configure |g|
  g.for_the(ExternalService) do |env,name|
    ExternalService.new(env[:setting1],env[:setting2])
  end
end
&lt;/pre&gt;

and here's how you'd use it from within your app:

&lt;pre class="brush: ruby; gutter: false"&gt;
Gimme.the(ExternalService).some_method
&lt;/pre&gt;

Here's a more complete example, showing both configuration and usage:

&lt;pre class="brush: ruby; gutter: false"&gt;
# your Emailer class

class Emailer
  def initialize( smtp_hostname, port )
    @smtp_hostname, @port = smtp_hostname, port
    puts "creating an emailer: #{inspect}"
  end

  def send_email( subject )
    puts "Sending email '#{subject}' via #{inspect}"
    # ...
  end

  def inspect
    "#{@smtp_hostname}:#{@port}"
  end
end


# your Gimme configuration

Gimme.configure do |g|
  g.for_the( Emailer ) do |env|
    email_settings = env[:email_settings]
    Emailer.new(email_settings[:hostname],email_settings[:port])
  end
end

Gimme.environment = {:email_settings =&gt; {:hostname =&gt; 'smtp.mymailserver.com', :port =&gt; '2525'} }



# in your app


Gimme.the(Emailer).send_email( "Gimme is the awesomez" )
Gimme.the(Emailer).send_email( "Emailing is fun" )
Gimme.the(Emailer).send_email( "notice that only one Emailer was created above" )
Gimme.the(Emailer).send_email( "even though we sent 4 emails" )
&lt;/pre&gt;

&lt;h1&gt;Pseudo-singletons&lt;/h1&gt;
If you use the Gimme#for_the(Service) form when configuring Gimme then gimme will only create one instance of that object. If you use the Gimme#for_a(Service) form then the creation block will be called each time you ask for an instance of that object. That way things which hold on to expensive resources (database connections, TCP sockets) can be shared within your app, which services which need to maintain unique state for each client can be private to each client.

&lt;h1&gt;Environments&lt;/h1&gt;
In any non-trivial application you need to configure your services. You can supply Gimme with an environment hash which it will then pass to your creation blocks whenever you ask for an object. This allows you to store settings like smtp hostnames, database passwords, twitter API keys, etc in a single environment hash, and use that hash in one place to configure all your external services at the point they are created.

&lt;h1&gt;Dependency Injection/IoC&lt;/h1&gt;
There is nothing to stop you from calling Gimme.a() or Gimme.the() from within a creation block. This allows you to use Gimme as a lightweight IoC container.

&lt;h1&gt;Check it out!&lt;/h1&gt;
Check out &lt;a href="http://github.com/moredip/gimme"&gt;the github page&lt;/a&gt; for more info, including lots of example usages, and a more detailed README.</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/3416131971213334775/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=3416131971213334775' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/3416131971213334775'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/3416131971213334775'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2009/11/introducing-gimme-lightweight-ruby.html' title='Introducing Gimme: a lightweight ruby Registry'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-147865095072599125</id><published>2009-06-28T16:50:00.000-07:00</published><updated>2010-02-23T12:54:29.993-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='flex'/><title type='text'>Adding hamcrest-as matchers to mock4as</title><content type='html'>&lt;p&gt;Just a quick post to mention that I recently did an experiment with extending mock4as to use &lt;a href="http://drewbourne.github.com/"&gt;Drew Bourne&lt;/a&gt;'s awesome &lt;a href="http://github.com/drewbourne/hamcrest-as3"&gt;hamcrest-as3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The idea for this work is to specify mocked method arguments in a more flexible way. It was actually surprisingly trivial to implement. I'll be writing a more detailed post in the future explaining what these changes mean to a user of mock4as.
&lt;/p&gt;&lt;p&gt;I also took the opportunity to experiment with using git and github, so the changes are available to all and sundry as a &lt;a href="http://github.com/moredip/mock4as"&gt;github repository&lt;/a&gt;. I will be talking to the mock4as guys about getting my changes merged into the &lt;a href="http://code.google.com/p/mock4as/"&gt;official mock4as codebase&lt;/a&gt;
&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/147865095072599125/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=147865095072599125' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/147865095072599125'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/147865095072599125'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2009/06/adding-hamcrest-as-matchers-to-mock4as.html' title='Adding hamcrest-as matchers to mock4as'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-531310171757405509</id><published>2009-06-14T18:32:00.000-07:00</published><updated>2010-02-23T12:54:29.993-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='flex'/><category scheme='http://www.blogger.com/atom/ns#' term='patterns'/><title type='text'>Presentation Model Pattern</title><content type='html'>&lt;h1&gt;Presentation Model&lt;/h1&gt;

&lt;p&gt;We want to achieve a Skinny View without the View needing to expose UI details to the Controller.&lt;/p&gt;

&lt;a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_rzQrByr0AIg/SjsXodNSTaI/AAAAAAAADaM/e6empQbFDig/s1600-h/Presentation+Model+Class+Diagram.png"&gt;&lt;img style="display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 400px; height: 318px;" src="http://1.bp.blogspot.com/_rzQrByr0AIg/SjsXodNSTaI/AAAAAAAADaM/e6empQbFDig/s400/Presentation+Model+Class+Diagram.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5348894966235155874" /&gt;&lt;/a&gt;

&lt;h2&gt;Also known as&lt;/h2&gt;
&lt;p&gt;View State, Logical View&lt;/p&gt;

&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;We want to have as much presentation logic under test as we can by having a Skinny View. At the same time we don't want our Controller to be burdened with the minutiae of maintaining UI elements.&lt;/p&gt;

&lt;h2&gt;Context&lt;/h2&gt;
&lt;p&gt;We are creating a presentation layer in Flex using some variant of MVC/MVP and want to implement controller logic which modifies the view. &lt;/p&gt;

&lt;h2&gt;Forces&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Exposing individual UI elements to our controller makes tests fragile and tedious to write.&lt;/li&gt;
&lt;li&gt;Burdening our controller with both abstract presentation logic (what to do when a user clicks a button) and concrete UI display logic (directly modifying the state of UI elements) violates &lt;a href="http://www.objectmentor.com/resources/articles/srp.pdf"&gt;SRP&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We want to take advantage of the powerful data binding functionality that Flex offers.&lt;/li&gt;
&lt;li&gt;We do not want our Domain/Business logic to be polluted with UI layer details.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Solution&lt;/h2&gt;

&lt;p&gt;We create a Presentation Model that is a logical representation of the view. The controller maintains the view by manipulating the Presentation Model. We bind our view directly to the Presentation Model, so any changes to the Presentation Model are immediately reflected in the view.&lt;/p&gt;

&lt;p&gt;To keep as much logic as possible out of the View and under test we advise not allowing the View to update the model directly. All updating must be done by the Controller. Often that will be initiated via a handler on the Controller called by the view in response to some user action.&lt;/p&gt;

&lt;h2&gt;Example&lt;/h2&gt;

&lt;p&gt;In this very simple example we will assume we're working on a Contact Manager application. Specifically we're working on a UI which contains a list of contacts and allows a user to add contacts to the list. &lt;/p&gt;

&lt;h3&gt;Presentation Model&lt;/h3&gt;
&lt;p&gt;We'll create a Presentation Model for that screen like this:&lt;/p&gt;
&lt;pre class="brush: as3; gutter: false"&gt;
package com.example.contacts.ui
{
 import mx.collections.ArrayCollection;
 
 
 [Bindable]
 public class Model
 {
  public function Model()
  {
   names = new ArrayCollection();
  }
  
  public var names:ArrayCollection;
 }
}
&lt;/pre&gt;

&lt;h3&gt;View&lt;/h3&gt;
&lt;p&gt;Next we'll create a view which binds to that Presentation Model:&lt;/p&gt;

&lt;pre class="brush: xml; gutter: false"&gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;

&amp;lt;mx:Canvas xmlns:mx=&amp;quot;http://www.adobe.com/2006/mxml&amp;quot; 
 width=&amp;quot;600&amp;quot; height=&amp;quot;600&amp;quot; 
 implements=&amp;quot;com.example.contacts.ui.IView&amp;quot; 
 creationComplete=&amp;quot;onCreationComplete()&amp;quot;&amp;gt;
 &amp;lt;mx:HBox&amp;gt;

  &amp;lt;mx:VBox&amp;gt;
   &amp;lt;mx:Form height=&amp;quot;100%&amp;quot; width=&amp;quot;100%&amp;quot;&amp;gt;
   &amp;lt;mx:FormItem label=&amp;quot;First Name:&amp;quot;&amp;gt;
    &amp;lt;mx:TextInput id=&amp;quot;tiFirstName&amp;quot;/&amp;gt;

   &amp;lt;/mx:FormItem&amp;gt;
   &amp;lt;mx:FormItem label=&amp;quot;Last Name:&amp;quot;&amp;gt;
    &amp;lt;mx:TextInput id=&amp;quot;tiLastName&amp;quot;/&amp;gt;
   &amp;lt;/mx:FormItem&amp;gt;
   &amp;lt;mx:Button label=&amp;quot;Add Contact&amp;quot; click=&amp;quot;onAddContactClick()&amp;quot;/&amp;gt;

  &amp;lt;/mx:Form&amp;gt;
  &amp;lt;/mx:VBox&amp;gt;
  &amp;lt;mx:VBox&amp;gt;
   &amp;lt;mx:List id=&amp;quot;cbNames&amp;quot; dataProvider=&amp;quot;{_model.names}&amp;quot; /&amp;gt;

  &amp;lt;/mx:VBox&amp;gt;
 &amp;lt;/mx:HBox&amp;gt;

&amp;lt;mx:Script&amp;gt;
 &amp;lt;![CDATA[
  import com.example.contacts.*;
  
  private var _controller:Controller = null;
  
  [Bindable]
  private var _model:Model = null;
  public function set model( value :Model ):void {
   _model = value;
  } 

  private function onAddContactClick():void {
   _controller.onAddName( tiFirstName.text, tiLastName.text );
  }
 
  public function clearNameInputFields():void {
   tiFirstName.text = '';
   tiLastName.text = '';
  }
 ]]&amp;gt;
&amp;lt;/mx:Script&amp;gt;
&amp;lt;/mx:Canvas&amp;gt;
&lt;/pre&gt;


&lt;h3&gt;Controller&lt;/h3&gt;
&lt;p&gt;Finally we'll implement our Controller:&lt;/p&gt;

&lt;pre class="brush: as3; gutter: false"&gt;
package com.example.contacts.ui
{ 
 public class Controller
 {
  private var _model: Model;
  private var _view : IView;

  public function Controller() {
   _model = new Model();
   _view = null;
  }
  
  internal function bindView(view: IView): void {
   _view = view;
   _view.model = _model;
  }
  
  internal function onAddName( firstName:String, lastName:String ):void {
   _model.names.addItem( lastName + ", " + firstName );   
  }
 }
}
&lt;/pre&gt;

&lt;h3&gt;Communication Diagram&lt;/h3&gt;
&lt;a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_rzQrByr0AIg/SjscZvLLGiI/AAAAAAAADaU/pQ3bl_Sr1eE/s1600-h/Presentation+Model+Sequence+Diagram.png"&gt;&lt;img style="display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 400px; height: 296px;" src="http://3.bp.blogspot.com/_rzQrByr0AIg/SjscZvLLGiI/AAAAAAAADaU/pQ3bl_Sr1eE/s400/Presentation+Model+Sequence+Diagram.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5348900210918234658" /&gt;&lt;/a&gt;

&lt;p&gt;The communication diagram above shows how the three classes collaborate to handle a user interaction event. The user takes an action, which results in an event handler in the View being called. The View's event handler delegates immediately to a handler method in the Controller. The Controller's handler method performs whatever logic is necessary, including updating the Presentation Model. That update indirectly triggers Flex data binding to update the View's UI elements. Note that communication tends to travel in one direction here - From View out to Controller, from Controller to Presentation Model, and from Presentation Model back to View. It is rare for a Controller to communicate directly with its View, and it is expressly forbidden for a View to directly manipulate the Presentation Model.&lt;/p&gt;

&lt;p&gt;Note that the View is very skinny - it mostly just binds to the model and delegates handlers straight through to the Controller. Also note that the controller doesn't interact directly with the View when manipulating the UI. It just manipulates the Presentation Model, which results in the UI updating thanks to the View's data binding.&lt;/p&gt;

&lt;p&gt;You can also see that we didn't follow the Pattern dogmatically in this example. We could have pulled the View's clearNameInputFields() method into the Controller by representing the contents of those 2 input fields in the Presentation Model and then binding those to the view. That would then allow us to clear the input fields by clearing the corresponding Presentation Model properties. However, in this case I decided that it was a nicer separation of concerns to hide the details of those elements from the Controller and the Presentation Model. Instead the View exposes a simple method with an &lt;a href="http://c2.com/cgi-bin/wiki?IntentionRevealingNames"&gt;Intention Revealing Name&lt;/a&gt;. This removes the need for the Presentation Model to be cluttered with these elements just to serve the one operation of clearing the fields.&lt;/p&gt;

&lt;p&gt;This is a very basic example, but hopefully it conveys the concept. For a more sophisticated UI the View would have additional UI elements which would be bound to additional properties added into the Presentation Model.&lt;/p&gt;


&lt;h2&gt;Resulting Context&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It is extremely easy to test how our Controller is modifying our View.&lt;/li&gt;
&lt;li&gt;Our View no longer has to expose its UI elements.&lt;/li&gt;
&lt;li&gt;Our Controller no longer has to deal with the View's UI elements.&lt;/li&gt;
&lt;li&gt;Data binding allows our View to contain very little logic related to updating UI elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Rationale&lt;/h2&gt;
&lt;p&gt;It is really powerful to take advantage of data binding in Flex in order to simplify your view logic. At the same time it doesn't make sense to bind directly to our domain model classes. These classes are focused on representing the relationships and rules of our business domain, and should not be concerned with the UI layer at all. We need to map domain concepts like 'Collection Of Users' to UI concepts like 'list of strings for a dropdown'. Presentation Model allows us to do that. Presentation Model also allows us to very easily test the way our Controller updates the UI. Our tests simply have to exercise the Controller logic that is under test and then check the state of the Presentation Model.&lt;/p&gt;

&lt;h2&gt;Related Patterns&lt;/h2&gt;
&lt;p&gt;Presentation Model is really just a twist on Fowler's &lt;a href="http://martinfowler.com/eaaCatalog/twoStepView.html"&gt;Two Step View&lt;/a&gt;, focusing on MVC/MVP and with a consideration of Flex data binding.&lt;/p&gt;

&lt;h2&gt;Authors&lt;/h2&gt;
&lt;p&gt;Pete Hodgson, Hosung Hwang&lt;/p&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/531310171757405509/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=531310171757405509' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/531310171757405509'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/531310171757405509'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2009/06/presentation-model-pattern.html' title='Presentation Model Pattern'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://1.bp.blogspot.com/_rzQrByr0AIg/SjsXodNSTaI/AAAAAAAADaM/e6empQbFDig/s72-c/Presentation+Model+Class+Diagram.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-8354599685551472510</id><published>2009-04-19T16:51:00.000-07:00</published><updated>2009-05-09T17:36:30.953-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>REST: 'There aren't enough verbs'</title><content type='html'>I think one of the more frequent issues that people have when starting to work with a RESTful architecture is that "there aren't enough verbs".

&lt;h4&gt;Why having few verbs is good&lt;/h4&gt;
When we look at the big picture we see that this paucity of verbs is in fact one of the strengths of REST. A small, standard set of verbs allows all parties to agree (in the most part) on what the semantics of those verbs are. This in turn allows the creation of a lot of loosely coupled infrastructure which &lt;span style="font-style:italic;"&gt;any&lt;/span&gt; REST system can take advantage of. An obvious example is the sophisticated caching system within the world wide web. All parties can agree on what a GET means, specifically that it's an idempotent operation. That allows intermediaries to know when a response is cachable. If each application was creating its own set of verbs we'd no longer be able to leverage all this 'free' infrastructure which has built up. If a cache somewhere between your user's browser and your data center doesn't understand what the semantics of some custom verb are then it can't safely cache your responses. Same goes for your user's browser. This is one of the reasons why RESTful folks don't like web services with RPC-style architectures. By tunnelling everything through POST and a single URI these services lose the ability to confer semantics to intermediaries. These kinds of services are on the web, but not &lt;span style="font-style:italic;"&gt;of&lt;/span&gt; the web.&lt;br/&gt;&lt;br/&gt;

&lt;h4&gt;What to do when you 'need' more verbs&lt;/h4&gt;
So, we are agreed that a small, standard set of verbs is a good thing. What then is an API designer to do when modeling a complex operation which doesn't map nicely onto that small set? In my experience there are generally two solutions. We can use an overloaded POST, or we can add some additional 'activity resources' to the resource space of the API. I tend to prefer the latter, but I think it's important to not be dogmatic about this. There are certainly situations where an overloaded POST is the way to go.&lt;br/&gt;&lt;br/&gt;

Let's discuss what I mean by 'activity resources'. Generally when people start designing the resource space for their RESTful API they might write a description of what functionality the API seeks to expose, and then go through the text underlining nouns. If this is reminding you of an analysis technique for a certain other paradigm then stick with me, I'll be coming back to that in the next section. This set of nouns would generally be a good starting point for identifying resources. I'll call these types of resources Entity Resources. Let's say we're working on a hotel reservation system. After this initial stage of analysis we might come up with a set of entity resources such as Guest, Room, Hotel, Bill, etc. We'd probably also have Reservation in there too, but I wouldn't classify that one as an entity. So far so good. Now, let's say we're working on the checkout part of the system, in particular on credit card processing. We need a way to represent the act of a Guest paying their Bill with a credit card, having that credit card transaction approved or declined, etc. A lot of developers (particularly those coming from an RPC mindset) will want to do something like add a PAY verb to the Bill resource. This makes sense. Paying is an action that is applied to the Bill. It makes sense, but as we've discussed above REST frowns upon extending our small set of verbs. So instead we can create an Activity Resource called Payment. This resource can contain a reference (in the form of a uri) to the Bill it is a Payment for, along with details like credit card number, etc. In addition we can add a Payments resource which belongs to each Bill. When a customer wants to pay a bill they can send a POST to the Payments resource, supplying a representation of the payment they want to make. That POST will create a Payment resource representing the transaction, and supply the user with a uri for that resource in the form of a redirect. The customer can GET on that resource to check on the state of the payment transaction (Processing,Successful,Denied), etc. Maybe if the payment was denied they could PUT to the resource with a corrected credit card number. The key pattern here was to take an action (paying a bill), and to model that as a transitory Activity resource. Adding that extra level allows us to model the behavior in a RESTful way. I've frequently seen transactions modeled RESTfully in this way.&lt;br/&gt;&lt;br/&gt;

&lt;h4&gt;Sidebar: Parallels in grokking REST and grokking OO&lt;/h4&gt;
When I was going through the slow, laborious process of getting these ideas into my thick skull I experienced a vague feeling of déjà vu. I eventually realized that this was just like when I first started to really grok object-oriented design. Often when students are being taught to design object oriented systems a suggested technique is to write a description of the business domain and then underline the nouns in the description. These nouns will be the classes in your system. However, after gaining experience with OO I think most developers realize that these classes are not where the meat of a design lies. The meat lies in the interaction between these entities, how they are composed and how they interact. Using polymorphism and composition to create clean, loosely-coupled systems becomes much more interesting than designing the Is-A inheritance heirarchies that often appear in introductions to OO. And here lies the parallel with learning RESTful design, and my sense of déjà vu. When learning REST the core concepts of Resources, Actions, Uris, etc. are necessarily explained first, and most pedagogical examples focus on simple systems consisting of what I referred to above as Entity Resources. However when you start to do real work with a RESTful architecture you start realizing that large parts of the system are about modeling the relations and interactions &lt;span style="font-style:italic;"&gt;between&lt;/span&gt; these Entity Resources. I expect that as we gain more experience with the REST style then the common problems and shared solutions will start to emerge, in the same way as we saw OO design mature in the 80s and 90s.</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/8354599685551472510/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=8354599685551472510' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/8354599685551472510'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/8354599685551472510'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2009/04/rest-there-arent-enough-verbs.html' title='REST: &apos;There aren&apos;t enough verbs&apos;'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-2922821942331614999</id><published>2009-04-02T09:44:00.000-07:00</published><updated>2010-02-23T12:54:29.993-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='flex'/><title type='text'>mock.willExecute(...) in mock4as</title><content type='html'>As I mentioned in a &lt;a href="http://blog.thepete.net/2009/03/liberal-mocks.html"&gt;previous post&lt;/a&gt; I've recently been adding some features to &lt;a href="http://code.google.com/p/mock4as/"&gt;mock4as&lt;/a&gt;, a mocking library for ActionScript. In this post I'm going to talk about the new mock.willExecute(...) feature which I recently implemented.&lt;br/&gt;&lt;br/&gt;

Perhaps the easiest way to describe willExecute is as a dynamic version of willReturn, so before we dive into willExecute I should briefly explain willReturn. willReturn allows a user to specify what value a mocked out method should return when called. An example should shed some light:

&lt;pre class="brush: as3; gutter: false"&gt;
var mock:MockInterface = new MockInterface();
mock.expects('lookupBookTitleByISBN').withAnyArgs().willReturn('War and Peace');
assertEquals( 'War and Peace', mock.lookupBookTitleByISBN() );
&lt;/pre&gt;

You can see that when we call the method mock.lookupBookTitleByISBN() it returns 'War and Peace', because that's what we specified in our expectation. This is a fundamental feature that I would expect any mocking system to supply. It's the primary tool for controlling the indirect inputs into the system that your testing. That said, newcomers to mocking do sometimes get confused with this feature and think that willReturn is specifying what you &lt;span style="font-style: italic;"&gt;expect&lt;/span&gt; the method to return. That's not what we're doing here, we're &lt;span style="font-style: italic;"&gt;instructing&lt;/span&gt; the mock what to return. We're providing indirect input, not testing indirect output (the other main purpose of mocking). I suspect that adding a new method to mock4as which is similar mock.expects(...) but intended for use in cases where you just mocking the method to control indirect input would be helpful. Something like mock.ifCalled('foo').willReturn(someResult) might clear up some of the confusion between specifying an expectation that a method is called and injecting a return value for a method.&lt;br/&gt;&lt;br/&gt;

Anyway, back to the subject at hand. The willExecute feature takes the concept of willReturn and makes it dynamic. Rather than specifying a hard-coded value to be returned whenever the method is called you instead supply an arbitrary function which will be &lt;span style="font-style: italic;"&gt;executed&lt;/span&gt; whenever the specified method on the mock is called. For example:

&lt;pre class="brush: as3; gutter: false"&gt;
var mock:MockInterface = new MockInterface();
mock.expects('lookupBookTitleByISBN').willExecute(
  function( isbn:String ):String{
    return "Title for isbn " + isbn;
  } );

assertEquals( 'Title for isbn ABC', mock.lookupBookTitleByISBN('ABC') );
assertEquals( 'Title for isbn XYZ', mock.lookupBookTitleByISBN('XYZ') );

&lt;/pre&gt;
Every time lookupBookTitleByISBN(...) is called the mocking system looks up and executes the attached function, passing in the arguments supplied to lookupBookTitleByISBN(...). In addition it returns whatever value was returned by the attached function. Note from our example that this allows output to vary with the input, because we have supplied a function rather than a static value.&lt;br/&gt;&lt;br/&gt;

The real fun starts when we realize that functions in actionscript can act as &lt;a href="http://martinfowler.com/bliki/Closure.html"&gt;closures&lt;/a&gt;. This leads to a lot of interesting ways to use willExecute. To give one (rather contrived) example, we can use willExecute to specify some quite sophisticated ordering constraints:&lt;br/&gt;&lt;br/&gt;

&lt;pre class="brush: as3; gutter: false"&gt;
public function test_accountsAreSubmittedInAscendingNumericalOrder():void {
  var mock:MockInterface = new MockInterface();

  var lastAccountId:int = -1;
  mock.expects('submitAccount').withAnyArgs().willExecute(
    function(account:account):void {
      assertTrue( account.id() &gt;= lastAccountId );
      lastAccountId = account.id();
    }
  );

  exerciseSystemUnderTestUsing( mock );
}

&lt;/pre&gt;
Note here that we have used &lt;span style="font-weight: bold;"&gt;variables outside of the closure's local scope&lt;/span&gt; to maintain state across calls to the mocked method. Also note that we can call methods like assertTrue(...) from inside the attached function.&lt;br/&gt;&lt;br/&gt;

Some other potential uses of this feature include:&lt;br/&gt;&lt;br/&gt;

&lt;span style="font-weight: bold;"&gt;Verifying arguments passed to a method where the argument is complex:&lt;/span&gt;
Let's say a method takes a &lt;a href="http://www.refactoring.com/catalog/introduceParameterObject.html"&gt;Parameter Object&lt;/a&gt; which is an instance of a class with 10 properties, but we're only interested in three:&lt;br/&gt;&lt;br/&gt;

&lt;pre class="brush: as3; gutter: false"&gt;
public function testXYZCoordinatesAreAllSetToZero():void
{
  var mock:MockSomeInterface = new MockSomeInterface();

  mock.expects('methodWithScaryParams').withAnyArgs().willExecute(
    function(bigObject:ComplexParameterObject):void{
      assertEquals( 0, bigObject.coordX );
      assertEquals( 0, bigObject.coordY );
      assertEquals( 0, bigObject.coordZ );
    }
  );

  exerciseSystemUnderTestUsing(mock);
}

&lt;/pre&gt;
&lt;span style="font-weight: bold;"&gt;Verifying arguments passed to a method with a lot of parameters but where we're only interested in some of the arguments:&lt;/span&gt;

&lt;pre class="brush: as3; gutter: false"&gt;
public function testNameAndAddressAreNotEmpty():void
{
  var mock:MockSomeInterface = new MockSomeInterface();

  mock.expects('methodWithManyParams').withAnyArgs().willExecute(
    function(boring:String,uninteresting:XML,name:String,address:String,dontCare:Function):void{
      assertNotEquals( "", name );
      assertNotEquals( "", address );
    }
  );

  exerciseSystemUnderTestUsing(mock);
}

&lt;/pre&gt;
&lt;span style="font-weight: bold;"&gt;Verifying some internal characteristics of an argument:&lt;/span&gt;

&lt;pre class="brush: as3; gutter: false"&gt;
public function testNameAndAddressAreNotEmpty():void
{
  var mock:MockSomeInterface = new MockSomeInterface();

  mock.expects('someMethod').withAnyArgs().willExecute(
     function(lotsOfXml:XML):void{
      assertEquals( "Dave", lotsOfXml.body.person.firstName );
      assertEquals( "Thomas", lotsOfXml.body.person.lastName );
    }
  );

  exerciseSystemUnderTestUsing(mock);
}

&lt;/pre&gt;
It's interesting to note that willExecute can be used to accomplish two goals. You can use it to control the Indirect Input into the system you're testing (which is what willReturn is also used for, as I touched on above). In addition you can also use it to test the Indirect Outputs of your system. This is what's happening above when assertEquals(...), assertTrue(...) and the like are called from within the attached functions. My personal experience is that something like willExecute tends to be used more often as an ad hoc way of testing Indirect Output than as a way of supplying Indirect Input (which can most time be handled adequately using willReturn). Most of the time I use it to express non-trivial expectations on the input to a method. In a lot of frameworks the need to do this is reduced by the presence of custom argument matchers. These allow you to capture complex expectations on a method's input parameters by implementing classes which you then provide to your mock during the expection setting phase. For examples from other mocking frameworks you could look at &lt;a href="http://www.jmock.org/custom-matchers.html"&gt;jMock&lt;/a&gt; and &lt;a href="http://mockito.googlecode.com/svn/branches/1.7/javadoc/org/mockito/Matchers.html"&gt;Mockito&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;

Finally, you may remember I started off describing willExecute above is as a dynamic version of willReturn. In fact, willReturn could be trivially implemented using willExecute:&lt;br/&gt;&lt;br/&gt;

&lt;pre class="brush: as3; gutter: false"&gt;
public function willReturn(object:Object):void{
  willExecute( function():Object{ return object; } );
}

&lt;/pre&gt;
The same is true of the willThrow() feature (which allows a user to ask a mock to throw a specific exception when a method is called).&lt;br/&gt;&lt;br/&gt;

&lt;pre class="brush: as3; gutter: false"&gt;
public function willThrow(error:Error):void{
  willExecute( function():void{ throw error; } );
}
&lt;/pre&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/2922821942331614999/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=2922821942331614999' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/2922821942331614999'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/2922821942331614999'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2009/04/mockwillexecute-in-mock4as.html' title='mock.willExecute(...) in mock4as'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-2911469701161222948</id><published>2009-04-01T09:32:00.000-07:00</published><updated>2010-02-23T12:54:44.725-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='ruby'/><title type='text'>fun with Symbol#to_proc</title><content type='html'>As I start to get fluent in ruby I often find myself using a more functional programming style, particularly when dealing with collections. That generally leads to lots of little block-centric operations. I recently discovered a really elegant trick to make that code a little nicer.&lt;br/&gt;&lt;br/&gt;

Let's say there's a Person class:

&lt;pre class="brush: ruby; gutter: false"&gt;
class Person
    attr_accessor :first_name, :last_name, :age
end
&lt;/pre&gt;
and I have a collection of people which I'd like to sort by age. An obvious approach would be:

&lt;pre class="brush: ruby; gutter: false"&gt;
people.sort_by{ |person| person.age }
&lt;/pre&gt;

That works, but it is a little wordy. This is ruby, after all! Wouldn't it be nice if we could write this instead:

&lt;pre class="brush: ruby; gutter: false"&gt;
people.sort_by &amp;amp;:age
&lt;/pre&gt;
Isn't that neat? The magic that makes this work is this little &lt;a href="http://en.wikipedia.org/wiki/Monkey_patch"&gt;monkey patch&lt;/a&gt; to the Symbol class.

&lt;pre class="brush: ruby; gutter: false"&gt;
class Symbol
  def to_proc
    Proc.new { |*args| args.shift.__send__(self, *args) }
  end
end
&lt;/pre&gt;

Note that this is already done for you &lt;a href="http://api.rubyonrails.org/classes/Symbol.html"&gt;in Rails&lt;/a&gt; and &lt;a href="http://facets.rubyforge.org/doc/api/core/classes/Symbol.html"&gt;in Facets&lt;/a&gt; - in fact that's where I lifted this code from.&lt;br/&gt;&lt;br/&gt;

So how does this work? When we called sort_by we passed in the :age symbol, but we used the &amp;amp; to indicate that it should be treated as a block. When you supply a method with a block which isn't a Proc instance ruby helpfully attempts to coerce it into a Proc by calling to_proc. Because of the Symbol monkey patch to_proc now returns a block which will invoke a method with the same name as the symbol itself on whatever object it is passed in. Phew. Re-read that last sentence 5 times. The end result is that the following two blocks are identical:

&lt;pre class="brush: ruby; gutter: false"&gt;
block_a = :some_method.to_proc
block_b = proc { |x| x.some_method }
&lt;/pre&gt;

It follows that the following two operations are identical:

&lt;pre class="brush: ruby; gutter: false"&gt;
people.sort_by{ |person| person.age }
people.sort_by &amp;amp;:age
&lt;/pre&gt;

Voila! I should point out here that I'm not exactly the first person to discuss this great trick. See for messirs &lt;a href="http://pragdave.pragprog.com/pragdave/2005/11/symbolto_proc.html"&gt;Thomas&lt;/a&gt; and &lt;a href="http://drnicwilliams.com/2006/09/28/new-magical-version-of-symbolto_proc/"&gt;Williams&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;

In fact, it's such a common idiom that it will &lt;a href="http://www.infoq.com/news/2008/02/to_proc-currying-ruby19"&gt;apparently&lt;/a&gt; be baked right into ruby 1.9.</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/2911469701161222948/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=2911469701161222948' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/2911469701161222948'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/2911469701161222948'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2009/04/fun-with-symboltoproc.html' title='fun with Symbol#to_proc'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-5381770176802482184</id><published>2009-03-23T16:53:00.000-07:00</published><updated>2010-02-23T12:54:29.993-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='flex'/><title type='text'>Liberal Mocks</title><content type='html'>I've been using &lt;a href="http://code.google.com/p/mock4as/"&gt;mock4as&lt;/a&gt; recently as part of a drive to get better test coverage in a flex project. As I used it I noticed  a few features which I've seen in other mocking libraries that were missing. I did what any engineer with an itch to scratch might do in such a situation - I started to implementing the features in mock4as that I wanted to use.&lt;br/&gt;&lt;br/&gt;

One of the things I added was support for a pattern/feature which I'm going to refer to here as 'liberal mocks'. I am not really sure what the right name for this pattern is. I've seen it called 'null object' before, and also 'stubs'. In my opinion both those terms are too overloaded to be used in this context, although the &lt;a href="http://en.wikipedia.org/wiki/Null_Object_pattern"&gt;Null Object&lt;/a&gt; pattern is very similar to what I'll be describing.&lt;br/&gt;&lt;br/&gt;

I definitely wouldn't use the word 'stub' in connection to this pattern, although I've seen that done in other mocking libraries. For a start there is already &lt;a href="http://martinfowler.com/articles/mocksArentStubs.html"&gt;way too much confusion&lt;/a&gt; in automated testing between Stubs and Mocks. For the record, my definition of a Stub is pretty close to what's described in the &lt;a href="http://xunitpatterns.com/index.html"&gt;XUnit Test Patterns&lt;/a&gt; book (which I highly recommend). It's a &lt;a href="http://xunitpatterns.com/Test%20Double.html"&gt;Test Double&lt;/a&gt; which is used to control indirect input into a system under test, and possibly to record indirect output for later verification. That second part is where my definition differs from Meszaros's - I merge &lt;a href="http://xunitpatterns.com/Test%20Stub.html"&gt;Test Stub&lt;/a&gt; and &lt;a href="http://xunitpatterns.com/Test%20Spy.html"&gt;Test Spy&lt;/a&gt; together. Anyway, I'd love to hear from anyone who has a better (or more 'correct') name for the pattern I'm describing.&lt;br/&gt;&lt;br/&gt;

On to the main attraction. A Liberal Mock is a mock which will not fail when it receives an unexpected method. Instead it will silently ignore the method call. Contrast this to a regular, or 'strict' mock. In most mocking libraries a standard mock which receives a method call that was not specified while the mock's expectations were being set will be considered an error, and the mock will not pass verification.&lt;br/&gt;&lt;br/&gt;

A couple of unit tests from the mock4as library's test suite should help to illustrate this:&lt;br/&gt;&lt;br/&gt;

&lt;pre class="brush: as3;gutter: false"&gt;
public function
testFailsIfUnexpectedMethodCalled():void
{
  var mock:MockSomeInterface = new MockSomeInterface();
  mock.doSomething();
  assertFalse(mock.success());
}

public function
testSuccess_whenUnExpectedMethodCalledOnLiberalMock():void
{
  var mock:MockSomeInterface = new MockSomeInterface();
  mock.isLiberal();
  mock.doSomething();
  assertTrue(mock.errorMessage(), mock.success());
}

&lt;/pre&gt;
That covers the what, now on to the why. The main scenario where I find myself reaching for liberal mocks is when I have a method which uses several features of a dependency, but I'm writing a test which is only interested in certain aspects of that usage. For example, let's say I have a controller object which is responsible for maintaining a view object. The controller has an &lt;span style="font-family:courier new;"&gt;initialize()&lt;/span&gt; method which sets the view's UI elements to some initial state, and I'd like to get that method under test. Now if the view has a lot of UI elements I wouldn't want to test all of the setup in one test. Instead I might want tests like &lt;span style="font-family:courier new;"&gt;initialize_shouldSetupCampaignDropDownCorrectly()&lt;/span&gt;, &lt;span style="font-family:courier new;"&gt;initialize_shouldSetupDaypartingViewWithModelContents()&lt;/span&gt;, etc. If I was mocking the view with a strict mock then every test would need to explicitly set expectations for all the calls which the controller will be making to the view, even if each individual test is only interested in a small subset of those calls. With liberal mocks that requirement is removed. I can essentially say 'this dependency is going to be used in a bunch of ways here, but I'm only concerned with these specific method calls'. The underlying motivation for this is to avoid &lt;a href="http://xunitpatterns.com/Fragile%20Test.html"&gt;Fragile Tests&lt;/a&gt;. If you're not using liberal mocks and one aspect of your expected behavior changes then suddenly &lt;span style="font-style: italic;"&gt;all&lt;/span&gt; your tests will fail, not just the test that specifies the behavior that's just changed. Fragile tests seem to be a common risk for new automated testing practitioners, and they can be really demoralizing.&lt;br/&gt;&lt;br/&gt;

Now, just because you &lt;span style="font-style: italic;"&gt;can&lt;/span&gt; doesn't always mean you &lt;span style="font-style: italic;"&gt;should&lt;/span&gt;. I've found that liberal mocks can be a bit of a crutch for a less-than-optimal design. If you find yourself needing to use a lot of liberal mocking then you should consider that to be a design smell. Maybe the method you're testing is doing too much work. If you can break your big method up into smaller methods that are testable then you're in a happier place, in terms of testing and more importantly in terms of design. Alternatively, the issue may be that the dependency which you're mocking out has some huge sprawling interface that should be &lt;a href="http://www.refactoring.com/catalog/extractInterface.html"&gt;split into several pieces&lt;/a&gt;. After doing that you may find that you only need to set expectations on one of those pieces, and the other parts can be replaced with a true Null Object.</content><link rel='replies' type='application/atom+xml' href='http://blog.thepete.net/feeds/5381770176802482184/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.blogger.com/comment.g?blogID=3432715695954425874&amp;postID=5381770176802482184' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/5381770176802482184'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/posts/default/5381770176802482184'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2009/03/liberal-mocks.html' title='Liberal Mocks'/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>ohthepete@gmail.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-6260250188572873378</id><published>2011-09-03T10:21:41.114-07:00</published><updated>2011-09-03T10:21:41.114-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi,

Nice post!

Sorry about the slow response to ...</title><content type='html'>Hi,&lt;br /&gt;&lt;br /&gt;Nice post!&lt;br /&gt;&lt;br /&gt;Sorry about the slow response to your bug report for the CocoaHTTPServer - I&amp;#39;ve added a Ruby side workaround which should be out with the next release (2.6.0 - should be out in a few days).</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/2976050840025158602/comments/default/6260250188572873378'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/2976050840025158602/comments/default/6260250188572873378'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2011/09/testing-mobile-web-apps-with-webdriver.html?showComment=1315070501114#c6260250188572873378' title=''/><author><name>jarib</name><uri>http://www.blogger.com/profile/03747085909055667138</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2011/09/testing-mobile-web-apps-with-webdriver.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-2976050840025158602' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/2976050840025158602' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-482587356'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-2988475414948528830</id><published>2011-10-27T02:01:29.984-07:00</published><updated>2011-10-27T02:01:29.984-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>if you want to have faster runtime for the android...</title><content type='html'>if you want to have faster runtime for the android web browser, try running against the x86 port of android. http://www.android-x86.org/&lt;br /&gt;&lt;br /&gt;Its faster, and more close enough to most cases to the android device browser.</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/2976050840025158602/comments/default/2988475414948528830'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/2976050840025158602/comments/default/2988475414948528830'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2011/09/testing-mobile-web-apps-with-webdriver.html?showComment=1319706089984#c2988475414948528830' title=''/><author><name>Srinivasan Raguraman</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='20' height='32' src='http://photos1.blogger.com/blogger/7892/1819/400/car_srinivas53_large.jpg'/></author><thr:in-reply-to href='http://blog.thepete.net/2011/09/testing-mobile-web-apps-with-webdriver.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-2976050840025158602' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/2976050840025158602' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1564063349'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-4317708213042691440</id><published>2012-01-04T07:43:51.331-08:00</published><updated>2012-01-04T07:43:51.331-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Was anyone else able to work around the mobile ale...</title><content type='html'>Was anyone else able to work around the mobile alert issue with ios? I am still getting a faded screen on the emulator after calling a window.alert().</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/2976050840025158602/comments/default/4317708213042691440'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/2976050840025158602/comments/default/4317708213042691440'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2011/09/testing-mobile-web-apps-with-webdriver.html?showComment=1325691831331#c4317708213042691440' title=''/><author><name>dforkosh</name><uri>http://www.blogger.com/profile/14421134924279188193</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2011/09/testing-mobile-web-apps-with-webdriver.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-2976050840025158602' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/2976050840025158602' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-930626809'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-756879752560703839</id><published>2011-07-07T13:52:58.444-07:00</published><updated>2011-07-07T13:52:58.444-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Where do we download the Symbiote 3.0 upgrade? Thi...</title><content type='html'>Where do we download the Symbiote 3.0 upgrade? This does not seem to be available from github.</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/5245024116805829719/comments/default/756879752560703839'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/5245024116805829719/comments/default/756879752560703839'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2011/05/inspect-state-of-our-running-ios-apps.html?showComment=1310071978444#c756879752560703839' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2011/05/inspect-state-of-our-running-ios-apps.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-5245024116805829719' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/5245024116805829719' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1387546742'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-7420480192678359720</id><published>2011-07-09T21:45:05.659-07:00</published><updated>2011-07-09T21:45:05.659-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@Anonymous, the latest code in the Frank repo now ...</title><content type='html'>@Anonymous, the latest code in the Frank repo now contains the Symbiote enhancements I described here. Ask away on the Frank mailing list if you need more details - http://groups.google.com/group/frank-discuss</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/5245024116805829719/comments/default/7420480192678359720'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/5245024116805829719/comments/default/7420480192678359720'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2011/05/inspect-state-of-our-running-ios-apps.html?showComment=1310273105659#c7420480192678359720' title=''/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:in-reply-to href='http://blog.thepete.net/2011/05/inspect-state-of-our-running-ios-apps.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-5245024116805829719' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/5245024116805829719' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-847037808'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-2862160941386160921</id><published>2011-04-21T16:09:12.119-07:00</published><updated>2011-04-21T16:12:34.379-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'></title><content type='html'>This comment has been removed by the author.</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/6340934392706302952/comments/default/2862160941386160921'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/6340934392706302952/comments/default/2862160941386160921'/><author><name>A</name><uri>http://www.blogger.com/profile/06431845526849742088</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2011/04/tutoral-creencast-on-frankifying-your.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-6340934392706302952' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/6340934392706302952' type='text/html'/><gd:extendedProperty name='blogger.contentRemoved' value='true'/><gd:extendedProperty name='blogger.itemClass' value='pid-1433464249'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-8043098052782118548</id><published>2011-04-21T16:12:26.490-07:00</published><updated>2011-04-21T16:12:26.490-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Frank,

You have an event in LA next week, I am...</title><content type='html'>Hi Frank,&lt;br /&gt;&lt;br /&gt;You have an event in LA next week, I am remote in NYC any case of recording it or having it over a online webinar?&lt;br /&gt;&lt;br /&gt;Thank You,&lt;br /&gt;&lt;br /&gt;NJ</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/6340934392706302952/comments/default/8043098052782118548'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/6340934392706302952/comments/default/8043098052782118548'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2011/04/tutoral-creencast-on-frankifying-your.html?showComment=1303427546490#c8043098052782118548' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2011/04/tutoral-creencast-on-frankifying-your.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-6340934392706302952' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/6340934392706302952' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1359412891'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-974207778333612140</id><published>2011-10-09T21:47:59.744-07:00</published><updated>2011-10-09T21:47:59.744-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi,

I am learning frank and trying to implement t...</title><content type='html'>Hi,&lt;br /&gt;&lt;br /&gt;I am learning frank and trying to implement the same in one of our project. I have few questions on frank could you please clarify if these questions are too basic please don&amp;#39;t mind as i am learning and implementing frank.&lt;br /&gt;&lt;br /&gt;Can we automate web application IOS devcies? For ex : if i want to automate google.com in iOS devcies?&lt;br /&gt;&lt;br /&gt;Please let me know the process if we can.&lt;br /&gt;&lt;br /&gt;Thanks in Advance,&lt;br /&gt;Kishore.</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/6340934392706302952/comments/default/974207778333612140'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/6340934392706302952/comments/default/974207778333612140'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2011/04/tutoral-creencast-on-frankifying-your.html?showComment=1318222079744#c974207778333612140' title=''/><author><name>Kishore G</name><uri>http://ikrish.wordpress.com</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2011/04/tutoral-creencast-on-frankifying-your.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-6340934392706302952' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/6340934392706302952' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-887139906'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-7383833862650954829</id><published>2010-11-25T12:35:34.343-08:00</published><updated>2010-11-25T12:35:34.343-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Great article ! Waiting for wave of new powerful a...</title><content type='html'>Great article ! Waiting for wave of new powerful and helpful gems.</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/4161514738790083450/comments/default/7383833862650954829'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/4161514738790083450/comments/default/7383833862650954829'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/11/creating-and-publishing-your-first-ruby.html?showComment=1290717334343#c7383833862650954829' title=''/><author><name>Pavel Nikitin</name><uri>https://profiles.google.com/101475487758954655460</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://2.bp.blogspot.com/_lBWvPaL945A/TJIRofYUotI/AAAAAAAAAFU/XiRDZTRdCOI/S220/avatar.jpg'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/11/creating-and-publishing-your-first-ruby.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-4161514738790083450' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/4161514738790083450' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1514185170'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-6972029830124795373</id><published>2010-11-26T04:59:26.363-08:00</published><updated>2010-11-26T04:59:26.363-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Great! There is a project that helps to create new...</title><content type='html'>Great! There is a project that helps to create new projects: &lt;a href="http://rubygems.org/gems/prigner" rel="nofollow"&gt;Prigner&lt;/a&gt;. Try it.</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/4161514738790083450/comments/default/6972029830124795373'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/4161514738790083450/comments/default/6972029830124795373'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/11/creating-and-publishing-your-first-ruby.html?showComment=1290776366363#c6972029830124795373' title=''/><author><name>Hallison Batista</name><uri>http://www.blogger.com/profile/05299020031520197357</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/11/creating-and-publishing-your-first-ruby.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-4161514738790083450' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/4161514738790083450' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-95111557'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-193321364243335410</id><published>2010-11-26T18:04:33.363-08:00</published><updated>2010-11-26T18:04:33.363-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>This is great and I love bundler, but I would like...</title><content type='html'>This is great and I love bundler, but I would like to see the testing part get integrated like jeweler does. Testing is a big part of the ruby community and having rspec, testunit, cucumber, or others baked in as options like jeweler has would be ideal.</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/4161514738790083450/comments/default/193321364243335410'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/4161514738790083450/comments/default/193321364243335410'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/11/creating-and-publishing-your-first-ruby.html?showComment=1290823473363#c193321364243335410' title=''/><author><name>John Wang</name><uri>http://www.blogger.com/profile/03146053982318523059</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://2.bp.blogspot.com/_UP1CsGyAmw0/TPBmoXayM4I/AAAAAAAAIzo/G2RZd46Wv8c/S220/johnwang.jpg'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/11/creating-and-publishing-your-first-ruby.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-4161514738790083450' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/4161514738790083450' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1315020856'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-1284526139527832367</id><published>2010-12-19T02:07:08.900-08:00</published><updated>2010-12-19T02:07:08.900-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>This is awesome stuff, had to link to it from my b...</title><content type='html'>This is awesome stuff, had to link to it from my blog and Ruby Learning!</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/4161514738790083450/comments/default/1284526139527832367'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/4161514738790083450/comments/default/1284526139527832367'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/11/creating-and-publishing-your-first-ruby.html?showComment=1292753228900#c1284526139527832367' title=''/><author><name>Vic</name><uri>http://www.blogger.com/profile/07933243091769804895</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://3.bp.blogspot.com/_rnYLDlz9MTU/Sb_geaQkYZI/AAAAAAAAA0s/3BvBxkHhAfQ/S220/Vic.jpg'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/11/creating-and-publishing-your-first-ruby.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-4161514738790083450' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/4161514738790083450' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1116910941'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-2528899082287200171</id><published>2011-01-21T15:39:11.651-08:00</published><updated>2011-01-21T15:39:11.651-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Awesome article! I had an issue with `rake publish...</title><content type='html'>Awesome article! I had an issue with `rake publish` (now `rake release`), but was still able to push to ruby gems with `gem push ruby_package` where ruby_package is the local gem package.</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/4161514738790083450/comments/default/2528899082287200171'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/4161514738790083450/comments/default/2528899082287200171'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/11/creating-and-publishing-your-first-ruby.html?showComment=1295653151651#c2528899082287200171' title=''/><author><name>Matthew</name><uri>http://www.blogger.com/profile/01472936098641452427</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/11/creating-and-publishing-your-first-ruby.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-4161514738790083450' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/4161514738790083450' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1645175758'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-755656434523807052</id><published>2011-08-18T09:24:51.257-07:00</published><updated>2011-08-18T09:24:51.257-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for this article... right to the point

i d...</title><content type='html'>Thanks for this article... right to the point&lt;br /&gt;&lt;br /&gt;i don&amp;#39;t know if it&amp;#39;s a matter of versioning&lt;br /&gt;&lt;br /&gt;but right now the command is &amp;#39;rake release&amp;#39; instead of &amp;#39;rake publish&amp;#39;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/6900788904020274082/comments/default/755656434523807052'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/6900788904020274082/comments/default/755656434523807052'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/11/timestamped-scenarios-custom-cucumber.html?showComment=1313684691257#c755656434523807052' title=''/><author><name>kasthor</name><uri>http://www.blogger.com/profile/00719318962541562940</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/11/timestamped-scenarios-custom-cucumber.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-6900788904020274082' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/6900788904020274082' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1697416846'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-1628253044875021622</id><published>2011-04-08T23:58:34.133-07:00</published><updated>2011-04-08T23:58:34.133-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks man your post really help me a lot.
Thanks ...</title><content type='html'>Thanks man your post really help me a lot.&lt;br /&gt;Thanks Again&lt;br /&gt;You rocks</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/3503721181843019236/comments/default/1628253044875021622'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/3503721181843019236/comments/default/1628253044875021622'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/10/objective-c-memory-errors-pt-ii.html?showComment=1302332314133#c1628253044875021622' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/10/objective-c-memory-errors-pt-ii.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-3503721181843019236' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/3503721181843019236' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-690049585'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-7721828224384371094</id><published>2010-10-11T23:43:46.388-07:00</published><updated>2010-10-11T23:43:46.388-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks, Pete. I like your explanation with pretty ...</title><content type='html'>Thanks, Pete. I like your explanation with pretty boxes - very helpful to understand! :-)&lt;br /&gt;&lt;br /&gt;I agree with you that autorelease is clean and often very useful. However, I still think that we need to be careful to use it because autorelease makes allocated memory stay longer than necessary on the iPhone/iPad which has strict memory constraints. &lt;br /&gt;(from Apple -  autorelease instead of release to an object extends the lifetime of that object at least until the pool itself is released)</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8434564713845385282/comments/default/7721828224384371094'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8434564713845385282/comments/default/7721828224384371094'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/10/common-objective-c-memory-management.html?showComment=1286865826388#c7721828224384371094' title=''/><author><name>hyou</name><uri>http://www.blogger.com/profile/12304164917072216737</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/10/common-objective-c-memory-management.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-8434564713845385282' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/8434564713845385282' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-981295527'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-3057174227647874055</id><published>2010-10-12T00:18:34.720-07:00</published><updated>2010-10-12T00:18:34.720-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Properties are an annoyingly easy way for Objectiv...</title><content type='html'>Properties are an annoyingly easy way for Objective C newbies to shoot themselves in the foot in a variety of different ways.&lt;br /&gt;&lt;br /&gt;Also watch out for extensive use of autorelease.  We found that iPhone OS 2.X devices used a really shoddy algo for when its autorelease allocations were freed.  It got better in iPhone OS 3.x, but it&amp;#39;s still not magic; for example, you should do explicit allocations &amp;amp; deallocations in tight loops.  &lt;br /&gt;&lt;br /&gt;Early versions of BlackBerry OS had the same problem.  Pre-4.5 OSes had a horrid garbage collector.  If you asked how much free memory the device had, it would very frequently tell you 0 KB, and then moments later the OS would purge 3 MB of garbage.  So here your code thinks the device has no free memory, yet it really has 3MB.&lt;br /&gt;&lt;br /&gt;I miss C and C++, and manually keeping track of your allocs and deallocs without any wizardry.</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8434564713845385282/comments/default/3057174227647874055'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8434564713845385282/comments/default/3057174227647874055'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/10/common-objective-c-memory-management.html?showComment=1286867914720#c3057174227647874055' title=''/><author><name>Jeff</name><uri>http://www.blogger.com/profile/08422063670767454268</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='31' height='21' src='http://2.bp.blogspot.com/_v3Z9EIWA2EU/SsQK8WR-OfI/AAAAAAAAB6Q/m99VY-KpFaU/S220/DSCN1856-1.JPG'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/10/common-objective-c-memory-management.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-8434564713845385282' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/8434564713845385282' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-8689859'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-1274479897263139605</id><published>2010-10-12T08:04:36.470-07:00</published><updated>2010-10-12T08:04:36.470-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thanks for the comments Jeff and Hyeeun.

I wonder...</title><content type='html'>Thanks for the comments Jeff and Hyeeun.&lt;br /&gt;&lt;br /&gt;I wonder if creating explicit short-lived autorelease pools would be one option to allow the use of autorelease in a more deterministic way.&lt;br /&gt;&lt;br /&gt;That would introduce even more overhead of course. I&amp;#39;d be interested to find out how much though.</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8434564713845385282/comments/default/1274479897263139605'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8434564713845385282/comments/default/1274479897263139605'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/10/common-objective-c-memory-management.html?showComment=1286895876470#c1274479897263139605' title=''/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/10/common-objective-c-memory-management.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-8434564713845385282' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/8434564713845385282' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-847037808'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-4453749093908668064</id><published>2010-12-23T04:59:54.027-08:00</published><updated>2010-12-23T04:59:54.027-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Nice work...The examples chosen were short and wel...</title><content type='html'>Nice work...The examples chosen were short and well explainatory...&lt;br /&gt;Asif Noor</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8434564713845385282/comments/default/4453749093908668064'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8434564713845385282/comments/default/4453749093908668064'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/10/common-objective-c-memory-management.html?showComment=1293109194027#c4453749093908668064' title=''/><author><name>Asif Noor</name><uri>http://www.techipost.com</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/10/common-objective-c-memory-management.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-8434564713845385282' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/8434564713845385282' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1677081619'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-8640649645059045382</id><published>2011-01-13T14:58:59.354-08:00</published><updated>2011-01-13T14:58:59.354-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>There seem to be diverging opinions about how to h...</title><content type='html'>There seem to be diverging opinions about how to handle initialization of ivars in init methods, however your points about memory management are well taken.&lt;br /&gt;&lt;br /&gt;Per Apple Memory Management Programming Guide: &amp;quot;The only places you shouldn’t use accessor methods to set an instance variable are in init methods and dealloc. To initialize a counter object with a number object representing zero, you might implement an init method as follows: - init {&lt;br /&gt;&lt;br /&gt;    self = [super init];&lt;br /&gt;&lt;br /&gt;    if (self) {&lt;br /&gt;&lt;br /&gt;        count = [[NSNumber alloc] initWithInteger:0];&lt;br /&gt;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    return self;&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&amp;quot;&lt;br /&gt;Your &amp;quot;Update&amp;quot; post gives the only example that conforms to the Apple convention, though you remark that you don&amp;#39;t like the approach, citing a lack of symmetry and the encouragement of other memory management errors.&lt;br /&gt;&lt;br /&gt;My comment is not a criticism or correction, but simply to draw attention to the Apple convention. Thanks for your post and explanations.</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8434564713845385282/comments/default/8640649645059045382'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8434564713845385282/comments/default/8640649645059045382'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/10/common-objective-c-memory-management.html?showComment=1294959539354#c8640649645059045382' title=''/><author><name>eric</name><uri>http://openid.magicwave.net/eric</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/openid16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/10/common-objective-c-memory-management.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-8434564713845385282' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/8434564713845385282' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1948251321'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-6919061541848267310</id><published>2011-02-25T08:22:12.143-08:00</published><updated>2011-02-25T08:22:12.143-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi, Obj-C noob with a C++ background here.

There ...</title><content type='html'>Hi, Obj-C noob with a C++ background here.&lt;br /&gt;&lt;br /&gt;There is something that is not clear to me. In your first paragraph, you say that feathers was never released. That&amp;#39;s simply because we didn&amp;#39;t call dealloc on it right? The second version of that code didn&amp;#39;t help me understand.&lt;br /&gt;&lt;br /&gt;Thanks for your marvelous tutorial!</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8434564713845385282/comments/default/6919061541848267310'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8434564713845385282/comments/default/6919061541848267310'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/10/common-objective-c-memory-management.html?showComment=1298650932143#c6919061541848267310' title=''/><author><name>Symphist</name><uri>http://www.blogger.com/profile/14630967988812462275</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/10/common-objective-c-memory-management.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-8434564713845385282' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/8434564713845385282' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1707084785'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-4694001253829343253</id><published>2011-02-27T16:30:22.018-08:00</published><updated>2011-02-27T16:30:22.018-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@Symphist, feathers is never released because its ...</title><content type='html'>@Symphist, feathers is never released because its reference count is never reduced down to 0, thus the memory system will never call dealloc. &lt;br /&gt;&lt;br /&gt;However, you should &lt;b&gt;NEVER&lt;/b&gt; explicitly call dealloc on an object yourself (aside from the [super dealloc] call inside a dealloc implementation). You must manage memory using retain, release, autorelease and friends.</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8434564713845385282/comments/default/4694001253829343253'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8434564713845385282/comments/default/4694001253829343253'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/10/common-objective-c-memory-management.html?showComment=1298853022018#c4694001253829343253' title=''/><author><name>Pete</name><uri>http://www.blogger.com/profile/08657951054571397493</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/10/common-objective-c-memory-management.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-8434564713845385282' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/8434564713845385282' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-598223055'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-8294742927318044429</id><published>2011-03-07T16:33:05.919-08:00</published><updated>2011-03-07T16:33:05.919-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thank you so much for this clear explanation. I st...</title><content type='html'>Thank you so much for this clear explanation. I started as a designer and am facing memory management for the first time. This is a life saver.</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8434564713845385282/comments/default/8294742927318044429'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8434564713845385282/comments/default/8294742927318044429'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/10/common-objective-c-memory-management.html?showComment=1299544385919#c8294742927318044429' title=''/><author><name>Anonymous</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/10/common-objective-c-memory-management.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-8434564713845385282' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/8434564713845385282' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-613247083'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-7086768469000135894</id><published>2010-07-26T18:23:27.730-07:00</published><updated>2010-07-26T18:23:27.730-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Pete, interesting way of tackling the problem. ...</title><content type='html'>Hi Pete, interesting way of tackling the problem.  &lt;br /&gt;&lt;br /&gt;I saw an interesting presentation at this year&amp;#39;s WWDC conference (on June 9th 2010) entitled, &amp;quot;UI Automation&amp;quot; by Mike Jurewitz of Developer Tools.  This might be of use for you, for testing on iOS 4.0 and onward.   &lt;br /&gt;&lt;br /&gt;Please see:&lt;br /&gt;&lt;br /&gt;&lt;a href="http://developer.apple.com/iphone/library/documentation/DeveloperTools/Reference/UIAutomationRef/Introduction/Introduction.html" rel="nofollow"&gt;&lt;b&gt;UI Automation Reference Collection&lt;/b&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;-J</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/7086768469000135894'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/7086768469000135894'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html?showComment=1280193807730#c7086768469000135894' title=''/><author><name>Jeff</name><uri>http://www.blogger.com/profile/08422063670767454268</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='31' height='21' src='http://2.bp.blogspot.com/_v3Z9EIWA2EU/SsQK8WR-OfI/AAAAAAAAB6Q/m99VY-KpFaU/S220/DSCN1856-1.JPG'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-8166190842767775043' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/8166190842767775043' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-8689859'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-4096443766057600436</id><published>2010-10-19T17:45:39.312-07:00</published><updated>2010-10-19T17:45:39.312-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi pete,
Thanks for the article.
Does frank use ui...</title><content type='html'>Hi pete,&lt;br /&gt;Thanks for the article.&lt;br /&gt;Does frank use uiautomation? &lt;br /&gt;can ou show somecode?&lt;br /&gt;Regards,</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/4096443766057600436'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/4096443766057600436'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html?showComment=1287535539312#c4096443766057600436' title=''/><author><name>Hari Sreekanth Upadrasta</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='17' src='http://3.bp.blogspot.com/_edu3ERLixR4/SmBCCTeH1tI/AAAAAAAAAJg/ntD2obMDvOQ/S220/mypic2.jpg'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-8166190842767775043' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/8166190842767775043' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-46784913'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-1129513895312459114</id><published>2010-10-25T18:34:17.382-07:00</published><updated>2010-10-25T18:34:17.382-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Hari, Thanks for the interest.

No, Frank doesn...</title><content type='html'>Hi Hari, Thanks for the interest.&lt;br /&gt;&lt;br /&gt;No, Frank doesn&amp;#39;t use UIAutomation. It uses an open source library called UISpec which provides similar capability to UIAutomation.&lt;br /&gt;&lt;br /&gt;If you&amp;#39;d like to see how Frank is implemented, check out the github repo: http://github.com/moredip/Frank&lt;br /&gt;&lt;br /&gt;You can also find example test scripts there too: http://github.com/moredip/Frank/blob/master/example/EmployeeAdmin/features/main.feature</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/1129513895312459114'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/1129513895312459114'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html?showComment=1288056857382#c1129513895312459114' title=''/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-8166190842767775043' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/8166190842767775043' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-847037808'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-5195545277775754271</id><published>2010-11-08T17:17:43.278-08:00</published><updated>2010-11-08T17:17:43.278-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Thank you for taking the time to blog about this!
...</title><content type='html'>Thank you for taking the time to blog about this!&lt;br /&gt;&lt;br /&gt;I am new to automation on iOS and have been using Instruments to do so.  Can you elaborate a bit more on the  limitations you were hitting in Instruments that made you use Frank?</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/5195545277775754271'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/5195545277775754271'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html?showComment=1289265463278#c5195545277775754271' title=''/><author><name>error454</name><uri>http://mobilecoder.wordpress.com/</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/openid16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-8166190842767775043' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/8166190842767775043' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-554161530'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-7135203742051703766</id><published>2010-11-10T05:37:42.899-08:00</published><updated>2010-11-10T05:37:42.899-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>One reason we didn&amp;#39;t use UIAutomation for Fran...</title><content type='html'>One reason we didn&amp;#39;t use UIAutomation for Frank was because it wasn&amp;#39;t available at the time :)&lt;br /&gt;&lt;br /&gt;Aside from that, UIAutomation seems more targeted towards the record-and-playback style of functional testing. In my experience those type of functional tests are quite brittle. I prefer programmatic functional tests using tools like Cucumber, JBehave.</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/7135203742051703766'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/7135203742051703766'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html?showComment=1289396262899#c7135203742051703766' title=''/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-8166190842767775043' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/8166190842767775043' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-847037808'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-7792141979678769413</id><published>2010-11-15T21:55:54.693-08:00</published><updated>2010-11-15T21:55:54.693-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Frank is really innovative. Thanks for creating it...</title><content type='html'>Frank is really innovative. Thanks for creating it!&lt;br /&gt;&lt;br /&gt;btw, when I try to &amp;quot;Dump the current DOM&amp;quot; of the iphone app, the result is the following error:&lt;br /&gt;&lt;br /&gt;HTTP Server: Error 405 - Method Not Allowed: OPTIONS&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Any ideas why and what the solution would be?&lt;br /&gt;&lt;br /&gt;Are there any plans to setup a Google group for Frank ?</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/7792141979678769413'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/7792141979678769413'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html?showComment=1289886954693#c7792141979678769413' title=''/><author><name>RodneyDegracia</name><uri>http://www.blogger.com/profile/05023761401966690521</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-8166190842767775043' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/8166190842767775043' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1551091316'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-1677454733635614047</id><published>2010-11-18T08:45:45.463-08:00</published><updated>2010-11-18T08:45:45.463-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Rodney,

I set up a google group for questions ...</title><content type='html'>Hi Rodney,&lt;br /&gt;&lt;br /&gt;I set up a google group for questions about Frank: http://groups.google.com/group/frank-discuss&lt;br /&gt;&lt;br /&gt;Please do sign up and ask away with any questions you have.</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/1677454733635614047'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/1677454733635614047'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html?showComment=1290098745463#c1677454733635614047' title=''/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-8166190842767775043' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/8166190842767775043' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-847037808'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-1665854889602416303</id><published>2011-05-16T05:39:20.360-07:00</published><updated>2011-05-16T05:39:20.360-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I installed and used Frank for some time, looked i...</title><content type='html'>I installed and used Frank for some time, looked its code a little and made a little automation test case with it as well and I think it is a great tool among other possible choices. The thing that I wonder is that Frank will be a tool that can test application on the device itself rather than simulator...</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/1665854889602416303'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/1665854889602416303'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html?showComment=1305549560360#c1665854889602416303' title=''/><author><name>cansaner</name><uri>http://www.blogger.com/profile/10160465506954587696</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-8166190842767775043' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/8166190842767775043' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-648339016'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-543035607457349053</id><published>2011-05-16T08:20:50.890-07:00</published><updated>2011-05-16T08:20:50.890-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Yes, it is possible to run Frank tests against a p...</title><content type='html'>Yes, it is possible to run Frank tests against a physical device. Two things are more challenging in that scenario. We haven&amp;#39;t figured out a way to automate re-launching the app on the device, and you can&amp;#39;t automate rotation of the device.</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/543035607457349053'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/543035607457349053'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html?showComment=1305559250890#c543035607457349053' title=''/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-8166190842767775043' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/8166190842767775043' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-847037808'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-5603633723574506742</id><published>2011-05-18T01:11:54.197-07:00</published><updated>2011-05-18T01:11:54.197-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>hmm i was trying to test my application against my...</title><content type='html'>hmm i was trying to test my application against my testing IPAD but I just couldn&amp;#39;t understand even howto set the environment variable for bundle path to show the application working on IPAD :(. Automating rotation does not have huge importance for me, automation on simulator for rotation is enough. For the other matter, I think an operating system wide mechanism like android adb library would be helpful for relaunching the application so even restarting IPAD can be tested(as we can test android mobile handsets for this matter)... But I don&amp;#39;t know iOS has any library or protocol supporting these features, it is your speciality :)</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/5603633723574506742'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/5603633723574506742'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html?showComment=1305706314197#c5603633723574506742' title=''/><author><name>cansaner</name><uri>http://www.blogger.com/profile/10160465506954587696</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-8166190842767775043' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/8166190842767775043' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-648339016'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-8584027031520466601</id><published>2011-07-20T11:08:48.673-07:00</published><updated>2011-07-20T11:08:48.673-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Pete,

This is a great idea!!

I am trying to s...</title><content type='html'>Hi Pete,&lt;br /&gt;&lt;br /&gt;This is a great idea!!&lt;br /&gt;&lt;br /&gt;I am trying to set this up for iPhone and I can build and run the simulator. I just cannot connect to it from the browser via http://localhost:37265.&lt;br /&gt;&lt;br /&gt;I also do not get the &amp;quot;Allow incoming connections&amp;quot; dialog.&lt;br /&gt;&lt;br /&gt;What am I missing?&lt;br /&gt;&lt;br /&gt;Thanks.&lt;br /&gt;&lt;br /&gt;Srini</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/8584027031520466601'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/8584027031520466601'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html?showComment=1311185328673#c8584027031520466601' title=''/><author><name>nikihana</name><uri>http://www.blogger.com/profile/15751146909570169580</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-8166190842767775043' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/8166190842767775043' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-360375213'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-1230834968496400194</id><published>2011-08-10T06:43:15.784-07:00</published><updated>2011-08-10T06:43:15.784-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Hi Pete i&amp;#39;m biting into getting Frank to work ...</title><content type='html'>Hi Pete i&amp;#39;m biting into getting Frank to work on an example Calculator program. Most things work as intended right now. But...&lt;br /&gt;&lt;br /&gt;The &lt;i&gt;&amp;quot;Given I lanch the app&amp;quot;&lt;/i&gt; step implementation doesn&amp;#39;t seem to work. I want to restart my apps every time to - as you indicated also - start with a clean sheet.&lt;br /&gt;&lt;br /&gt;Right now if i start the simulator and run cucumber. It waits until i run the app, and then pushes the home button (like the step indicates). It then keeps waiting and doesn&amp;#39;t restart the app like intended.&lt;br /&gt;&lt;br /&gt;I&amp;#39;m working on Mac OS Lion, XCode 4. &lt;br /&gt;&lt;br /&gt;Could you help me out on this one? (info@eekay.nl) thanks!</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/1230834968496400194'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/1230834968496400194'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html?showComment=1312983795784#c1230834968496400194' title=''/><author><name>EeKay</name><uri>http://www.eekay.nl</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/blank.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-8166190842767775043' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/8166190842767775043' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1833352340'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-5015181076235687123</id><published>2011-08-10T11:08:15.412-07:00</published><updated>2011-08-10T11:08:15.412-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>@EeKay: 
I have the same problem with the &amp;quot;gi...</title><content type='html'>@EeKay: &lt;br /&gt;I have the same problem with the &amp;quot;given i launch the app&amp;quot; today, running Lion with the new Xcode. &lt;br /&gt;I fixed it by editing the launch_steps.rb, changing all instances of &amp;quot;4.2&amp;quot; to &amp;quot;4.3&amp;quot;. &lt;br /&gt;The new xcode apparently does now have build in iOS 4.2 support.</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/5015181076235687123'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/5015181076235687123'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html?showComment=1312999695412#c5015181076235687123' title=''/><author><name>SorenToft</name><uri>http://www.blogger.com/profile/13014736316501519798</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-8166190842767775043' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/8166190842767775043' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1814169178'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-4919833395057532783</id><published>2011-08-17T16:53:33.566-07:00</published><updated>2011-08-17T16:53:33.566-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Is there a documentation how to run frank test on ...</title><content type='html'>Is there a documentation how to run frank test on physical iPad device?&lt;br /&gt;&lt;br /&gt;Thanks in advance!!!&lt;br /&gt;&lt;br /&gt;AB</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/4919833395057532783'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/4919833395057532783'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html?showComment=1313625213566#c4919833395057532783' title=''/><author><name>Abhishek Banerjee</name><uri>http://www.blogger.com/profile/17550201124484958090</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-8166190842767775043' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/8166190842767775043' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1228336064'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-6075618498804356647</id><published>2011-10-06T02:00:34.778-07:00</published><updated>2011-10-06T02:00:34.778-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>how to use it on physical device</title><content type='html'>how to use it on physical device</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/6075618498804356647'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/8166190842767775043/comments/default/6075618498804356647'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html?showComment=1317891634778#c6075618498804356647' title=''/><author><name>sasikumar</name><uri>http://www.blogger.com/profile/11254874745954315917</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/07/frank-automated-acceptance-tests-for.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-8166190842767775043' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/8166190842767775043' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-385966556'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-2133536972401897984</id><published>2010-02-23T06:32:06.866-08:00</published><updated>2010-02-23T06:32:06.866-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Even C and C++ have typedef. It&amp;#39;s also useful ...</title><content type='html'>Even C and C++ have typedef. It&amp;#39;s also useful for giving aliases to complex container types without declaring a whole new class:&lt;br /&gt;  typedef Map&amp;lt;List&amp;lt;Foo&amp;gt;, List&amp;lt;Bar&amp;gt;&amp;gt; MyListListMap;</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/7362590025924733581/comments/default/2133536972401897984'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/7362590025924733581/comments/default/2133536972401897984'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/02/primitive-obsession-obsessions.html?showComment=1266935526866#c2133536972401897984' title=''/><author><name>s.r.e.turner</name><uri>http://www.google.com/profiles/s.r.e.turner</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img1.blogblog.com/img/openid16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/02/primitive-obsession-obsessions.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-7362590025924733581' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/7362590025924733581' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-484878970'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-2893323439967325037</id><published>2010-02-23T11:56:35.817-08:00</published><updated>2010-02-23T11:56:35.817-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I was under the impression that the compiler doesn...</title><content type='html'>I was under the impression that the compiler doesn&amp;#39;t enforce type-safety on those typedefs though. For example, the following would compile:&lt;br /&gt;&lt;br /&gt;typedef int DaySpan;&lt;br /&gt;typedef int WeekSpan;&lt;br /&gt;&lt;br /&gt;DaySpan getRequestedPeriod();&lt;br /&gt;&lt;br /&gt;void increaseRentalPeriod( WeekSpan period );&lt;br /&gt;&lt;br /&gt;void someFunction() {&lt;br /&gt;  increaseRentalPeriod(&lt;br /&gt;    getRequestedPeriod() &lt;br /&gt;  );&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;I could well be wrong on that though; it&amp;#39;s been a while since I wrote any C++!</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/7362590025924733581/comments/default/2893323439967325037'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/7362590025924733581/comments/default/2893323439967325037'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/02/primitive-obsession-obsessions.html?showComment=1266954995817#c2893323439967325037' title=''/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/02/primitive-obsession-obsessions.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-7362590025924733581' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/7362590025924733581' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-847037808'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-286981201442468657</id><published>2010-02-23T14:10:55.462-08:00</published><updated>2010-02-23T14:10:55.462-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>It&amp;#39;s a while since I&amp;#39;ve written any C or C...</title><content type='html'>It&amp;#39;s a while since I&amp;#39;ve written any C or C++ either, but yes, that sounds familiar now you mention it. In which case it doesn&amp;#39;t really solve the problem, does it?</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/7362590025924733581/comments/default/286981201442468657'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/7362590025924733581/comments/default/286981201442468657'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/02/primitive-obsession-obsessions.html?showComment=1266963055462#c286981201442468657' title=''/><author><name>Stephen Turner</name><uri>http://www.blogger.com/profile/06942589776732001656</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/02/primitive-obsession-obsessions.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-7362590025924733581' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/7362590025924733581' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-238566970'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-2030140225778620927</id><published>2010-10-07T08:11:02.174-07:00</published><updated>2010-10-07T08:11:02.174-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Just FYI, &amp;quot;mash&amp;quot; stands for Map hASH. Al...</title><content type='html'>Just FYI, &amp;quot;mash&amp;quot; stands for Map hASH. Also, the original name for the method is #graph. Both #mash and #graph are supported (sort of like #map vs. #collect).</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/99440316219000888/comments/default/2030140225778620927'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/99440316219000888/comments/default/2030140225778620927'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/02/ruby-facets-mash-method.html?showComment=1286464262174#c2030140225778620927' title=''/><author><name>tea42</name><uri>http://www.blogger.com/profile/02848516783203845093</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='24' src='http://www.umich.edu/~umfandsf/film/img/colossus-hall-sm.jpg'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/02/ruby-facets-mash-method.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-99440316219000888' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/99440316219000888' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-834949426'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-4220630896092789356</id><published>2010-02-03T14:48:53.433-08:00</published><updated>2010-02-03T14:48:53.433-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Option 3 is similar to what we do at work (we use ...</title><content type='html'>Option 3 is similar to what we do at work (we use Mercurial). We have a staging tree which is only used by our immediate team. We push from our local repositories to the staging tree, run tests against that, and then push to the tree that the rest of the company uses. It doesn&amp;#39;t stop bad changes propagating to the rest of our immediate team, but they&amp;#39;re quickly cleared up. Of course, there&amp;#39;s nothing to stop you taking this to the logical limit and having a personal staging tree in your own filespace.&lt;br /&gt;&lt;br /&gt;If you only do this occasionally, another option is to make a second clone of the shared tree if you want to make an independent change, and push both clones to the shared tree.</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/6453696039626648878/comments/default/4220630896092789356'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/6453696039626648878/comments/default/4220630896092789356'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/02/partial-commits-with-git.html?showComment=1265237333433#c4220630896092789356' title=''/><author><name>Stephen Turner</name><uri>http://www.blogger.com/profile/06942589776732001656</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/02/partial-commits-with-git.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-6453696039626648878' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/6453696039626648878' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-238566970'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-2285629654495415936</id><published>2010-02-06T12:46:22.203-08:00</published><updated>2010-02-06T12:46:22.203-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>I actually enjoy that my SCCS (I use Perforce) mak...</title><content type='html'>I actually enjoy that my SCCS (I use Perforce) makes me focus on one fix at a time.  &lt;br /&gt;&lt;br /&gt;This helps keep me in focus on what I had intended to do, without getting stymied on stuff like &amp;quot;Oh!  Well, I&amp;#39;ll make that a proper Singleton implementation while I&amp;#39;ve got the code opened&amp;quot; or &amp;quot;God, those really need to be changed to const&amp;quot;.  It&amp;#39;s those little things that can really eat away at my dev cycles in any given day without my realizing it; how many times have you set out to fix a meaty P1 bug and then next thing you know, you&amp;#39;ve fixed a half-dozen minor code issues without touching what you had originally set out to fix... and now it&amp;#39;s time to turn in for the evening?&lt;br /&gt;&lt;br /&gt;Or worse, you get halfway into your primary coding objective, then get sidetracked and make 5 or 6 minor code fixes, and as it&amp;#39;s getting near time to check your work in and go home, you&amp;#39;ve introduced a new crash somewhere.  Now you have at least 6 smoking guns to track down.  I admit I&amp;#39;ve been here before and had to say &amp;quot;screw it!&amp;quot; and backed out all of my changes and simply started over, keeping focus on my primary objective -- which always goes more smoothly the second time around.&lt;br /&gt;&lt;br /&gt;I like atomic checkins:  Take a coding task that you estimate to be a day&amp;#39;s worth of work, make it happen, and check it in at the end of the day.  No gratuitous fixes, no partial checkins.  And as a bonus, it teaches you to be better at estimating how long dev tasks will take, a skill that most developers need honed from time to time.&lt;br /&gt;&lt;br /&gt;-Jeff</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/6453696039626648878/comments/default/2285629654495415936'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/6453696039626648878/comments/default/2285629654495415936'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/02/partial-commits-with-git.html?showComment=1265489182203#c2285629654495415936' title=''/><author><name>Jeff</name><uri>http://www.blogger.com/profile/08422063670767454268</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='31' height='21' src='http://2.bp.blogspot.com/_v3Z9EIWA2EU/SsQK8WR-OfI/AAAAAAAAB6Q/m99VY-KpFaU/S220/DSCN1856-1.JPG'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/02/partial-commits-with-git.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-6453696039626648878' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/6453696039626648878' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-8689859'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-6398240968220017788</id><published>2010-11-03T10:39:10.992-07:00</published><updated>2010-11-03T10:39:10.992-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Won&amp;#39;t &amp;#39;git stash save --keep-index&amp;#39; le...</title><content type='html'>Won&amp;#39;t &amp;#39;git stash save --keep-index&amp;#39; let you test your staged version before commit?</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/6453696039626648878/comments/default/6398240968220017788'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/6453696039626648878/comments/default/6398240968220017788'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/02/partial-commits-with-git.html?showComment=1288805950992#c6398240968220017788' title=''/><author><name>eijk</name><uri>http://www.blogger.com/profile/04781116845068256120</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/02/partial-commits-with-git.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-6453696039626648878' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/6453696039626648878' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-79580977'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-338660313176521555</id><published>2010-11-21T15:50:00.684-08:00</published><updated>2010-11-21T15:50:00.684-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>&amp;quot;Option number 3 would be to have a CI pipeli...</title><content type='html'>&amp;quot;Option number 3 would be to have a CI pipeline such that you don&amp;#39;t ever commit changes to a branch that others can touch until the CI system has had a chance to run tests against your commit. Instead, you would always be commiting changes to a private branch. The CI system would detect your commit, run a build, and then merge your changes into a shared branch if and only if your commit passed muster. I don&amp;#39;t think this would prevent commits in the middle of a batch of commits being pushed to your private branch from bein un-tested, but it would prevent the system ever getting into a state where the shared head is untested. &amp;quot;&lt;br /&gt;&lt;br /&gt;This sounds a lot like the Android workflow using Gerrit.&lt;br /&gt;&lt;br /&gt;http://source.android.com/source/life-of-a-patch.html</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/6453696039626648878/comments/default/338660313176521555'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/6453696039626648878/comments/default/338660313176521555'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2010/02/partial-commits-with-git.html?showComment=1290383400684#c338660313176521555' title=''/><author><name>Rob</name><uri>http://www.blogger.com/profile/12461770745354498335</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2010/02/partial-commits-with-git.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-6453696039626648878' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/6453696039626648878' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1561505158'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-2873719099403654977</id><published>2009-04-20T10:41:00.000-07:00</published><updated>2009-04-20T10:41:45.425-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>great addition. BTW: I'm looking to contact you gu...</title><content type='html'>great addition. BTW: I'm looking to contact you guys at mock4as for some collaboration around your project but can't find any contact methods other than these commentaries. Possible if you reply on this comment via my email that will hopefully be attached to this comment?</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/2922821942331614999/comments/default/2873719099403654977'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/2922821942331614999/comments/default/2873719099403654977'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2009/04/mockwillexecute-in-mock4as.html?showComment=1240249260000#c2873719099403654977' title=''/><author><name>AlexU</name><uri>http://www.blogger.com/profile/07034538007110922641</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2009/04/mockwillexecute-in-mock4as.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-2922821942331614999' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/2922821942331614999' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-2039203021'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-2536019619787976713</id><published>2009-05-03T22:54:00.000-07:00</published><updated>2009-05-03T22:54:25.345-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Alex, unfortunately your email wasn't attached to ...</title><content type='html'>Alex, unfortunately your email wasn't attached to your comment, as far as I can tell. Shoot me an email - public@thepete.net.</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/2922821942331614999/comments/default/2536019619787976713'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/2922821942331614999/comments/default/2536019619787976713'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2009/04/mockwillexecute-in-mock4as.html?showComment=1241416440000#c2536019619787976713' title=''/><author><name>Pete Hodgson</name><uri>http://www.blogger.com/profile/18168828113119060764</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='http://1.bp.blogspot.com/_rzQrByr0AIg/ScgMvzg39fI/AAAAAAAACwU/EpvdvJcsSGo/s1600-R/092bdd341837502345cd9ceebda740c9%3Fs%3D128%26d%3Didenticon%26r%3Dpg'/></author><thr:in-reply-to href='http://blog.thepete.net/2009/04/mockwillexecute-in-mock4as.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-2922821942331614999' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/2922821942331614999' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-847037808'/></entry><entry><id>tag:blogger.com,1999:blog-3432715695954425874.post-6057578312903057258</id><published>2009-06-26T14:12:03.331-07:00</published><updated>2009-06-26T14:12:03.331-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Check out mockito for flex 
http://bitbucket.org/l...</title><content type='html'>Check out mockito for flex &lt;br /&gt;http://bitbucket.org/loomis/mockito-flex</content><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/2922821942331614999/comments/default/6057578312903057258'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/3432715695954425874/2922821942331614999/comments/default/6057578312903057258'/><link rel='alternate' type='text/html' href='http://blog.thepete.net/2009/04/mockwillexecute-in-mock4as.html?showComment=1246050723331#c6057578312903057258' title=''/><author><name>Kris</name><uri>http://www.blogger.com/profile/00421196078353992941</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='http://img2.blogblog.com/img/b16-rounded.gif'/></author><thr:in-reply-to href='http://blog.thepete.net/2009/04/mockwillexecute-in-mock4as.html' ref='tag:blogger.com,1999:blog-3432715695954425874.post-2922821942331614999' source='http://www.blogger.com/feeds/3432715695954425874/posts/default/2922821942331614999' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1559532574'/></entry></feed>